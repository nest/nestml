neuron validExpressionTest:
  state: 
    Volt V 
    InverseVolt 1/V   
    Ampere A
    Resist Ohm
    Real real
  end

  function foo(amp A, ohm Ohm) V:  #Unit type in functions
    return amp * ohm
  end

  input:
      spikeInh nS <- inhibitory spike
      spikeExc nS <- excitatory spike
      currents <- current
  end

  parameters:   
  end

  output: spike

  internals:
    S_1 ms   = resolution()                 #predefined Functions
  end

  update:
    Volt = foo(7 A,2 Ohm)                   #function call 
    Volt = Resist * Ampere                  #multipilication gives correct unit
    Volt = 2 * Volt                         #multiplication with int -> unit
    Volt = 2.0 * Volt                       #multiplication with real -> unit
    Volt = Volt + Volt                      #addition
    Volt = Volt - Volt                      #substraction
    Real = Volt/Volt                        #division erases units -> real
    Resist = Volt / Ampere                  #division gives correct unit
    Volt = Volt / 2                         #division with int -> unit
    Volt = Volt / 2.0                       #division with real -> unit
    InverseVolt = 2 / Volt                  #unit in denominator -> inverse unit
    InverseVolt = 2.0 / Volt                #unit in denominator -> inverse unit
    Volt = -Volt                            #unary minus
    
    Volt = true?3V:Volt                     #ternary

    if Resist > 3Ohm:                       #Comparison
    elif Resist < 3Ohm:                     #Comparison
    elif Resist == 3Ohm:                    #Comparison
    elif Resist >= 3Ohm:                    #Comparison
    elif Resist <= 3Ohm:                    #Comparison
    elif Resist <> 3Ohm:                    #Comparison
    end
  end

end
