neuron iaf_cond_alpha_implicit:

  state:
    V_m real = -70

    DGI real = 0
    GI real = 0
    DGE real = 0
    GE real = 0
  end

  equations:
    # Implicit
    DGI' = DGI*-1/tau_synI
    GI' = DGI + GI *-1/tau_synI
    DGE' = DGE*-1/tau_synE
    GE' = DGE + GE *-1/tau_synE
    V_m' = -1/((1 / g_L) * C_m) * (V_m - E_L)  - 1/C_m * GI * (V_m-V_reversalI) - 1/C_m * GE * (V_m-V_reversalE) + (I_e + currents)/C_m
  end

  parameters:
   V_th mV = -55.0      # Threshold Potential in mV
   V_reset mV = -60.0   # Reset Potential in mV
   t_ref ms = 2.0       # Refractory period in ms
   g_L ms = 16.6667     # Leak Conductance in nS
   C_m pF = 250.0       # Membrane Capacitance in pF
   function Tau ms = (1 / g_L) * C_m
   V_reversalE mV = 0          # Excitatory reversal Potential in mV
   V_reversalI mV = -85.0      # Inhibitory reversal Potential in mV
   E_L mV = -70.0       # Leak reversal Potential (aka resting potential) in mV
   tau_synE ms = 0.2    # Synaptic Time Constant Excitatory Synapse in ms
   tau_synI ms = 2.0    # Synaptic Time Constant for Inhibitory Synapse in ms
   I_e pA = 0           # Constant Current in pA

   # Input current injected by CurrentEvent.
   # This variable is used to transport the current applied into the
   # _dynamics function computing the derivative of the state vector.
  end

  function set_Tau(v ms):
  end

  internals:
    h   ms   = resolution()

    # Impulse to add to DG_EXC on spike arrival to evoke unit-amplitude
    # conductance excursion.
    PSConInit_E real = 1.0 * e / tau_synE

    # Impulse to add to DG_INH on spike arrival to evoke unit-amplitude
    # conductance excursion.
    PSConInit_I real = 1.0 * e / tau_synI

    # refractory time in steps
    RefractoryCounts integer = steps(t_ref)

    r integer
  end

  input:
      spikeInh real <- inhibitory spike
      spikeExc real <- excitatory spike
      currents <- current
  end

  output: spike

  update:

    integrate_odes()
    if r != 0: # not refractory
      r =  r - 1
      V_m = V_reset # clamp potential

    elif V_m >= V_th:
      r = RefractoryCounts
      V_m = V_reset # clamp potential
      emit_spike()

    end

    DGE = DGE + spikeExc * PSConInit_E
    DGI = DGI + spikeInh * PSConInit_I
  end

end


neuron iaf_cond_alpha_implicit2:

  state:
    V_m real = -70

    DGI real = 0
    GI real = 0
    DGE real = 0
    GE real = 0
  end

  equations:
    # Implicit
    DGI' = DGI*-1/tau_synI
    GI' = DGI + GI *-1/tau_synI
    DGE' = DGE*-1/tau_synE
    GE' = DGE + GE *-1/tau_synE
    V_m' = -1/((1 / g_L) * C_m) * (V_m - E_L)  - 1/C_m * GI * (V_m-V_reversalI) \
          - 1/C_m * GE * (V_m-V_reversalE) + (I_e + currents)/C_m
  end

  parameters:
   V_th mV = -55.0      # Threshold Potential in mV
   V_reset mV = -60.0   # Reset Potential in mV
   t_ref ms = 2.0       # Refractory period in ms
   g_L ms = 16.6667     # Leak Conductance in nS
   C_m pF = 250.0       # Membrane Capacitance in pF
   function Tau ms = (1 / g_L) * C_m
   V_reversalE mV = 0          # Excitatory reversal Potential in mV
   V_reversalI mV = -85.0      # Inhibitory reversal Potential in mV
   E_L mV = -70.0       # Leak reversal Potential (aka resting potential) in mV
   tau_synE ms = 0.2    # Synaptic Time Constant Excitatory Synapse in ms
   tau_synI ms = 2.0    # Synaptic Time Constant for Inhibitory Synapse in ms
   I_e pA = 0           # Constant Current in pA

   # Input current injected by CurrentEvent.
   # This variable is used to transport the current applied into the
   # _dynamics function computing the derivative of the state vector.
  end

  function set_Tau(v ms):
  end

  internals:
    h   ms   = resolution()

    # Impulse to add to DG_EXC on spike arrival to evoke unit-amplitude
    # conductance excursion.
    PSConInit_E real = 1.0 * e / tau_synE

    # Impulse to add to DG_INH on spike arrival to evoke unit-amplitude
    # conductance excursion.
    PSConInit_I real = 1.0 * e / tau_synI

    # refractory time in steps
    RefractoryCounts integer = steps(t_ref)

    r integer
  end

  input:
      spikeInh real <- inhibitory spike
      spikeExc real <- excitatory spike
      currents <- current
  end

  output: spike

  update:

    integrate_odes()
    if r != 0: # not refractory
      r =  r - 1
      V_m = V_reset # clamp potential

    elif V_m >= V_th:
      r = RefractoryCounts
      V_m = V_reset # clamp potential
      emit_spike()

    end

    DGE = DGE + spikeExc * PSConInit_E
    DGI = DGI + spikeInh * PSConInit_I
  end

end
