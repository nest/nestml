/*
aeif_cond_alpha_multisynapse  In contrast to most other neuron models, this
one allow an arbitrary number of synaptic time constant.

The time constants are supplied by two arrays tau_ex and tau_in for
the excitatory and inhibitory synapses, respectively.  Port numbers
are then automatically assigned and there range is from 1 to n.  (n
being the index of the last element of the tau_ex and tau_in
arrays).
During connection, the ports are selected with the property "receptor_type".

Examples:
% PyNEST example, of how to assign a synaptic time constant to a receptor type.

nest.SetDefaults('aeif_cond_alpha_multisynapse', {'HMIN':0.001})
nest.SetDefaults('aeif_cond_alpha_multisynapse', {'MAXERR':1e-10})

neuron = nest.Create('aeif_cond_alpha_multisynapse')
nest.SetStatus(neuron, {"V_peak": 0.0, "a": 4.0, "b":80.5})
nest.SetStatus(neuron, {'taus_syn':[0.2,2.0,20.0,20.0]})

spike = nest.Create('spike_generator', params = {'spike_times':
                                                           np.array([100.0])})
voltmeter = nest.Create('voltmeter', 1, {'withgid': True})

nest.CopyModel("static_synapse", "synapse1", {"weight":1.0, "delay":1.0,
 'receptor_type': 1})
nest.CopyModel("static_synapse", "synapse2", {"weight":1.0, "delay":100.0,
 'receptor_type': 2})
nest.CopyModel("static_synapse", "synapse3", {"weight":1.0, "delay":300.0,
 'receptor_type': 3})
nest.CopyModel("static_synapse", "synapse4", {"weight":-1.0, "delay":500.0,
 'receptor_type': 4})

nest.Connect(spike, neuron, model="synapse1")
nest.Connect(spike, neuron, model="synapse2")
nest.Connect(spike, neuron, model="synapse3")
nest.Connect(spike, neuron, model="synapse4")

nest.Connect(voltmeter, neuron)

Author: Marc-Oliver Gewaltig

Sends: SpikeEvent

Receives: SpikeEvent, CurrentEvent, DataLoggingRequest

References: Brette R and Gerstner W (2005) Adaptive Exponential
            Integrate-and-Fire Model as an Effective Description of Neuronal
            Activity. J Neurophysiol 94:3637-3642

SeeAlso: iaf_cond_alpha, aeif_cond_exp
*/
neuron aeif_cond_alpha_implicit_implicit:

  state:
    V_m mV = E_L      # Membrane potential
    w pA = 0pA          # Spike-adaptation current
    g_in nS[receptors] = 0nS     # Excitatory synaptic conductance
    g_ex nS[receptors] = 0nS     # Inhibitory synaptic conductance in nS
  end

  equations:
    # alpha function
    g_in'' = -g_in'/tau_syn
    g_in' = g_in' - g_in/tau_syn

    # alpha function
    g_ex'' = -g_ex'/tau_syn
    g_ex' = g_ex'  -g_ex/tau_syn

    # Add aliases to simplify the equation definition of V_m
    function exp_arg real = (V_m-V_th)/delta_T
    function I_spike pA = delta_T*exp(exp_arg)
    function I_syn_exc pA =   convolve(g_ex, spikesEx) * ( V_m - E_ex )
    function I_syn_inh pA =   convovle(g_in, spikesIn) * ( V_m - E_in )

    V_m' = ( -g_L * ( ( V_m - E_L ) - I_spike ) - I_syn_exc - I_syn_inh - w + I_e + I_stim ) / C_m
    w' = (a*(V_m - E_L) - w)/tau_w

  end

  parameters:
    receptors integer = 100  # number of synapse receptors

    # membrane parameters
    C_m   pF = 281.0pF       # Membrane Capacitance in pF
    t_ref ms = 0.0ms         # Refractory period in ms
    V_reset mV = -60.0mV     # Reset Potential in mV
    g_L nS = 30.0nS          # Leak Conductance in nS
    E_L mV = -70.6mV         # Leak reversal Potential (aka resting potential) in mV
    I_e pA = 0pA             # Constant Current in pA

    # spike adaptation parameters
    a nS = 4nS               # Subthreshold adaptation
    b pA = 80.5pA            # pike-triggered adaptation
    delta_T mV = 2.0mV       # Slope factor
    tau_w ms = 144.0ms       # Adaptation time constant
    V_th mV = -50.4mV        # Threshold Potential in mV
    V_peak mV = 0mV          # Spike detection threshold

    # synaptic parameters
    E_ex mV = 0mV            # Excitatory reversal Potential in mV
    E_in mV = -85.0mV        # Inhibitory reversal Potential in mV
    tau_syn ms[receptors] = 2.0ms    # Synaptic Time Constant for Inhibitory Synapse in ms


    I_stim pA = 0pA
  end

  internals:


    # Impulse to add to DG_EXC on spike arrival to evoke unit-amplitude
    # conductance excursion.
    PSConInit_E real[receptors] = 1.0 * e / tau_syn

    # Impulse to add to DG_INH on spike arrival to evoke unit-amplitude
    # conductance excursion.
    PSConInit_I real[receptors] = 1.0 * e / tau_syn

    # refractory time in steps
    RefractoryCounts integer = steps(t_ref)
    # counts number of tick during the refractory period
    r integer
  end

  input:
      spikesIn[receptors] nS <- inhibitory spike
      spikesEx[receptors] nS <- excitatory spike
      currents <- current
  end

  output: spike

  update:
    integrate_odes()

    if r > 0: # refractory
      r = r - 1
    end

    if r > 0: # not refractory
      V_m = V_reset # clamp potential
    elif V_m >= V_peak:
      r = RefractoryCounts
      V_m = V_reset # clamp potential
      w += b
      emit_spike()
    end

    g_ex' += spikesEx * PSConInit_E
    g_in' += spikesIn * PSConInit_I

  end

end
