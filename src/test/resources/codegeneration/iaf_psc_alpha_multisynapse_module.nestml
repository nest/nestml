package codegeneration.iaf_psc_alpha_multisynapse_module:
  neuron iaf_psc_alpha_multisynapse_neuron:

    state:
      y0 = 0.0 # !< Constant current
      y1_syn real<num_of_receptors> = 0.0
      y2_syn real<num_of_receptors> = 0.0
      y3_ real = 0 # This is the membrane potential RELATIVE TO RESTING POTENTIAL.
      currentValue real = 0 # This is the current in a time step. This is only here to allow logging

      - r integer = # Number of refractory steps remaining
    end

    parameter:
      - num_of_receptors integer = 1
      Tau ms = 10.0   # Membrane time constant
      C pF = 250.0    # Membrane capacitance
      TauR ms = 2.0  # Refractory period
      U0 mV = -70     # Resting potential
      I_e pA = 0      # External current in

      alias V_reset mV = -70 - U0 # Reset value of the membrane potential
      alias Theta mV = -55.0 - U0 # Threshold, RELATIVE TO RESTING POTENTIAL(!).
                                  # I.e. the real threshold is (U0_+Theta_).
      # Lower bound, RELATIVE TO RESTING POTENTIAL(!).
      # I.e. the real lower bound is (LowerBound_+Theta_).
      LowerBound mV = -inf;
      tau_syn ms<num_of_receptors>    # Time constants of synaptic currents
      has_connections boolean = false # boolean flag which indicates whether the neuron has connections
    end

    function set_V_reset(v mV):
        V_reset = v - U0
    end

    function set_Theta(v mV):
        Theta = v - U0
    end

    std::vector<double_t> PSCInitialValues_;
    int_t       RefractoryCounts_;

    std::vector<double_t> P11_syn_;
    std::vector<double_t> P21_syn_;
    std::vector<double_t> P22_syn_;
    std::vector<double_t> P31_syn_;
    std::vector<double_t> P32_syn_;

    double_t P30_;
    double_t P33_;

    internal:
      h   ms   = resolution()
      P11_syn real<num_of_receptors> = -h / tau_syn
      P21_syn real<num_of_receptors> = Tau/(C*(1.0-Tau/tau_syn)) * P11_syn * (1.0 - exp(h*(1.0/tau_syn-1.0/Tau)));
      P20 real = exp(-h/Tau)
      P22 real = Tau/C*(1.0 - P22);

      P30_;
      P33_;

      RefractoryCounts integer =
      PSCInitialValues_ real<num_of_receptors> = steps(t_ref)
    end

    input:
        spikeBufferInh<num_of_receptors> <- inhibitory spike
        currentBuffer <- current
    end

    output: spike

    dynamics timestep(t ms):
      if r_ref == 0: # neuron not refractory, so evolve V
        V_m = V_m * P22 + (I_e + i_0) * P20 # not sure about this
        currentValue = 0.0
        V_m = V_m + P21_syn*i_syn
        currentValue = currentValue + i_syn # not sure about this
      else:
        r_ref = r_ref - 1 # neuron is absolute refractory
      end

      i_syn = i_syn * P11_syn;
      # collect spikes
      i_syn = i_syn + spikeBufferInh.getSum() # not sure about this

      if V_m >= Theta:  # threshold crossing
        r_ref = RefractoryCounts
        V_m = V_reset

        emitSpike()
      end

      # set new input current
      i_0 = currentBuffer.getSum()

    end

  end

end

