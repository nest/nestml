# Generated from PyNestMLLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


if "." in __name__:
    from .PyNestMLLexerBase import PyNestMLLexerBase
else:
    from PyNestMLLexerBase import PyNestMLLexerBase

def serializedATN():
    return [
        4,0,87,658,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
        78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,
        84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,1,0,3,0,181,8,0,1,0,1,
        0,1,1,1,1,1,1,3,1,188,8,1,1,2,4,2,191,8,2,11,2,12,2,192,1,2,1,2,
        1,3,1,3,1,3,1,3,1,3,1,4,1,4,5,4,204,8,4,10,4,12,4,207,9,4,1,4,1,
        4,1,5,1,5,1,5,3,5,214,8,5,1,5,1,5,1,5,3,5,219,8,5,3,5,221,8,5,1,
        5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
        1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,
        1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,
        1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,
        1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,
        1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,
        1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,
        1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,
        1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
        1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,
        1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,
        1,41,1,42,1,42,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,
        1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,51,1,52,1,52,
        1,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,56,1,57,
        1,57,1,58,1,58,1,59,1,59,1,59,1,60,1,60,1,60,1,61,1,61,1,61,1,62,
        1,62,1,62,1,63,1,63,1,63,1,64,1,64,1,64,1,65,1,65,1,65,1,66,1,66,
        1,66,1,67,1,67,1,67,1,68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,1,72,
        1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,76,1,76,1,77,1,77,1,77,
        1,78,1,78,1,79,1,79,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,591,
        8,81,1,82,1,82,1,82,4,82,596,8,82,11,82,12,82,597,1,82,3,82,601,
        8,82,1,82,3,82,604,8,82,1,82,3,82,607,8,82,1,82,5,82,610,8,82,10,
        82,12,82,613,9,82,1,82,1,82,1,83,3,83,618,8,83,1,83,5,83,621,8,83,
        10,83,12,83,624,9,83,1,84,4,84,627,8,84,11,84,12,84,628,1,85,1,85,
        3,85,633,8,85,1,86,3,86,636,8,86,1,86,1,86,1,86,1,86,1,86,1,86,3,
        86,644,8,86,1,87,1,87,3,87,648,8,87,1,87,1,87,1,87,1,88,1,88,3,88,
        655,8,88,1,88,1,88,0,0,89,1,0,3,3,5,4,7,5,9,6,11,7,13,8,15,9,17,
        10,19,11,21,12,23,13,25,14,27,15,29,16,31,17,33,18,35,19,37,20,39,
        21,41,22,43,23,45,24,47,25,49,26,51,27,53,28,55,29,57,30,59,31,61,
        32,63,33,65,34,67,35,69,36,71,37,73,38,75,39,77,40,79,41,81,42,83,
        43,85,44,87,45,89,46,91,47,93,48,95,49,97,50,99,51,101,52,103,53,
        105,54,107,55,109,56,111,57,113,58,115,59,117,60,119,61,121,62,123,
        63,125,64,127,65,129,66,131,67,133,68,135,69,137,70,139,71,141,72,
        143,73,145,74,147,75,149,76,151,77,153,78,155,79,157,80,159,81,161,
        82,163,83,165,84,167,85,169,86,171,87,173,0,175,0,177,0,1,0,7,2,
        0,9,9,32,32,2,0,10,10,13,13,4,0,10,10,13,13,34,34,92,92,4,0,36,36,
        65,90,95,95,97,122,5,0,36,36,48,57,65,90,95,95,97,122,1,0,48,57,
        2,0,69,69,101,101,677,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
        0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
        0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
        0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
        0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,
        0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,
        0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,
        0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,
        0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,
        109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,
        0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,
        1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,
        0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,
        0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,
        155,1,0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,
        0,0,0,165,1,0,0,0,0,167,1,0,0,0,0,169,1,0,0,0,0,171,1,0,0,0,1,180,
        1,0,0,0,3,184,1,0,0,0,5,190,1,0,0,0,7,196,1,0,0,0,9,201,1,0,0,0,
        11,220,1,0,0,0,13,224,1,0,0,0,15,232,1,0,0,0,17,237,1,0,0,0,19,244,
        1,0,0,0,21,252,1,0,0,0,23,257,1,0,0,0,25,266,1,0,0,0,27,273,1,0,
        0,0,29,280,1,0,0,0,31,283,1,0,0,0,33,288,1,0,0,0,35,293,1,0,0,0,
        37,297,1,0,0,0,39,303,1,0,0,0,41,306,1,0,0,0,43,311,1,0,0,0,45,315,
        1,0,0,0,47,319,1,0,0,0,49,322,1,0,0,0,51,326,1,0,0,0,53,337,1,0,
        0,0,55,344,1,0,0,0,57,350,1,0,0,0,59,356,1,0,0,0,61,367,1,0,0,0,
        63,377,1,0,0,0,65,384,1,0,0,0,67,394,1,0,0,0,69,400,1,0,0,0,71,407,
        1,0,0,0,73,418,1,0,0,0,75,428,1,0,0,0,77,440,1,0,0,0,79,446,1,0,
        0,0,81,459,1,0,0,0,83,474,1,0,0,0,85,476,1,0,0,0,87,480,1,0,0,0,
        89,482,1,0,0,0,91,484,1,0,0,0,93,486,1,0,0,0,95,488,1,0,0,0,97,490,
        1,0,0,0,99,492,1,0,0,0,101,494,1,0,0,0,103,496,1,0,0,0,105,499,1,
        0,0,0,107,501,1,0,0,0,109,504,1,0,0,0,111,507,1,0,0,0,113,510,1,
        0,0,0,115,513,1,0,0,0,117,515,1,0,0,0,119,517,1,0,0,0,121,520,1,
        0,0,0,123,523,1,0,0,0,125,526,1,0,0,0,127,529,1,0,0,0,129,532,1,
        0,0,0,131,535,1,0,0,0,133,538,1,0,0,0,135,541,1,0,0,0,137,544,1,
        0,0,0,139,546,1,0,0,0,141,548,1,0,0,0,143,550,1,0,0,0,145,552,1,
        0,0,0,147,555,1,0,0,0,149,557,1,0,0,0,151,559,1,0,0,0,153,561,1,
        0,0,0,155,563,1,0,0,0,157,566,1,0,0,0,159,568,1,0,0,0,161,570,1,
        0,0,0,163,590,1,0,0,0,165,592,1,0,0,0,167,617,1,0,0,0,169,626,1,
        0,0,0,171,632,1,0,0,0,173,643,1,0,0,0,175,647,1,0,0,0,177,654,1,
        0,0,0,179,181,5,13,0,0,180,179,1,0,0,0,180,181,1,0,0,0,181,182,1,
        0,0,0,182,183,5,10,0,0,183,2,1,0,0,0,184,185,3,137,68,0,185,187,
        3,1,0,0,186,188,3,5,2,0,187,186,1,0,0,0,187,188,1,0,0,0,188,4,1,
        0,0,0,189,191,7,0,0,0,190,189,1,0,0,0,191,192,1,0,0,0,192,190,1,
        0,0,0,192,193,1,0,0,0,193,194,1,0,0,0,194,195,6,2,0,0,195,6,1,0,
        0,0,196,197,5,92,0,0,197,198,3,1,0,0,198,199,1,0,0,0,199,200,6,3,
        0,0,200,8,1,0,0,0,201,205,5,35,0,0,202,204,8,1,0,0,203,202,1,0,0,
        0,204,207,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,208,1,0,0,
        0,207,205,1,0,0,0,208,209,6,4,1,0,209,10,1,0,0,0,210,211,4,5,0,0,
        211,221,3,5,2,0,212,214,5,13,0,0,213,212,1,0,0,0,213,214,1,0,0,0,
        214,215,1,0,0,0,215,216,5,10,0,0,216,218,1,0,0,0,217,219,3,5,2,0,
        218,217,1,0,0,0,218,219,1,0,0,0,219,221,1,0,0,0,220,210,1,0,0,0,
        220,213,1,0,0,0,221,222,1,0,0,0,222,223,6,5,2,0,223,12,1,0,0,0,224,
        225,5,105,0,0,225,226,5,110,0,0,226,227,5,116,0,0,227,228,5,101,
        0,0,228,229,5,103,0,0,229,230,5,101,0,0,230,231,5,114,0,0,231,14,
        1,0,0,0,232,233,5,114,0,0,233,234,5,101,0,0,234,235,5,97,0,0,235,
        236,5,108,0,0,236,16,1,0,0,0,237,238,5,115,0,0,238,239,5,116,0,0,
        239,240,5,114,0,0,240,241,5,105,0,0,241,242,5,110,0,0,242,243,5,
        103,0,0,243,18,1,0,0,0,244,245,5,98,0,0,245,246,5,111,0,0,246,247,
        5,111,0,0,247,248,5,108,0,0,248,249,5,101,0,0,249,250,5,97,0,0,250,
        251,5,110,0,0,251,20,1,0,0,0,252,253,5,118,0,0,253,254,5,111,0,0,
        254,255,5,105,0,0,255,256,5,100,0,0,256,22,1,0,0,0,257,258,5,102,
        0,0,258,259,5,117,0,0,259,260,5,110,0,0,260,261,5,99,0,0,261,262,
        5,116,0,0,262,263,5,105,0,0,263,264,5,111,0,0,264,265,5,110,0,0,
        265,24,1,0,0,0,266,267,5,105,0,0,267,268,5,110,0,0,268,269,5,108,
        0,0,269,270,5,105,0,0,270,271,5,110,0,0,271,272,5,101,0,0,272,26,
        1,0,0,0,273,274,5,114,0,0,274,275,5,101,0,0,275,276,5,116,0,0,276,
        277,5,117,0,0,277,278,5,114,0,0,278,279,5,110,0,0,279,28,1,0,0,0,
        280,281,5,105,0,0,281,282,5,102,0,0,282,30,1,0,0,0,283,284,5,101,
        0,0,284,285,5,108,0,0,285,286,5,105,0,0,286,287,5,102,0,0,287,32,
        1,0,0,0,288,289,5,101,0,0,289,290,5,108,0,0,290,291,5,115,0,0,291,
        292,5,101,0,0,292,34,1,0,0,0,293,294,5,102,0,0,294,295,5,111,0,0,
        295,296,5,114,0,0,296,36,1,0,0,0,297,298,5,119,0,0,298,299,5,104,
        0,0,299,300,5,105,0,0,300,301,5,108,0,0,301,302,5,101,0,0,302,38,
        1,0,0,0,303,304,5,105,0,0,304,305,5,110,0,0,305,40,1,0,0,0,306,307,
        5,115,0,0,307,308,5,116,0,0,308,309,5,101,0,0,309,310,5,112,0,0,
        310,42,1,0,0,0,311,312,5,105,0,0,312,313,5,110,0,0,313,314,5,102,
        0,0,314,44,1,0,0,0,315,316,5,97,0,0,316,317,5,110,0,0,317,318,5,
        100,0,0,318,46,1,0,0,0,319,320,5,111,0,0,320,321,5,114,0,0,321,48,
        1,0,0,0,322,323,5,110,0,0,323,324,5,111,0,0,324,325,5,116,0,0,325,
        50,1,0,0,0,326,327,5,114,0,0,327,328,5,101,0,0,328,329,5,99,0,0,
        329,330,5,111,0,0,330,331,5,114,0,0,331,332,5,100,0,0,332,333,5,
        97,0,0,333,334,5,98,0,0,334,335,5,108,0,0,335,336,5,101,0,0,336,
        52,1,0,0,0,337,338,5,107,0,0,338,339,5,101,0,0,339,340,5,114,0,0,
        340,341,5,110,0,0,341,342,5,101,0,0,342,343,5,108,0,0,343,54,1,0,
        0,0,344,345,5,109,0,0,345,346,5,111,0,0,346,347,5,100,0,0,347,348,
        5,101,0,0,348,349,5,108,0,0,349,56,1,0,0,0,350,351,5,115,0,0,351,
        352,5,116,0,0,352,353,5,97,0,0,353,354,5,116,0,0,354,355,5,101,0,
        0,355,58,1,0,0,0,356,357,5,112,0,0,357,358,5,97,0,0,358,359,5,114,
        0,0,359,360,5,97,0,0,360,361,5,109,0,0,361,362,5,101,0,0,362,363,
        5,116,0,0,363,364,5,101,0,0,364,365,5,114,0,0,365,366,5,115,0,0,
        366,60,1,0,0,0,367,368,5,105,0,0,368,369,5,110,0,0,369,370,5,116,
        0,0,370,371,5,101,0,0,371,372,5,114,0,0,372,373,5,110,0,0,373,374,
        5,97,0,0,374,375,5,108,0,0,375,376,5,115,0,0,376,62,1,0,0,0,377,
        378,5,117,0,0,378,379,5,112,0,0,379,380,5,100,0,0,380,381,5,97,0,
        0,381,382,5,116,0,0,382,383,5,101,0,0,383,64,1,0,0,0,384,385,5,101,
        0,0,385,386,5,113,0,0,386,387,5,117,0,0,387,388,5,97,0,0,388,389,
        5,116,0,0,389,390,5,105,0,0,390,391,5,111,0,0,391,392,5,110,0,0,
        392,393,5,115,0,0,393,66,1,0,0,0,394,395,5,105,0,0,395,396,5,110,
        0,0,396,397,5,112,0,0,397,398,5,117,0,0,398,399,5,116,0,0,399,68,
        1,0,0,0,400,401,5,111,0,0,401,402,5,117,0,0,402,403,5,116,0,0,403,
        404,5,112,0,0,404,405,5,117,0,0,405,406,5,116,0,0,406,70,1,0,0,0,
        407,408,5,99,0,0,408,409,5,111,0,0,409,410,5,110,0,0,410,411,5,116,
        0,0,411,412,5,105,0,0,412,413,5,110,0,0,413,414,5,117,0,0,414,415,
        5,111,0,0,415,416,5,117,0,0,416,417,5,115,0,0,417,72,1,0,0,0,418,
        419,5,111,0,0,419,420,5,110,0,0,420,421,5,82,0,0,421,422,5,101,0,
        0,422,423,5,99,0,0,423,424,5,101,0,0,424,425,5,105,0,0,425,426,5,
        118,0,0,426,427,5,101,0,0,427,74,1,0,0,0,428,429,5,111,0,0,429,430,
        5,110,0,0,430,431,5,67,0,0,431,432,5,111,0,0,432,433,5,110,0,0,433,
        434,5,100,0,0,434,435,5,105,0,0,435,436,5,116,0,0,436,437,5,105,
        0,0,437,438,5,111,0,0,438,439,5,110,0,0,439,76,1,0,0,0,440,441,5,
        115,0,0,441,442,5,112,0,0,442,443,5,105,0,0,443,444,5,107,0,0,444,
        445,5,101,0,0,445,78,1,0,0,0,446,447,5,64,0,0,447,448,5,104,0,0,
        448,449,5,111,0,0,449,450,5,109,0,0,450,451,5,111,0,0,451,452,5,
        103,0,0,452,453,5,101,0,0,453,454,5,110,0,0,454,455,5,101,0,0,455,
        456,5,111,0,0,456,457,5,117,0,0,457,458,5,115,0,0,458,80,1,0,0,0,
        459,460,5,64,0,0,460,461,5,104,0,0,461,462,5,101,0,0,462,463,5,116,
        0,0,463,464,5,101,0,0,464,465,5,114,0,0,465,466,5,111,0,0,466,467,
        5,103,0,0,467,468,5,101,0,0,468,469,5,110,0,0,469,470,5,101,0,0,
        470,471,5,111,0,0,471,472,5,117,0,0,472,473,5,115,0,0,473,82,1,0,
        0,0,474,475,5,64,0,0,475,84,1,0,0,0,476,477,5,46,0,0,477,478,5,46,
        0,0,478,479,5,46,0,0,479,86,1,0,0,0,480,481,5,40,0,0,481,88,1,0,
        0,0,482,483,5,41,0,0,483,90,1,0,0,0,484,485,5,43,0,0,485,92,1,0,
        0,0,486,487,5,126,0,0,487,94,1,0,0,0,488,489,5,124,0,0,489,96,1,
        0,0,0,490,491,5,94,0,0,491,98,1,0,0,0,492,493,5,38,0,0,493,100,1,
        0,0,0,494,495,5,91,0,0,495,102,1,0,0,0,496,497,5,60,0,0,497,498,
        5,45,0,0,498,104,1,0,0,0,499,500,5,93,0,0,500,106,1,0,0,0,501,502,
        5,91,0,0,502,503,5,91,0,0,503,108,1,0,0,0,504,505,5,93,0,0,505,506,
        5,93,0,0,506,110,1,0,0,0,507,508,5,60,0,0,508,509,5,60,0,0,509,112,
        1,0,0,0,510,511,5,62,0,0,511,512,5,62,0,0,512,114,1,0,0,0,513,514,
        5,60,0,0,514,116,1,0,0,0,515,516,5,62,0,0,516,118,1,0,0,0,517,518,
        5,60,0,0,518,519,5,61,0,0,519,120,1,0,0,0,520,521,5,43,0,0,521,522,
        5,61,0,0,522,122,1,0,0,0,523,524,5,45,0,0,524,525,5,61,0,0,525,124,
        1,0,0,0,526,527,5,42,0,0,527,528,5,61,0,0,528,126,1,0,0,0,529,530,
        5,47,0,0,530,531,5,61,0,0,531,128,1,0,0,0,532,533,5,61,0,0,533,534,
        5,61,0,0,534,130,1,0,0,0,535,536,5,33,0,0,536,537,5,61,0,0,537,132,
        1,0,0,0,538,539,5,60,0,0,539,540,5,62,0,0,540,134,1,0,0,0,541,542,
        5,62,0,0,542,543,5,61,0,0,543,136,1,0,0,0,544,545,5,44,0,0,545,138,
        1,0,0,0,546,547,5,45,0,0,547,140,1,0,0,0,548,549,5,61,0,0,549,142,
        1,0,0,0,550,551,5,42,0,0,551,144,1,0,0,0,552,553,5,42,0,0,553,554,
        5,42,0,0,554,146,1,0,0,0,555,556,5,47,0,0,556,148,1,0,0,0,557,558,
        5,37,0,0,558,150,1,0,0,0,559,560,5,63,0,0,560,152,1,0,0,0,561,562,
        5,58,0,0,562,154,1,0,0,0,563,564,5,58,0,0,564,565,5,58,0,0,565,156,
        1,0,0,0,566,567,5,59,0,0,567,158,1,0,0,0,568,569,5,39,0,0,569,160,
        1,0,0,0,570,571,5,46,0,0,571,162,1,0,0,0,572,573,5,116,0,0,573,574,
        5,114,0,0,574,575,5,117,0,0,575,591,5,101,0,0,576,577,5,84,0,0,577,
        578,5,114,0,0,578,579,5,117,0,0,579,591,5,101,0,0,580,581,5,102,
        0,0,581,582,5,97,0,0,582,583,5,108,0,0,583,584,5,115,0,0,584,591,
        5,101,0,0,585,586,5,70,0,0,586,587,5,97,0,0,587,588,5,108,0,0,588,
        589,5,115,0,0,589,591,5,101,0,0,590,572,1,0,0,0,590,576,1,0,0,0,
        590,580,1,0,0,0,590,585,1,0,0,0,591,164,1,0,0,0,592,611,5,34,0,0,
        593,606,5,92,0,0,594,596,7,0,0,0,595,594,1,0,0,0,596,597,1,0,0,0,
        597,595,1,0,0,0,597,598,1,0,0,0,598,603,1,0,0,0,599,601,5,13,0,0,
        600,599,1,0,0,0,600,601,1,0,0,0,601,602,1,0,0,0,602,604,5,10,0,0,
        603,600,1,0,0,0,603,604,1,0,0,0,604,607,1,0,0,0,605,607,9,0,0,0,
        606,595,1,0,0,0,606,605,1,0,0,0,607,610,1,0,0,0,608,610,8,2,0,0,
        609,593,1,0,0,0,609,608,1,0,0,0,610,613,1,0,0,0,611,609,1,0,0,0,
        611,612,1,0,0,0,612,614,1,0,0,0,613,611,1,0,0,0,614,615,5,34,0,0,
        615,166,1,0,0,0,616,618,7,3,0,0,617,616,1,0,0,0,618,622,1,0,0,0,
        619,621,7,4,0,0,620,619,1,0,0,0,621,624,1,0,0,0,622,620,1,0,0,0,
        622,623,1,0,0,0,623,168,1,0,0,0,624,622,1,0,0,0,625,627,7,5,0,0,
        626,625,1,0,0,0,627,628,1,0,0,0,628,626,1,0,0,0,628,629,1,0,0,0,
        629,170,1,0,0,0,630,633,3,173,86,0,631,633,3,175,87,0,632,630,1,
        0,0,0,632,631,1,0,0,0,633,172,1,0,0,0,634,636,3,169,84,0,635,634,
        1,0,0,0,635,636,1,0,0,0,636,637,1,0,0,0,637,638,3,161,80,0,638,639,
        3,169,84,0,639,644,1,0,0,0,640,641,3,169,84,0,641,642,3,161,80,0,
        642,644,1,0,0,0,643,635,1,0,0,0,643,640,1,0,0,0,644,174,1,0,0,0,
        645,648,3,169,84,0,646,648,3,173,86,0,647,645,1,0,0,0,647,646,1,
        0,0,0,648,649,1,0,0,0,649,650,7,6,0,0,650,651,3,177,88,0,651,176,
        1,0,0,0,652,655,3,91,45,0,653,655,3,139,69,0,654,652,1,0,0,0,654,
        653,1,0,0,0,654,655,1,0,0,0,655,656,1,0,0,0,656,657,3,169,84,0,657,
        178,1,0,0,0,24,0,180,187,192,205,213,218,220,590,597,600,603,606,
        609,611,617,620,622,628,632,635,643,647,654,3,0,1,0,0,2,0,1,5,0
    ]

class PyNestMLLexer(PyNestMLLexerBase):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    COMMENT = 2

    INDENT = 1
    DEDENT = 2
    KERNEL_JOINING = 3
    WS = 4
    LINE_ESCAPE = 5
    SL_COMMENT = 6
    NEWLINE = 7
    INTEGER_KEYWORD = 8
    REAL_KEYWORD = 9
    STRING_KEYWORD = 10
    BOOLEAN_KEYWORD = 11
    VOID_KEYWORD = 12
    FUNCTION_KEYWORD = 13
    INLINE_KEYWORD = 14
    RETURN_KEYWORD = 15
    IF_KEYWORD = 16
    ELIF_KEYWORD = 17
    ELSE_KEYWORD = 18
    FOR_KEYWORD = 19
    WHILE_KEYWORD = 20
    IN_KEYWORD = 21
    STEP_KEYWORD = 22
    INF_KEYWORD = 23
    AND_KEYWORD = 24
    OR_KEYWORD = 25
    NOT_KEYWORD = 26
    RECORDABLE_KEYWORD = 27
    KERNEL_KEYWORD = 28
    MODEL_KEYWORD = 29
    STATE_KEYWORD = 30
    PARAMETERS_KEYWORD = 31
    INTERNALS_KEYWORD = 32
    UPDATE_KEYWORD = 33
    EQUATIONS_KEYWORD = 34
    INPUT_KEYWORD = 35
    OUTPUT_KEYWORD = 36
    CONTINUOUS_KEYWORD = 37
    ON_RECEIVE_KEYWORD = 38
    ON_CONDITION_KEYWORD = 39
    SPIKE_KEYWORD = 40
    DECORATOR_HOMOGENEOUS = 41
    DECORATOR_HETEROGENEOUS = 42
    AT = 43
    ELLIPSIS = 44
    LEFT_PAREN = 45
    RIGHT_PAREN = 46
    PLUS = 47
    TILDE = 48
    PIPE = 49
    CARET = 50
    AMPERSAND = 51
    LEFT_SQUARE_BRACKET = 52
    LEFT_ANGLE_MINUS = 53
    RIGHT_SQUARE_BRACKET = 54
    LEFT_LEFT_SQUARE = 55
    RIGHT_RIGHT_SQUARE = 56
    LEFT_LEFT_ANGLE = 57
    RIGHT_RIGHT_ANGLE = 58
    LEFT_ANGLE = 59
    RIGHT_ANGLE = 60
    LEFT_ANGLE_EQUALS = 61
    PLUS_EQUALS = 62
    MINUS_EQUALS = 63
    STAR_EQUALS = 64
    FORWARD_SLASH_EQUALS = 65
    EQUALS_EQUALS = 66
    EXCLAMATION_EQUALS = 67
    LEFT_ANGLE_RIGHT_ANGLE = 68
    RIGHT_ANGLE_EQUALS = 69
    COMMA = 70
    MINUS = 71
    EQUALS = 72
    STAR = 73
    STAR_STAR = 74
    FORWARD_SLASH = 75
    PERCENT = 76
    QUESTION = 77
    COLON = 78
    DOUBLE_COLON = 79
    SEMICOLON = 80
    DIFFERENTIAL_ORDER = 81
    FULLSTOP = 82
    BOOLEAN_LITERAL = 83
    STRING_LITERAL = 84
    NAME = 85
    UNSIGNED_INTEGER = 86
    FLOAT = 87

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN", u"COMMENT" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'integer'", "'real'", "'string'", "'boolean'", "'void'", "'function'", 
            "'inline'", "'return'", "'if'", "'elif'", "'else'", "'for'", 
            "'while'", "'in'", "'step'", "'inf'", "'and'", "'or'", "'not'", 
            "'recordable'", "'kernel'", "'model'", "'state'", "'parameters'", 
            "'internals'", "'update'", "'equations'", "'input'", "'output'", 
            "'continuous'", "'onReceive'", "'onCondition'", "'spike'", "'@homogeneous'", 
            "'@heterogeneous'", "'@'", "'...'", "'('", "')'", "'+'", "'~'", 
            "'|'", "'^'", "'&'", "'['", "'<-'", "']'", "'[['", "']]'", "'<<'", 
            "'>>'", "'<'", "'>'", "'<='", "'+='", "'-='", "'*='", "'/='", 
            "'=='", "'!='", "'<>'", "'>='", "','", "'-'", "'='", "'*'", 
            "'**'", "'/'", "'%'", "'?'", "':'", "'::'", "';'", "'''", "'.'" ]

    symbolicNames = [ "<INVALID>",
            "INDENT", "DEDENT", "KERNEL_JOINING", "WS", "LINE_ESCAPE", "SL_COMMENT", 
            "NEWLINE", "INTEGER_KEYWORD", "REAL_KEYWORD", "STRING_KEYWORD", 
            "BOOLEAN_KEYWORD", "VOID_KEYWORD", "FUNCTION_KEYWORD", "INLINE_KEYWORD", 
            "RETURN_KEYWORD", "IF_KEYWORD", "ELIF_KEYWORD", "ELSE_KEYWORD", 
            "FOR_KEYWORD", "WHILE_KEYWORD", "IN_KEYWORD", "STEP_KEYWORD", 
            "INF_KEYWORD", "AND_KEYWORD", "OR_KEYWORD", "NOT_KEYWORD", "RECORDABLE_KEYWORD", 
            "KERNEL_KEYWORD", "MODEL_KEYWORD", "STATE_KEYWORD", "PARAMETERS_KEYWORD", 
            "INTERNALS_KEYWORD", "UPDATE_KEYWORD", "EQUATIONS_KEYWORD", 
            "INPUT_KEYWORD", "OUTPUT_KEYWORD", "CONTINUOUS_KEYWORD", "ON_RECEIVE_KEYWORD", 
            "ON_CONDITION_KEYWORD", "SPIKE_KEYWORD", "DECORATOR_HOMOGENEOUS", 
            "DECORATOR_HETEROGENEOUS", "AT", "ELLIPSIS", "LEFT_PAREN", "RIGHT_PAREN", 
            "PLUS", "TILDE", "PIPE", "CARET", "AMPERSAND", "LEFT_SQUARE_BRACKET", 
            "LEFT_ANGLE_MINUS", "RIGHT_SQUARE_BRACKET", "LEFT_LEFT_SQUARE", 
            "RIGHT_RIGHT_SQUARE", "LEFT_LEFT_ANGLE", "RIGHT_RIGHT_ANGLE", 
            "LEFT_ANGLE", "RIGHT_ANGLE", "LEFT_ANGLE_EQUALS", "PLUS_EQUALS", 
            "MINUS_EQUALS", "STAR_EQUALS", "FORWARD_SLASH_EQUALS", "EQUALS_EQUALS", 
            "EXCLAMATION_EQUALS", "LEFT_ANGLE_RIGHT_ANGLE", "RIGHT_ANGLE_EQUALS", 
            "COMMA", "MINUS", "EQUALS", "STAR", "STAR_STAR", "FORWARD_SLASH", 
            "PERCENT", "QUESTION", "COLON", "DOUBLE_COLON", "SEMICOLON", 
            "DIFFERENTIAL_ORDER", "FULLSTOP", "BOOLEAN_LITERAL", "STRING_LITERAL", 
            "NAME", "UNSIGNED_INTEGER", "FLOAT" ]

    ruleNames = [ "NEWLINE_FRAG", "KERNEL_JOINING", "WS", "LINE_ESCAPE", 
                  "SL_COMMENT", "NEWLINE", "INTEGER_KEYWORD", "REAL_KEYWORD", 
                  "STRING_KEYWORD", "BOOLEAN_KEYWORD", "VOID_KEYWORD", "FUNCTION_KEYWORD", 
                  "INLINE_KEYWORD", "RETURN_KEYWORD", "IF_KEYWORD", "ELIF_KEYWORD", 
                  "ELSE_KEYWORD", "FOR_KEYWORD", "WHILE_KEYWORD", "IN_KEYWORD", 
                  "STEP_KEYWORD", "INF_KEYWORD", "AND_KEYWORD", "OR_KEYWORD", 
                  "NOT_KEYWORD", "RECORDABLE_KEYWORD", "KERNEL_KEYWORD", 
                  "MODEL_KEYWORD", "STATE_KEYWORD", "PARAMETERS_KEYWORD", 
                  "INTERNALS_KEYWORD", "UPDATE_KEYWORD", "EQUATIONS_KEYWORD", 
                  "INPUT_KEYWORD", "OUTPUT_KEYWORD", "CONTINUOUS_KEYWORD", 
                  "ON_RECEIVE_KEYWORD", "ON_CONDITION_KEYWORD", "SPIKE_KEYWORD", 
                  "DECORATOR_HOMOGENEOUS", "DECORATOR_HETEROGENEOUS", "AT", 
                  "ELLIPSIS", "LEFT_PAREN", "RIGHT_PAREN", "PLUS", "TILDE", 
                  "PIPE", "CARET", "AMPERSAND", "LEFT_SQUARE_BRACKET", "LEFT_ANGLE_MINUS", 
                  "RIGHT_SQUARE_BRACKET", "LEFT_LEFT_SQUARE", "RIGHT_RIGHT_SQUARE", 
                  "LEFT_LEFT_ANGLE", "RIGHT_RIGHT_ANGLE", "LEFT_ANGLE", 
                  "RIGHT_ANGLE", "LEFT_ANGLE_EQUALS", "PLUS_EQUALS", "MINUS_EQUALS", 
                  "STAR_EQUALS", "FORWARD_SLASH_EQUALS", "EQUALS_EQUALS", 
                  "EXCLAMATION_EQUALS", "LEFT_ANGLE_RIGHT_ANGLE", "RIGHT_ANGLE_EQUALS", 
                  "COMMA", "MINUS", "EQUALS", "STAR", "STAR_STAR", "FORWARD_SLASH", 
                  "PERCENT", "QUESTION", "COLON", "DOUBLE_COLON", "SEMICOLON", 
                  "DIFFERENTIAL_ORDER", "FULLSTOP", "BOOLEAN_LITERAL", "STRING_LITERAL", 
                  "NAME", "UNSIGNED_INTEGER", "FLOAT", "POINT_FLOAT", "EXPONENT_FLOAT", 
                  "EXPONENT" ]

    grammarFileName = "PyNestMLLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[5] = self.NEWLINE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def NEWLINE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
             self.onNewLine() 
     

    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates is None:
            preds = dict()
            preds[5] = self.NEWLINE_sempred
            self._predicates = preds
        pred = self._predicates.get(ruleIndex, None)
        if pred is not None:
            return pred(localctx, predIndex)
        else:
            raise Exception("No registered predicate for:" + str(ruleIndex))

    def NEWLINE_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 0:
                return  self.atStartOfInput() 
         


