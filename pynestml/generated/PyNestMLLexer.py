# Generated from PyNestMLLexer.g4 by ANTLR 4.10
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,88,688,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
        78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,
        84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,
        91,7,91,1,0,1,0,1,0,1,0,1,1,3,1,191,8,1,1,1,1,1,1,2,1,2,1,2,1,2,
        1,3,1,3,1,3,1,3,1,3,1,4,1,4,5,4,206,8,4,10,4,12,4,209,9,4,1,4,1,
        4,4,4,213,8,4,11,4,12,4,214,1,4,1,4,1,5,1,5,5,5,221,8,5,10,5,12,
        5,224,9,5,1,5,1,5,1,5,1,5,1,6,3,6,231,8,6,1,6,1,6,1,7,1,7,1,7,1,
        7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,
        1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,
        1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,
        1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,
        1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,
        1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,
        1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,
        1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,
        1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
        1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
        1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,46,1,46,1,46,1,46,
        1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,
        1,53,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,57,1,57,1,57,1,58,1,58,
        1,58,1,59,1,59,1,59,1,60,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,
        1,63,1,64,1,64,1,64,1,65,1,65,1,65,1,66,1,66,1,66,1,67,1,67,1,67,
        1,68,1,68,1,68,1,69,1,69,1,69,1,70,1,70,1,70,1,71,1,71,1,71,1,72,
        1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,76,1,76,1,76,1,77,1,77,1,78,
        1,78,1,79,1,79,1,80,1,80,1,81,1,81,1,81,1,82,1,82,1,83,1,83,1,84,
        1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
        1,84,1,84,1,84,1,84,3,84,622,8,84,1,85,1,85,1,85,4,85,627,8,85,11,
        85,12,85,628,1,85,3,85,632,8,85,1,85,3,85,635,8,85,1,85,3,85,638,
        8,85,1,85,5,85,641,8,85,10,85,12,85,644,9,85,1,85,1,85,1,86,3,86,
        649,8,86,1,86,5,86,652,8,86,10,86,12,86,655,9,86,1,87,4,87,658,8,
        87,11,87,12,87,659,1,88,1,88,3,88,664,8,88,1,89,3,89,667,8,89,1,
        89,1,89,1,89,1,89,1,89,3,89,674,8,89,1,90,1,90,3,90,678,8,90,1,90,
        1,90,1,90,1,91,1,91,3,91,685,8,91,1,91,1,91,2,207,214,0,92,1,1,3,
        0,5,2,7,3,9,4,11,5,13,6,15,7,17,8,19,9,21,10,23,11,25,12,27,13,29,
        14,31,15,33,16,35,17,37,18,39,19,41,20,43,21,45,22,47,23,49,24,51,
        25,53,26,55,27,57,28,59,29,61,30,63,31,65,32,67,33,69,34,71,35,73,
        36,75,37,77,38,79,39,81,40,83,41,85,42,87,43,89,44,91,45,93,46,95,
        47,97,48,99,49,101,50,103,51,105,52,107,53,109,54,111,55,113,56,
        115,57,117,58,119,59,121,60,123,61,125,62,127,63,129,64,131,65,133,
        66,135,67,137,68,139,69,141,70,143,71,145,72,147,73,149,74,151,75,
        153,76,155,77,157,78,159,79,161,80,163,81,165,82,167,83,169,84,171,
        85,173,86,175,87,177,88,179,0,181,0,183,0,1,0,7,2,0,9,9,32,32,2,
        0,10,10,13,13,4,0,10,10,13,13,34,34,92,92,4,0,36,36,65,90,95,95,
        97,122,5,0,36,36,48,57,65,90,95,95,97,122,1,0,48,57,2,0,69,69,101,
        101,705,0,1,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
        0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
        0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,
        0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,
        0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,
        0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,
        0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,
        0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,
        111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,
        0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,
        1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,
        0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,
        0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,
        157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,1,0,
        0,0,0,167,1,0,0,0,0,169,1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,0,0,175,
        1,0,0,0,0,177,1,0,0,0,1,185,1,0,0,0,3,190,1,0,0,0,5,194,1,0,0,0,
        7,198,1,0,0,0,9,203,1,0,0,0,11,218,1,0,0,0,13,230,1,0,0,0,15,234,
        1,0,0,0,17,238,1,0,0,0,19,246,1,0,0,0,21,251,1,0,0,0,23,258,1,0,
        0,0,25,266,1,0,0,0,27,271,1,0,0,0,29,280,1,0,0,0,31,287,1,0,0,0,
        33,294,1,0,0,0,35,297,1,0,0,0,37,302,1,0,0,0,39,307,1,0,0,0,41,311,
        1,0,0,0,43,317,1,0,0,0,45,320,1,0,0,0,47,325,1,0,0,0,49,329,1,0,
        0,0,51,333,1,0,0,0,53,336,1,0,0,0,55,340,1,0,0,0,57,351,1,0,0,0,
        59,358,1,0,0,0,61,365,1,0,0,0,63,373,1,0,0,0,65,379,1,0,0,0,67,390,
        1,0,0,0,69,400,1,0,0,0,71,407,1,0,0,0,73,417,1,0,0,0,75,423,1,0,
        0,0,77,430,1,0,0,0,79,441,1,0,0,0,81,451,1,0,0,0,83,457,1,0,0,0,
        85,468,1,0,0,0,87,479,1,0,0,0,89,492,1,0,0,0,91,507,1,0,0,0,93,509,
        1,0,0,0,95,513,1,0,0,0,97,515,1,0,0,0,99,517,1,0,0,0,101,519,1,0,
        0,0,103,521,1,0,0,0,105,523,1,0,0,0,107,525,1,0,0,0,109,527,1,0,
        0,0,111,529,1,0,0,0,113,532,1,0,0,0,115,534,1,0,0,0,117,537,1,0,
        0,0,119,540,1,0,0,0,121,543,1,0,0,0,123,546,1,0,0,0,125,548,1,0,
        0,0,127,550,1,0,0,0,129,553,1,0,0,0,131,556,1,0,0,0,133,559,1,0,
        0,0,135,562,1,0,0,0,137,565,1,0,0,0,139,568,1,0,0,0,141,571,1,0,
        0,0,143,574,1,0,0,0,145,577,1,0,0,0,147,579,1,0,0,0,149,581,1,0,
        0,0,151,583,1,0,0,0,153,585,1,0,0,0,155,588,1,0,0,0,157,590,1,0,
        0,0,159,592,1,0,0,0,161,594,1,0,0,0,163,596,1,0,0,0,165,599,1,0,
        0,0,167,601,1,0,0,0,169,621,1,0,0,0,171,623,1,0,0,0,173,648,1,0,
        0,0,175,657,1,0,0,0,177,663,1,0,0,0,179,673,1,0,0,0,181,677,1,0,
        0,0,183,684,1,0,0,0,185,186,5,34,0,0,186,187,5,34,0,0,187,188,5,
        34,0,0,188,2,1,0,0,0,189,191,5,13,0,0,190,189,1,0,0,0,190,191,1,
        0,0,0,191,192,1,0,0,0,192,193,5,10,0,0,193,4,1,0,0,0,194,195,7,0,
        0,0,195,196,1,0,0,0,196,197,6,2,0,0,197,6,1,0,0,0,198,199,5,92,0,
        0,199,200,3,3,1,0,200,201,1,0,0,0,201,202,6,3,0,0,202,8,1,0,0,0,
        203,207,3,1,0,0,204,206,9,0,0,0,205,204,1,0,0,0,206,209,1,0,0,0,
        207,208,1,0,0,0,207,205,1,0,0,0,208,210,1,0,0,0,209,207,1,0,0,0,
        210,212,3,1,0,0,211,213,3,3,1,0,212,211,1,0,0,0,213,214,1,0,0,0,
        214,215,1,0,0,0,214,212,1,0,0,0,215,216,1,0,0,0,216,217,6,4,1,0,
        217,10,1,0,0,0,218,222,5,35,0,0,219,221,8,1,0,0,220,219,1,0,0,0,
        221,224,1,0,0,0,222,220,1,0,0,0,222,223,1,0,0,0,223,225,1,0,0,0,
        224,222,1,0,0,0,225,226,3,3,1,0,226,227,1,0,0,0,227,228,6,5,1,0,
        228,12,1,0,0,0,229,231,5,13,0,0,230,229,1,0,0,0,230,231,1,0,0,0,
        231,232,1,0,0,0,232,233,5,10,0,0,233,14,1,0,0,0,234,235,5,101,0,
        0,235,236,5,110,0,0,236,237,5,100,0,0,237,16,1,0,0,0,238,239,5,105,
        0,0,239,240,5,110,0,0,240,241,5,116,0,0,241,242,5,101,0,0,242,243,
        5,103,0,0,243,244,5,101,0,0,244,245,5,114,0,0,245,18,1,0,0,0,246,
        247,5,114,0,0,247,248,5,101,0,0,248,249,5,97,0,0,249,250,5,108,0,
        0,250,20,1,0,0,0,251,252,5,115,0,0,252,253,5,116,0,0,253,254,5,114,
        0,0,254,255,5,105,0,0,255,256,5,110,0,0,256,257,5,103,0,0,257,22,
        1,0,0,0,258,259,5,98,0,0,259,260,5,111,0,0,260,261,5,111,0,0,261,
        262,5,108,0,0,262,263,5,101,0,0,263,264,5,97,0,0,264,265,5,110,0,
        0,265,24,1,0,0,0,266,267,5,118,0,0,267,268,5,111,0,0,268,269,5,105,
        0,0,269,270,5,100,0,0,270,26,1,0,0,0,271,272,5,102,0,0,272,273,5,
        117,0,0,273,274,5,110,0,0,274,275,5,99,0,0,275,276,5,116,0,0,276,
        277,5,105,0,0,277,278,5,111,0,0,278,279,5,110,0,0,279,28,1,0,0,0,
        280,281,5,105,0,0,281,282,5,110,0,0,282,283,5,108,0,0,283,284,5,
        105,0,0,284,285,5,110,0,0,285,286,5,101,0,0,286,30,1,0,0,0,287,288,
        5,114,0,0,288,289,5,101,0,0,289,290,5,116,0,0,290,291,5,117,0,0,
        291,292,5,114,0,0,292,293,5,110,0,0,293,32,1,0,0,0,294,295,5,105,
        0,0,295,296,5,102,0,0,296,34,1,0,0,0,297,298,5,101,0,0,298,299,5,
        108,0,0,299,300,5,105,0,0,300,301,5,102,0,0,301,36,1,0,0,0,302,303,
        5,101,0,0,303,304,5,108,0,0,304,305,5,115,0,0,305,306,5,101,0,0,
        306,38,1,0,0,0,307,308,5,102,0,0,308,309,5,111,0,0,309,310,5,114,
        0,0,310,40,1,0,0,0,311,312,5,119,0,0,312,313,5,104,0,0,313,314,5,
        105,0,0,314,315,5,108,0,0,315,316,5,101,0,0,316,42,1,0,0,0,317,318,
        5,105,0,0,318,319,5,110,0,0,319,44,1,0,0,0,320,321,5,115,0,0,321,
        322,5,116,0,0,322,323,5,101,0,0,323,324,5,112,0,0,324,46,1,0,0,0,
        325,326,5,105,0,0,326,327,5,110,0,0,327,328,5,102,0,0,328,48,1,0,
        0,0,329,330,5,97,0,0,330,331,5,110,0,0,331,332,5,100,0,0,332,50,
        1,0,0,0,333,334,5,111,0,0,334,335,5,114,0,0,335,52,1,0,0,0,336,337,
        5,110,0,0,337,338,5,111,0,0,338,339,5,116,0,0,339,54,1,0,0,0,340,
        341,5,114,0,0,341,342,5,101,0,0,342,343,5,99,0,0,343,344,5,111,0,
        0,344,345,5,114,0,0,345,346,5,100,0,0,346,347,5,97,0,0,347,348,5,
        98,0,0,348,349,5,108,0,0,349,350,5,101,0,0,350,56,1,0,0,0,351,352,
        5,107,0,0,352,353,5,101,0,0,353,354,5,114,0,0,354,355,5,110,0,0,
        355,356,5,101,0,0,356,357,5,108,0,0,357,58,1,0,0,0,358,359,5,110,
        0,0,359,360,5,101,0,0,360,361,5,117,0,0,361,362,5,114,0,0,362,363,
        5,111,0,0,363,364,5,110,0,0,364,60,1,0,0,0,365,366,5,115,0,0,366,
        367,5,121,0,0,367,368,5,110,0,0,368,369,5,97,0,0,369,370,5,112,0,
        0,370,371,5,115,0,0,371,372,5,101,0,0,372,62,1,0,0,0,373,374,5,115,
        0,0,374,375,5,116,0,0,375,376,5,97,0,0,376,377,5,116,0,0,377,378,
        5,101,0,0,378,64,1,0,0,0,379,380,5,112,0,0,380,381,5,97,0,0,381,
        382,5,114,0,0,382,383,5,97,0,0,383,384,5,109,0,0,384,385,5,101,0,
        0,385,386,5,116,0,0,386,387,5,101,0,0,387,388,5,114,0,0,388,389,
        5,115,0,0,389,66,1,0,0,0,390,391,5,105,0,0,391,392,5,110,0,0,392,
        393,5,116,0,0,393,394,5,101,0,0,394,395,5,114,0,0,395,396,5,110,
        0,0,396,397,5,97,0,0,397,398,5,108,0,0,398,399,5,115,0,0,399,68,
        1,0,0,0,400,401,5,117,0,0,401,402,5,112,0,0,402,403,5,100,0,0,403,
        404,5,97,0,0,404,405,5,116,0,0,405,406,5,101,0,0,406,70,1,0,0,0,
        407,408,5,101,0,0,408,409,5,113,0,0,409,410,5,117,0,0,410,411,5,
        97,0,0,411,412,5,116,0,0,412,413,5,105,0,0,413,414,5,111,0,0,414,
        415,5,110,0,0,415,416,5,115,0,0,416,72,1,0,0,0,417,418,5,105,0,0,
        418,419,5,110,0,0,419,420,5,112,0,0,420,421,5,117,0,0,421,422,5,
        116,0,0,422,74,1,0,0,0,423,424,5,111,0,0,424,425,5,117,0,0,425,426,
        5,116,0,0,426,427,5,112,0,0,427,428,5,117,0,0,428,429,5,116,0,0,
        429,76,1,0,0,0,430,431,5,99,0,0,431,432,5,111,0,0,432,433,5,110,
        0,0,433,434,5,116,0,0,434,435,5,105,0,0,435,436,5,110,0,0,436,437,
        5,117,0,0,437,438,5,111,0,0,438,439,5,117,0,0,439,440,5,115,0,0,
        440,78,1,0,0,0,441,442,5,111,0,0,442,443,5,110,0,0,443,444,5,82,
        0,0,444,445,5,101,0,0,445,446,5,99,0,0,446,447,5,101,0,0,447,448,
        5,105,0,0,448,449,5,118,0,0,449,450,5,101,0,0,450,80,1,0,0,0,451,
        452,5,115,0,0,452,453,5,112,0,0,453,454,5,105,0,0,454,455,5,107,
        0,0,455,456,5,101,0,0,456,82,1,0,0,0,457,458,5,105,0,0,458,459,5,
        110,0,0,459,460,5,104,0,0,460,461,5,105,0,0,461,462,5,98,0,0,462,
        463,5,105,0,0,463,464,5,116,0,0,464,465,5,111,0,0,465,466,5,114,
        0,0,466,467,5,121,0,0,467,84,1,0,0,0,468,469,5,101,0,0,469,470,5,
        120,0,0,470,471,5,99,0,0,471,472,5,105,0,0,472,473,5,116,0,0,473,
        474,5,97,0,0,474,475,5,116,0,0,475,476,5,111,0,0,476,477,5,114,0,
        0,477,478,5,121,0,0,478,86,1,0,0,0,479,480,5,64,0,0,480,481,5,104,
        0,0,481,482,5,111,0,0,482,483,5,109,0,0,483,484,5,111,0,0,484,485,
        5,103,0,0,485,486,5,101,0,0,486,487,5,110,0,0,487,488,5,101,0,0,
        488,489,5,111,0,0,489,490,5,117,0,0,490,491,5,115,0,0,491,88,1,0,
        0,0,492,493,5,64,0,0,493,494,5,104,0,0,494,495,5,101,0,0,495,496,
        5,116,0,0,496,497,5,101,0,0,497,498,5,114,0,0,498,499,5,111,0,0,
        499,500,5,103,0,0,500,501,5,101,0,0,501,502,5,110,0,0,502,503,5,
        101,0,0,503,504,5,111,0,0,504,505,5,117,0,0,505,506,5,115,0,0,506,
        90,1,0,0,0,507,508,5,64,0,0,508,92,1,0,0,0,509,510,5,46,0,0,510,
        511,5,46,0,0,511,512,5,46,0,0,512,94,1,0,0,0,513,514,5,40,0,0,514,
        96,1,0,0,0,515,516,5,41,0,0,516,98,1,0,0,0,517,518,5,43,0,0,518,
        100,1,0,0,0,519,520,5,126,0,0,520,102,1,0,0,0,521,522,5,124,0,0,
        522,104,1,0,0,0,523,524,5,94,0,0,524,106,1,0,0,0,525,526,5,38,0,
        0,526,108,1,0,0,0,527,528,5,91,0,0,528,110,1,0,0,0,529,530,5,60,
        0,0,530,531,5,45,0,0,531,112,1,0,0,0,532,533,5,93,0,0,533,114,1,
        0,0,0,534,535,5,91,0,0,535,536,5,91,0,0,536,116,1,0,0,0,537,538,
        5,93,0,0,538,539,5,93,0,0,539,118,1,0,0,0,540,541,5,60,0,0,541,542,
        5,60,0,0,542,120,1,0,0,0,543,544,5,62,0,0,544,545,5,62,0,0,545,122,
        1,0,0,0,546,547,5,60,0,0,547,124,1,0,0,0,548,549,5,62,0,0,549,126,
        1,0,0,0,550,551,5,60,0,0,551,552,5,61,0,0,552,128,1,0,0,0,553,554,
        5,43,0,0,554,555,5,61,0,0,555,130,1,0,0,0,556,557,5,45,0,0,557,558,
        5,61,0,0,558,132,1,0,0,0,559,560,5,42,0,0,560,561,5,61,0,0,561,134,
        1,0,0,0,562,563,5,47,0,0,563,564,5,61,0,0,564,136,1,0,0,0,565,566,
        5,61,0,0,566,567,5,61,0,0,567,138,1,0,0,0,568,569,5,33,0,0,569,570,
        5,61,0,0,570,140,1,0,0,0,571,572,5,60,0,0,572,573,5,62,0,0,573,142,
        1,0,0,0,574,575,5,62,0,0,575,576,5,61,0,0,576,144,1,0,0,0,577,578,
        5,44,0,0,578,146,1,0,0,0,579,580,5,45,0,0,580,148,1,0,0,0,581,582,
        5,61,0,0,582,150,1,0,0,0,583,584,5,42,0,0,584,152,1,0,0,0,585,586,
        5,42,0,0,586,587,5,42,0,0,587,154,1,0,0,0,588,589,5,47,0,0,589,156,
        1,0,0,0,590,591,5,37,0,0,591,158,1,0,0,0,592,593,5,63,0,0,593,160,
        1,0,0,0,594,595,5,58,0,0,595,162,1,0,0,0,596,597,5,58,0,0,597,598,
        5,58,0,0,598,164,1,0,0,0,599,600,5,59,0,0,600,166,1,0,0,0,601,602,
        5,39,0,0,602,168,1,0,0,0,603,604,5,116,0,0,604,605,5,114,0,0,605,
        606,5,117,0,0,606,622,5,101,0,0,607,608,5,84,0,0,608,609,5,114,0,
        0,609,610,5,117,0,0,610,622,5,101,0,0,611,612,5,102,0,0,612,613,
        5,97,0,0,613,614,5,108,0,0,614,615,5,115,0,0,615,622,5,101,0,0,616,
        617,5,70,0,0,617,618,5,97,0,0,618,619,5,108,0,0,619,620,5,115,0,
        0,620,622,5,101,0,0,621,603,1,0,0,0,621,607,1,0,0,0,621,611,1,0,
        0,0,621,616,1,0,0,0,622,170,1,0,0,0,623,642,5,34,0,0,624,637,5,92,
        0,0,625,627,7,0,0,0,626,625,1,0,0,0,627,628,1,0,0,0,628,626,1,0,
        0,0,628,629,1,0,0,0,629,634,1,0,0,0,630,632,5,13,0,0,631,630,1,0,
        0,0,631,632,1,0,0,0,632,633,1,0,0,0,633,635,5,10,0,0,634,631,1,0,
        0,0,634,635,1,0,0,0,635,638,1,0,0,0,636,638,9,0,0,0,637,626,1,0,
        0,0,637,636,1,0,0,0,638,641,1,0,0,0,639,641,8,2,0,0,640,624,1,0,
        0,0,640,639,1,0,0,0,641,644,1,0,0,0,642,640,1,0,0,0,642,643,1,0,
        0,0,643,645,1,0,0,0,644,642,1,0,0,0,645,646,5,34,0,0,646,172,1,0,
        0,0,647,649,7,3,0,0,648,647,1,0,0,0,649,653,1,0,0,0,650,652,7,4,
        0,0,651,650,1,0,0,0,652,655,1,0,0,0,653,651,1,0,0,0,653,654,1,0,
        0,0,654,174,1,0,0,0,655,653,1,0,0,0,656,658,7,5,0,0,657,656,1,0,
        0,0,658,659,1,0,0,0,659,657,1,0,0,0,659,660,1,0,0,0,660,176,1,0,
        0,0,661,664,3,179,89,0,662,664,3,181,90,0,663,661,1,0,0,0,663,662,
        1,0,0,0,664,178,1,0,0,0,665,667,3,175,87,0,666,665,1,0,0,0,666,667,
        1,0,0,0,667,668,1,0,0,0,668,669,5,46,0,0,669,674,3,175,87,0,670,
        671,3,175,87,0,671,672,5,46,0,0,672,674,1,0,0,0,673,666,1,0,0,0,
        673,670,1,0,0,0,674,180,1,0,0,0,675,678,3,175,87,0,676,678,3,179,
        89,0,677,675,1,0,0,0,677,676,1,0,0,0,678,679,1,0,0,0,679,680,7,6,
        0,0,680,681,3,183,91,0,681,182,1,0,0,0,682,685,3,99,49,0,683,685,
        3,147,73,0,684,682,1,0,0,0,684,683,1,0,0,0,684,685,1,0,0,0,685,686,
        1,0,0,0,686,687,3,175,87,0,687,184,1,0,0,0,22,0,190,207,214,222,
        230,621,628,631,634,637,640,642,648,651,653,659,663,666,673,677,
        684,2,0,1,0,0,2,0
    ]

class PyNestMLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    COMMENT = 2

    DOCSTRING_TRIPLEQUOTE = 1
    WS = 2
    LINE_ESCAPE = 3
    DOCSTRING = 4
    SL_COMMENT = 5
    NEWLINE = 6
    END_KEYWORD = 7
    INTEGER_KEYWORD = 8
    REAL_KEYWORD = 9
    STRING_KEYWORD = 10
    BOOLEAN_KEYWORD = 11
    VOID_KEYWORD = 12
    FUNCTION_KEYWORD = 13
    INLINE_KEYWORD = 14
    RETURN_KEYWORD = 15
    IF_KEYWORD = 16
    ELIF_KEYWORD = 17
    ELSE_KEYWORD = 18
    FOR_KEYWORD = 19
    WHILE_KEYWORD = 20
    IN_KEYWORD = 21
    STEP_KEYWORD = 22
    INF_KEYWORD = 23
    AND_KEYWORD = 24
    OR_KEYWORD = 25
    NOT_KEYWORD = 26
    RECORDABLE_KEYWORD = 27
    KERNEL_KEYWORD = 28
    NEURON_KEYWORD = 29
    SYNAPSE_KEYWORD = 30
    STATE_KEYWORD = 31
    PARAMETERS_KEYWORD = 32
    INTERNALS_KEYWORD = 33
    UPDATE_KEYWORD = 34
    EQUATIONS_KEYWORD = 35
    INPUT_KEYWORD = 36
    OUTPUT_KEYWORD = 37
    CONTINUOUS_KEYWORD = 38
    ON_RECEIVE_KEYWORD = 39
    SPIKE_KEYWORD = 40
    INHIBITORY_KEYWORD = 41
    EXCITATORY_KEYWORD = 42
    DECORATOR_HOMOGENEOUS = 43
    DECORATOR_HETEROGENEOUS = 44
    AT = 45
    ELLIPSIS = 46
    LEFT_PAREN = 47
    RIGHT_PAREN = 48
    PLUS = 49
    TILDE = 50
    PIPE = 51
    CARET = 52
    AMPERSAND = 53
    LEFT_SQUARE_BRACKET = 54
    LEFT_ANGLE_MINUS = 55
    RIGHT_SQUARE_BRACKET = 56
    LEFT_LEFT_SQUARE = 57
    RIGHT_RIGHT_SQUARE = 58
    LEFT_LEFT_ANGLE = 59
    RIGHT_RIGHT_ANGLE = 60
    LEFT_ANGLE = 61
    RIGHT_ANGLE = 62
    LEFT_ANGLE_EQUALS = 63
    PLUS_EQUALS = 64
    MINUS_EQUALS = 65
    STAR_EQUALS = 66
    FORWARD_SLASH_EQUALS = 67
    EQUALS_EQUALS = 68
    EXCLAMATION_EQUALS = 69
    LEFT_ANGLE_RIGHT_ANGLE = 70
    RIGHT_ANGLE_EQUALS = 71
    COMMA = 72
    MINUS = 73
    EQUALS = 74
    STAR = 75
    STAR_STAR = 76
    FORWARD_SLASH = 77
    PERCENT = 78
    QUESTION = 79
    COLON = 80
    DOUBLE_COLON = 81
    SEMICOLON = 82
    DIFFERENTIAL_ORDER = 83
    BOOLEAN_LITERAL = 84
    STRING_LITERAL = 85
    NAME = 86
    UNSIGNED_INTEGER = 87
    FLOAT = 88

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN", u"COMMENT" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'\"\"\"'", "'end'", "'integer'", "'real'", "'string'", "'boolean'", 
            "'void'", "'function'", "'inline'", "'return'", "'if'", "'elif'", 
            "'else'", "'for'", "'while'", "'in'", "'step'", "'inf'", "'and'", 
            "'or'", "'not'", "'recordable'", "'kernel'", "'neuron'", "'synapse'", 
            "'state'", "'parameters'", "'internals'", "'update'", "'equations'", 
            "'input'", "'output'", "'continuous'", "'onReceive'", "'spike'", 
            "'inhibitory'", "'excitatory'", "'@homogeneous'", "'@heterogeneous'", 
            "'@'", "'...'", "'('", "')'", "'+'", "'~'", "'|'", "'^'", "'&'", 
            "'['", "'<-'", "']'", "'[['", "']]'", "'<<'", "'>>'", "'<'", 
            "'>'", "'<='", "'+='", "'-='", "'*='", "'/='", "'=='", "'!='", 
            "'<>'", "'>='", "','", "'-'", "'='", "'*'", "'**'", "'/'", "'%'", 
            "'?'", "':'", "'::'", "';'", "'''" ]

    symbolicNames = [ "<INVALID>",
            "DOCSTRING_TRIPLEQUOTE", "WS", "LINE_ESCAPE", "DOCSTRING", "SL_COMMENT", 
            "NEWLINE", "END_KEYWORD", "INTEGER_KEYWORD", "REAL_KEYWORD", 
            "STRING_KEYWORD", "BOOLEAN_KEYWORD", "VOID_KEYWORD", "FUNCTION_KEYWORD", 
            "INLINE_KEYWORD", "RETURN_KEYWORD", "IF_KEYWORD", "ELIF_KEYWORD", 
            "ELSE_KEYWORD", "FOR_KEYWORD", "WHILE_KEYWORD", "IN_KEYWORD", 
            "STEP_KEYWORD", "INF_KEYWORD", "AND_KEYWORD", "OR_KEYWORD", 
            "NOT_KEYWORD", "RECORDABLE_KEYWORD", "KERNEL_KEYWORD", "NEURON_KEYWORD", 
            "SYNAPSE_KEYWORD", "STATE_KEYWORD", "PARAMETERS_KEYWORD", "INTERNALS_KEYWORD", 
            "UPDATE_KEYWORD", "EQUATIONS_KEYWORD", "INPUT_KEYWORD", "OUTPUT_KEYWORD", 
            "CONTINUOUS_KEYWORD", "ON_RECEIVE_KEYWORD", "SPIKE_KEYWORD", 
            "INHIBITORY_KEYWORD", "EXCITATORY_KEYWORD", "DECORATOR_HOMOGENEOUS", 
            "DECORATOR_HETEROGENEOUS", "AT", "ELLIPSIS", "LEFT_PAREN", "RIGHT_PAREN", 
            "PLUS", "TILDE", "PIPE", "CARET", "AMPERSAND", "LEFT_SQUARE_BRACKET", 
            "LEFT_ANGLE_MINUS", "RIGHT_SQUARE_BRACKET", "LEFT_LEFT_SQUARE", 
            "RIGHT_RIGHT_SQUARE", "LEFT_LEFT_ANGLE", "RIGHT_RIGHT_ANGLE", 
            "LEFT_ANGLE", "RIGHT_ANGLE", "LEFT_ANGLE_EQUALS", "PLUS_EQUALS", 
            "MINUS_EQUALS", "STAR_EQUALS", "FORWARD_SLASH_EQUALS", "EQUALS_EQUALS", 
            "EXCLAMATION_EQUALS", "LEFT_ANGLE_RIGHT_ANGLE", "RIGHT_ANGLE_EQUALS", 
            "COMMA", "MINUS", "EQUALS", "STAR", "STAR_STAR", "FORWARD_SLASH", 
            "PERCENT", "QUESTION", "COLON", "DOUBLE_COLON", "SEMICOLON", 
            "DIFFERENTIAL_ORDER", "BOOLEAN_LITERAL", "STRING_LITERAL", "NAME", 
            "UNSIGNED_INTEGER", "FLOAT" ]

    ruleNames = [ "DOCSTRING_TRIPLEQUOTE", "NEWLINE_FRAG", "WS", "LINE_ESCAPE", 
                  "DOCSTRING", "SL_COMMENT", "NEWLINE", "END_KEYWORD", "INTEGER_KEYWORD", 
                  "REAL_KEYWORD", "STRING_KEYWORD", "BOOLEAN_KEYWORD", "VOID_KEYWORD", 
                  "FUNCTION_KEYWORD", "INLINE_KEYWORD", "RETURN_KEYWORD", 
                  "IF_KEYWORD", "ELIF_KEYWORD", "ELSE_KEYWORD", "FOR_KEYWORD", 
                  "WHILE_KEYWORD", "IN_KEYWORD", "STEP_KEYWORD", "INF_KEYWORD", 
                  "AND_KEYWORD", "OR_KEYWORD", "NOT_KEYWORD", "RECORDABLE_KEYWORD", 
                  "KERNEL_KEYWORD", "NEURON_KEYWORD", "SYNAPSE_KEYWORD", 
                  "STATE_KEYWORD", "PARAMETERS_KEYWORD", "INTERNALS_KEYWORD", 
                  "UPDATE_KEYWORD", "EQUATIONS_KEYWORD", "INPUT_KEYWORD", 
                  "OUTPUT_KEYWORD", "CONTINUOUS_KEYWORD", "ON_RECEIVE_KEYWORD", 
                  "SPIKE_KEYWORD", "INHIBITORY_KEYWORD", "EXCITATORY_KEYWORD", 
                  "DECORATOR_HOMOGENEOUS", "DECORATOR_HETEROGENEOUS", "AT", 
                  "ELLIPSIS", "LEFT_PAREN", "RIGHT_PAREN", "PLUS", "TILDE", 
                  "PIPE", "CARET", "AMPERSAND", "LEFT_SQUARE_BRACKET", "LEFT_ANGLE_MINUS", 
                  "RIGHT_SQUARE_BRACKET", "LEFT_LEFT_SQUARE", "RIGHT_RIGHT_SQUARE", 
                  "LEFT_LEFT_ANGLE", "RIGHT_RIGHT_ANGLE", "LEFT_ANGLE", 
                  "RIGHT_ANGLE", "LEFT_ANGLE_EQUALS", "PLUS_EQUALS", "MINUS_EQUALS", 
                  "STAR_EQUALS", "FORWARD_SLASH_EQUALS", "EQUALS_EQUALS", 
                  "EXCLAMATION_EQUALS", "LEFT_ANGLE_RIGHT_ANGLE", "RIGHT_ANGLE_EQUALS", 
                  "COMMA", "MINUS", "EQUALS", "STAR", "STAR_STAR", "FORWARD_SLASH", 
                  "PERCENT", "QUESTION", "COLON", "DOUBLE_COLON", "SEMICOLON", 
                  "DIFFERENTIAL_ORDER", "BOOLEAN_LITERAL", "STRING_LITERAL", 
                  "NAME", "UNSIGNED_INTEGER", "FLOAT", "POINT_FLOAT", "EXPONENT_FLOAT", 
                  "EXPONENT" ]

    grammarFileName = "PyNestMLLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


