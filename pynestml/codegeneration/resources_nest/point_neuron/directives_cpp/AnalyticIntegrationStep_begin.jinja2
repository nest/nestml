{#
  Generates a series of C++ statements which perform one integration step of all ODEs that are solved by the analytic integrator.
#}
{%- if tracing %}/* generated by {{self._TemplateReference__context.name}} */ {% endif %}
{%- if uses_analytic_solver %}
{%-     for variable_name in analytic_state_variables_: %}
{%-         set update_expr = update_expressions[variable_name] %}
{%-         set var_ast = utils.get_variable_by_name(astnode, variable_name)%}
{%-         set var_symbol = var_ast.get_scope().resolve_to_symbol(variable_name, SymbolKind.VARIABLE)%}
{%-         if use_gap_junctions %}
const {{ type_symbol_printer.print(var_symbol.type_symbol) }} {{variable_name}}__tmp = {{ printer.print(update_expr) | replace("B_." + gap_junction_port + "_grid_sum_", "(B_." + gap_junction_port + "_grid_sum_ + __I_gap)") }};
{%-         else %}
const {{ type_symbol_printer.print(var_symbol.type_symbol) }} {{variable_name}}__tmp = {{ printer.print(update_expr) }};
{%-         endif %}
{%-     endfor %}
{%- endif %}
