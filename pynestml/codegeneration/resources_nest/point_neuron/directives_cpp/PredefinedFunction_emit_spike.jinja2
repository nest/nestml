{#
  Generates code for emit_spike() function call
  @param ast ASTFunctionCall
#}
{%- if tracing %}/* generated by {{self._TemplateReference__context.name}} */ {% endif %}

/**
 * generated code for emit_spike() function
**/
{% if ast.get_args() | length == 0 %}
{#-     no parameters -- emit_spike() called from within neuron #}
set_spiketime(nest::Time::step(origin.get_steps() + lag + 1));
nest::SpikeEvent se;
nest::kernel().event_delivery_manager.send(*this, se, lag);
{%- else %}
{#-     weight and delay parameters given -- emit_spike() called from within synapse #}
set_delay( {{ printer.print(ast.get_args()[1]) }} );
const long __delay_steps = nest::Time::delay_ms_to_steps( get_delay() );
set_delay_steps(__delay_steps);
e.set_receiver( *__target );
e.set_weight( {{ printer.print(ast.get_args()[0]) }} );
// use accessor functions (inherited from Connection< >) to obtain delay in steps and rport
e.set_delay_steps( get_delay_steps() );
e.set_rport( get_rport() );
e();
{%- endif %}


