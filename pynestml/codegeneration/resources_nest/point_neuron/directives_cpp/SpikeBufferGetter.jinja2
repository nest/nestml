{%- macro SpikeBufferGetter(is_in_struct) -%}
{%- if tracing %}/* generated by {{self._TemplateReference__context.name}} */ {% endif %}

{% set _tuples = [
    ("nest::RingBuffer", "spike_inputs_", "Buffer containing the incoming spikes"),
    ("double", "spike_inputs_grid_sum_", "Buffer containing the sum of all the incoming spikes"),
    ("nest::RingBuffer", "spike_input_received_", "Buffer containing a flag whether incoming spikes have been received on a given port"),
    ("double", "spike_input_received_grid_sum_", "Buffer containing a flag whether incoming spikes have been received on a given port")
] %}

{%- for data_type, variable_name, comment_string in _tuples %}

/**
 * {{ comment_string }}
**/
inline std::vector< {{data_type}} >& get_{{variable_name}}()
{
{%-     if is_in_struct %}
    return {{variable_name}};
{%-     else %}
    return B_.get_{{variable_name}}();
{%-     endif %}
}
{%-     if is_in_struct %}
std::vector< {{data_type}} > {{variable_name}};
{%-     endif %}
{%- endfor %}

{%- endmacro -%}
