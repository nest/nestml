{#
  Generates code for integrate_odes() function call
  @param ast ASTFunctionCall
#}
{%- if tracing %}/* generated by {{self._TemplateReference__context.name}} */ {% endif %}

// start rendered code for integrate_odes({{ ", ".join(utils.integrate_odes_args_strs_from_function_call(ast)) }})

{%- if uses_analytic_solver %}
{%  set analytic_state_variables_ = analytic_state_variables.copy() %}

{%- if paired_synapse is defined %}
{%      set tmp = analytic_state_variables_.extend(analytic_state_variables_moved) %}
{%- endif %}

{%- if ast.get_args() | length > 0 %}
{%-     set analytic_state_variables_ = utils.filter_variables_list(analytic_state_variables_, ast.get_args()) %}
{%- endif %}

{%- if analytic_state_variables_ | length > 0 %}
// analytic solver: integrating state variables (first step): {% for variable_name in analytic_state_variables_ %}{{ variable_name }}, {% endfor %}
{%-     include "directives_cpp/AnalyticIntegrationStep_begin.jinja2" %}
{%- endif %}
{%- endif %}

{%- if uses_numeric_solver %}

{%      set numeric_state_variables_to_be_integrated = numeric_state_variables %} {# + purely_numeric_state_variables_moved ? #}
{%-     if ast.get_args() | length > 0 %}
{%-         set numeric_state_variables_to_be_integrated = utils.filter_variables_list(numeric_state_variables_to_be_integrated, ast.get_args()) %}
{%-     endif %}
{%-     if numeric_state_variables_to_be_integrated | length > 0 %}
// numeric solver: integrating state variables: {% for variable_name in numeric_state_variables_to_be_integrated %}{{ variable_name }}, {% endfor %}

{%-         if analytic_state_variables_from_convolutions | length > 0 %}
// solver step should update state of convolutions internally, but not change ode_state[] pertaining to convolutions; convolution integration should be independent of integrate_odes() calls
// buffer the old values
{%-             for variable_name in analytic_state_variables_from_convolutions %}
{%-                 set update_expr = update_expressions[variable_name] %}
{%-                 set variable_symbol = variable_symbols[variable_name] %}
const double {{ variable_name }}__orig = {{ printer.print(utils.get_state_variable_by_name(astnode, variable_symbol.get_symbol_name())) }};
{%-             endfor %}
{%-         endif %}

{%-         include "directives_cpp/GSLIntegrationStep.jinja2" %}

{%-         if analytic_state_variables_from_convolutions | length > 0 %}
// restore the old values for convolutions
{%-             for variable_name in analytic_state_variables_from_convolutions %}
{%-                 set variable_symbol = variable_symbols[variable_name] %}
{{ printer.print(utils.get_state_variable_by_name(astnode, variable_symbol.get_symbol_name())) }} = {{ variable_name }}__orig;
{%-             endfor %}
{%          endif %}

{%-     endif %}
{%- endif %}

{%- if uses_analytic_solver %}
{%- if analytic_state_variables_ | length > 0 %}
// analytic solver: integrating state variables (second step): {% for variable_name in analytic_state_variables_ %}{{ variable_name }}, {% endfor %}

{%-     include "directives_cpp/AnalyticIntegrationStep_end.jinja2" %}
{%- endif %}
{%- endif %}
