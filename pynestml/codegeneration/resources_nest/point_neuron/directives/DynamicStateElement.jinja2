{#
  Generates get_state_element function to get elements state variables based on how they are inserted into the DynamicRecordablesMap
  @param neuron ASTNeuron: the neuron model
-#}
{%- import 'directives/VectorSizeParameter.jinja2' as vector_size_parameter with context %}
inline double get_state_element(size_t elem)
  {
{%- set len = recordable_state_variables | length %}
{%- for variable in recordable_state_variables %}
{%-  if loop.index == 1 %}
    if
{%-  elif loop.index == len %}
    else
{%-  else %}
    else if
{%-  endif %}

{%- if len == 1 or loop.index < len %}
{%-   if variable.has_vector_parameter() %}
{%-   set size =  variable.get_vector_parameter() %}
{%-     if size|int == 0 %}
{%-     set size = vector_size_parameter.VectorSizeParameter(variable, true) %}
{%-     endif -%}
    (elem >= State_::{{ printer_no_origin.print(variable).upper() }} and elem < State_::{{ printer_no_origin.print(variable).upper() }} + {{ size }})
    {
      return S_.{{ printer_no_origin.print(variable) }}[ elem - State_::{{ printer_no_origin.print(variable).upper() }} ];
    }
{%-   else %}
    (elem == State_::{{ printer_no_origin.print(utils.get_state_variable_by_name(astnode, variable.get_complete_name())).upper() }})
    {
      return {{ printer.print(utils.get_state_variable_by_name(astnode, variable.get_complete_name())) }};
    }
{%-   endif %}
{%- else %}
{%-   if variable.has_vector_parameter() %}
{%-      set variable_symbol = variable.get_scope().resolve_to_symbol(variable.get_complete_name(), SymbolKind.VARIABLE) %}

    {
      return {{ nest_codegen_utils.print_symbol_origin(variable_symbol, variable) % printer_no_origin.print(variable) }}[ elem - State_::{{ printer_no_origin.print(variable).upper() }} ];
    }
{%-   else %}
    {
      return {{ printer.print(variable) }};
    }
{%-   endif %}
{%- endif %}
{%- endfor %}
  }
