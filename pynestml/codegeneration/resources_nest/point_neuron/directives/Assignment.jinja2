{#
  Generates C++ declaration
  @grammar: Assignment = variableName:QualifiedName "=" Expr;
  @param ast ASTAssignment
#}
{%- if tracing %}/* generated by {{self._TemplateReference__context.name}} */ {% endif %}
{%- set lhs_variable = ast.get_variable() %}
{%- set lhs_variable_sym = assignments.lhs_variable(ast) %}
{%- if lhs_variable_sym is none %}
{{ raise('Symbol with name "%s" could not be resolved' % ast.lhs.get_complete_name()) }}
{%- endif %}

{%- if assignments.is_vectorized_assignment(ast) %}
{%-     if lhs_variable_sym.has_vector_parameter() %}
{%-         set lhs_vector_variable = lhs_variable.get_vector_parameter() %}
{%-         if lhs_vector_variable.is_numeric_literal() %}
{{ nest_codegen_utils.print_symbol_origin(lhs_variable_sym, lhs_variable) % printer_no_origin.print(lhs_variable) }}[{{ ast.get_variable().get_vector_parameter() }}]
{%-         elif lhs_vector_variable.is_variable() %}
{%-             set vec_symbol = lhs_vector_variable.get_scope().resolve_to_symbol(lhs_vector_variable.get_variable().get_complete_name(), SymbolKind.VARIABLE) %}
{{ printer.print(lhs_variable) }}
{%-         else -%}
{{ raise("Cannot handle vector index expression") }}
{%-         endif %}
{%-     else %}
{{ printer.print(lhs_variable) }}
{%-     endif %}
{{assignments.print_assignments_operation(ast)}} {{ printer.print(ast.get_expression()) }};
{%- else %}
{{ printer.print(lhs_variable) }} {{ assignments.print_assignments_operation(ast) }} {{ printer.print(ast.get_expression()) }};
{%- endif %}
