// #define DEBUG 1
{#
NeuronClass.jinja2

This file is part of NEST.

Copyright (C) 2004 The NEST Initiative

NEST is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

NEST is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with NEST.  If not, see <http://www.gnu.org/licenses/>.
#}
{%- if tracing %}/* generated by {{self._TemplateReference__context.name}} */{% endif -%}
/*
 *  {{neuronName}}.cpp
 *
 *  This file is part of NEST.
 *
 *  Copyright (C) 2004 The NEST Initiative
 *
 *  NEST is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  NEST is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  Generated from NESTML at time: {{now}}
**/

// C++ includes:
#include <limits>

// Includes from libnestutil:
#include "numerics.h"

// Includes from nestkernel:
#include "exceptions.h"
#include "kernel_manager.h"
#include "universal_data_logger_impl.h"

// Includes from sli:
#include "dict.h"
#include "dictutils.h"
#include "doubledatum.h"
#include "integerdatum.h"
#include "lockptrdatum.h"

#include "{{neuronName}}.h"

{%- set stateSize = neuron.get_non_inline_state_symbols()|length %}

// ---------------------------------------------------------------------------
//   Recordables map
// ---------------------------------------------------------------------------
{%- if not has_state_vectors %}
nest::RecordablesMap<{{neuronName}}> {{neuronName}}::recordablesMap_;
{%- endif %}
namespace nest
{

  // Override the create() method with one call to RecordablesMap::insert_()
  // for each quantity to be recorded.
{%- if has_state_vectors %}
template <> void DynamicRecordablesMap<{{neuronName}}>::create({{neuronName}}& host)
{%- else %}
template <> void RecordablesMap<{{neuronName}}>::create()
{%- endif %}
  {

{%- if recordable_state_variables|length > 0 %}
{%- if has_state_vectors %}
{%-   for sym in recordable_state_variables %}
{%-     if not sym.has_vector_parameter() %}
    insert("{{sym.get_symbol_name()}}", host.get_data_access_functor( {{neuronName}}::State_::{{names.name(sym).upper()}} ));
{%-     endif %}
{%-   endfor %}
{%- else %}
    // add state variables to recordables map
{%-   for sym in recordable_state_variables %}
   insert_({{names_namespace}}::_{{sym.get_symbol_name()}}, &{{neuronName}}::{{names.getter(sym)}});
{%-   endfor %}
{%- endif %}
{%- endif %}

{%- if recordable_inline_expressions|length > 0 %}
    // add recordable inline expressions to recordables map
{%- for sym in recordable_inline_expressions %}
	insert_({{names_namespace}}::_{{sym.get_symbol_name()}}, &{{neuronName}}::{{names.getter(sym)}});
{%- endfor %}
{%- endif %}

    // Add vector variables
{%- filter indent(2,True) %}
{%- if has_state_vectors %}
    host.insert_recordables();
{%- endif %}
{%- endfilter %}
  }
}

{%- if has_state_vectors %}
  std::string {{neuronName}}::get_var_name(size_t elem, std::string var_name)
  {
    std::stringstream n;
    n << var_name << elem + 1;
    return n.str();
  }

  void {{neuronName}}::insert_recordables(size_t first)
  {
{%- for variable in neuron.get_vector_state_symbols() %}
      for (size_t i = 0; i < {{printer.print_vector_size_parameter(variable)}}; i++)
      {
        size_t elem = {{neuronName}}::State_::{{names.name(variable).upper()}} + i;
        recordablesMap_.insert(get_var_name(i, "{{names.name(variable).upper()}}_"), this->get_data_access_functor(elem));
      }
{%- endfor %}
  }

  nest::DataAccessFunctor< {{neuronName}} >
  {{neuronName}}::get_data_access_functor( size_t elem )
  {
    return nest::DataAccessFunctor< {{neuronName}} >( *this, elem );
  }
{%- endif %}

// ---------------------------------------------------------------------------
//   Default constructors defining default parameters and state
//   Note: the implementation is empty. The initialization is of variables
//   is a part of {{neuronName}}'s constructor.
// ---------------------------------------------------------------------------

{{neuronName}}::Parameters_::Parameters_()
{
}

{{neuronName}}::State_::State_()
{
}

// ---------------------------------------------------------------------------
//   Parameter and state extractions and manipulation functions
// ---------------------------------------------------------------------------

{{neuronName}}::Buffers_::Buffers_({{neuronName}} &n):
  logger_(n)
{%- if neuron.get_multiple_receptors()|length > 1 %}
  , spike_inputs_( std::vector< nest::RingBuffer >( SUP_SPIKE_RECEPTOR - 1 ) )
{%- endif %}
{%- if uses_numeric_solver %}
  , __s( 0 ), __c( 0 ), __e( 0 )
{%- endif %}
{
  // Initialization of the remaining members is deferred to init_buffers_().
}

{{neuronName}}::Buffers_::Buffers_(const Buffers_ &, {{neuronName}} &n):
  logger_(n)
{%- if neuron.get_multiple_receptors()|length > 1 %}
  , spike_inputs_( std::vector< nest::RingBuffer >( SUP_SPIKE_RECEPTOR - 1 ) )
{%- endif %}
{%- if uses_numeric_solver %}
  , __s( 0 ), __c( 0 ), __e( 0 )
{%- endif %}
{
  // Initialization of the remaining members is deferred to init_buffers_().
}

// ---------------------------------------------------------------------------
//   Default constructor for node
// ---------------------------------------------------------------------------

{{neuronName}}::{{neuronName}}():{{neuron_parent_class}}(), P_(), S_(), B_(*this)
{
  const double __resolution = nest::Time::get_resolution().get_ms();  // do not remove, this is necessary for the resolution() function
{%- if nest_version.startswith("v2") or nest_version.startswith("v3.1") or nest_version.startswith("v3.2") or nest_version.startswith("v3.3") %}
  calibrate();
{%- else %}
  pre_run_hook();
{%- endif %}

{%- if uses_numeric_solver %}

  // use a default "good enough" value for the absolute error. It can be adjusted via `node.set()`
  P_.__gsl_error_tol = 1e-3;
{%- endif %}

{%- if parameter_syms_with_iv|length > 0 %}
  // initial values for parameters
{%- filter indent(2) %}
{%- for parameter in parameter_syms_with_iv %}
{%-   with variable = parameter %}
{%-     include "directives/MemberInitialization.jinja2" %}
{%-   endwith %}
{%- endfor %}
{%- endfilter %}
{%- endif %}

{%- if neuron.get_state_symbols()|length > 0 %}
  // initial values for state variables
{%- filter indent(2) %}
{%- for init in neuron.get_state_symbols() %}
{%-   with variable = init %}
{%-     include "directives/MemberInitialization.jinja2" %}
{%-   endwith %}
{%- endfor %}
{%- endfilter %}
{%- endif %}

{%- if has_state_vectors %}
  recordablesMap_.create(*this);
{%- else %}
  recordablesMap_.create();
{%- endif %}


{%- if paired_synapse is defined %}
  // state variables for archiving state for paired synapse
  n_incoming_ = 0;
  max_delay_ = 0;
  last_spike_ = -1.;

  // cache initial values
{%- for var in transferred_variables %}
{%- with var_sym = transferred_variables_syms[var] %}
{%- if not var == var_sym.get_symbol_name() %}
{{ raise('Error in resolving variable to symbol') }}
{%- endif %}
  {{var}}__iv = {{names.getter(var_sym)}}();
{%- endwith %}
{%- endfor %}
{%- endif %}
}

// ---------------------------------------------------------------------------
//   Copy constructor for node
// ---------------------------------------------------------------------------

{{neuronName}}::{{neuronName}}(const {{neuronName}}& __n):
  {{neuron_parent_class}}(), P_(__n.P_), S_(__n.S_), B_(__n.B_, *this) {

  // copy parameter struct P_
{%- for parameter in neuron.get_parameter_symbols() %}
  P_.{{names.name(parameter)}} = __n.P_.{{names.name(parameter)}};
{%- endfor %}

  // copy state struct S_
{%- for init in neuron.get_state_symbols() %}
{%-   if not is_delta_kernel(neuron.get_kernel_by_name(init.name)) %}
  S_.{{names.name(init)}} = __n.S_.{{names.name(init)}};
{%-   endif %}
{%- endfor %}


  // copy internals V_
{%- for internal in neuron.get_internal_symbols() %}
  V_.{{names.name(internal)}} = __n.V_.{{names.name(internal)}};
{%- endfor %}

{%- if has_state_vectors %}
  recordablesMap_.create(*this);
{%- endif %}
{%- if paired_synapse is defined %}
  n_incoming_ = __n.n_incoming_;
  max_delay_ = __n.max_delay_;
  last_spike_ = __n.last_spike_;

  // cache initial values
{%- for var in transferred_variables %}
{%- with var_sym = transferred_variables_syms[var] %}
{%- if not var == var_sym.get_symbol_name() %}
{{ raise('Error in resolving variable to symbol') }}
{%- endif %}
  {{var}}__iv = {{names.getter(var_sym)}}();
{%- endwith %}
{%- endfor %}
{%- endif %}
}

// ---------------------------------------------------------------------------
//   Destructor for node
// ---------------------------------------------------------------------------

{{neuronName}}::~{{neuronName}}()
{
{%- if uses_numeric_solver %}
  // GSL structs may not have been allocated, so we need to protect destruction

  if (B_.__s)
  {
    gsl_odeiv_step_free( B_.__s );
  }

  if (B_.__c)
  {
    gsl_odeiv_control_free( B_.__c );
  }

  if (B_.__e)
  {
    gsl_odeiv_evolve_free( B_.__e );
  }
{%- endif %}
}

// ---------------------------------------------------------------------------
//   Node initialization functions
// ---------------------------------------------------------------------------

{%- if nest_version.startswith("v2") %}
void {{neuronName}}::init_state_(const Node& proto)
{
  const {{neuronName}}& pr = downcast<{{neuronName}}>(proto);
  S_ = pr.S_;
}
{%- endif %}

void {{neuronName}}::init_buffers_()
{
{%- for port in neuron.get_input_ports() %}
  {{ printer.print_buffer_initialization(port) }}
{%- endfor %}
  B_.logger_.reset(); // includes resize
{%- if has_delay_variables %}
  // Initialize helper variables for delay-based variables
{%-   for variable in neuron.get_state_symbols() %}
{%-     if variable.has_delay_parameter() %}
{%-       include "directives/DelayVariablesInitialization.jinja2" %}
{%-     endif %}
{%-   endfor %}
{%- endif %}

{%- if paired_neuron is defined %}
  clear_history();
{%- endif %}
{%- if uses_numeric_solver %}

  if ( B_.__s == 0 )
  {
    B_.__s = gsl_odeiv_step_alloc( gsl_odeiv_step_rkf45, {{stateSize}} );
  }
  else
  {
    gsl_odeiv_step_reset( B_.__s );
  }

  if ( B_.__c == 0 )
  {
    B_.__c = gsl_odeiv_control_y_new( P_.__gsl_error_tol, 0.0 );
  }
  else
  {
    gsl_odeiv_control_init( B_.__c, P_.__gsl_error_tol, 0.0, 1.0, 0.0 );
  }

  if ( B_.__e == 0 )
  {
    B_.__e = gsl_odeiv_evolve_alloc( {{stateSize}} );
  }
  else
  {
    gsl_odeiv_evolve_reset( B_.__e );
  }

  B_.__sys.function = {{neuronName}}_dynamics;
  B_.__sys.jacobian = NULL;
  B_.__sys.dimension = {{stateSize}};
  B_.__sys.params = reinterpret_cast< void* >( this );
  B_.__step = nest::Time::get_resolution().get_ms();
  B_.__integration_step = nest::Time::get_resolution().get_ms();
{%- endif %}
}

void {{neuronName}}::recompute_internal_variables(bool exclude_timestep) {
  const double __resolution = nest::Time::get_resolution().get_ms();  // do not remove, this is necessary for the resolution() function

  if (exclude_timestep) {
{%- filter indent(4,True) %}
{%- for variable in neuron.get_internal_symbols() %}
{%- if variable.name != "__h" %}
{%-   include "directives/MemberInitialization.jinja2" %}
{%- endif %}
{%- endfor %}
{%- endfilter %}
  }
  else {
    // internals V_
{%- filter indent(4) %}
{%- for variable in neuron.get_internal_symbols() %}
{%-   include "directives/MemberInitialization.jinja2" %}
{%- endfor %}
{%- endfilter %}
  }
}

{%- if nest_version.startswith("v2") or nest_version.startswith("v3.1") or nest_version.startswith("v3.2") or nest_version.startswith("v3.3") %}
void {{neuronName}}::calibrate() {
{%- else %}
void {{neuronName}}::pre_run_hook() {
{%- endif %}
  B_.logger_.init();

  recompute_internal_variables();

  // buffers B_
{%- for port in neuron.get_input_ports() %}
{%-   if port.has_vector_parameter() %}
  B_.{{port.get_symbol_name()}}.resize(P_.{{port.get_vector_parameter()}});
  B_.{{port.get_symbol_name()}}_grid_sum_.resize(P_.{{port.get_vector_parameter()}});
{%-   endif %}
{%- endfor %}
}
{%- if neuron.get_functions()|length > 0 %}

// ---------------------------------------------------------------------------
//   Functions defined in the NESTML model
// ---------------------------------------------------------------------------

{%- for function in neuron.get_functions() %}
{{printer.print_function_definition(function, neuronName)}}
{
{%-   filter indent(2,True) %}
{%-   with ast = function.get_block() %}
{%-     include "directives/Block.jinja2" %}
{%-   endwith %}
{%-   endfilter %}
}
{%- endfor %}
{%- endif %}

// ---------------------------------------------------------------------------
//   Update and spike handling functions
// ---------------------------------------------------------------------------

{% if uses_numeric_solver %}
{%- include "directives/GSLDifferentiationFunction.jinja2" %}
{% endif %}

{%- if has_delay_variables %}
void {{neuronName}}::update_delay_variables()
{
{%-   for variable in neuron.get_state_symbols() %}
{%-     if variable.has_delay_parameter() %}
{%-       include "directives/UpdateDelayVariables.jinja2" %}
{%-     endif %}
{%-   endfor %}
}

{%-   for variable in neuron.get_state_symbols() %}
{%-     if variable.has_delay_parameter() %}
double {{neuronName}}::get_delayed_{{variable.get_symbol_name()}}() const
{
    return DV_.delayed_{{variable.get_symbol_name()}}[ DV_.delayed_{{variable.get_symbol_name()}}_idx ];
}
{%-     endif %}
{%-   endfor %}

{%- endif %}
{%- if neuron.print_dynamics_comment('*')|length > 1 %}
/*
 {{neuron.print_dynamics_comment('*')}}
 */
{%- endif %}
void {{neuronName}}::update(nest::Time const & origin,const long from, const long to)
{
  const double __resolution = nest::Time::get_resolution().get_ms();  // do not remove, this is necessary for the resolution() function

{% if propagators_are_state_dependent %}
  // the propagators are state dependent; update them!
  recompute_internal_variables();
{%- endif %}

  for ( long lag = from ; lag < to ; ++lag )
  {
{%- for inputPort in neuron.get_input_ports() %}
{%-   if inputPort.has_vector_parameter() %}
    for (long i=0; i < P_.{{inputPort.get_vector_parameter()}}; ++i)
    {
      B_.{{names.buffer_value(inputPort)}}[i] = get_{{names.name(inputPort)}}()[i].get_value(lag);
    }
{%-   else %}
    B_.{{names.buffer_value(inputPort)}} = get_{{names.name(inputPort)}}().get_value(lag);
{%-   endif %}
{%- endfor %}

{%- if has_delay_variables %}
    update_delay_variables();
{%- endif %}

    // NESTML generated code for the update block:

{%- if neuron.get_update_blocks() %}
{%- filter indent(2) %}
{%- set dynamics = neuron.get_update_blocks() %}
{%- with ast = dynamics.get_block() %}
{%-   include "directives/Block.jinja2" %}
{%- endwith %}
{%- endfilter %}
{%- endif %}

    // voltage logging
    B_.logger_.record_data(origin.get_steps() + lag);
  }
}

// Do not move this function as inline to h-file. It depends on
// universal_data_logger_impl.h being included here.
void {{neuronName}}::handle(nest::DataLoggingRequest& e)
{
  B_.logger_.handle(e);
}
{% if has_spike_input %}
void {{neuronName}}::handle(nest::SpikeEvent &e)
{
  assert(e.get_delay_steps() > 0);
{%- if neuron.is_multisynapse_spikes() %}
{%-   set port = neuron.get_spike_input_ports()[0] %}
  B_.{{port.get_symbol_name()}}[e.get_rport() - 1].add_value(
    e.get_rel_delivery_steps( nest::kernel().simulation_manager.get_slice_origin() ),
    e.get_weight() * e.get_multiplicity() );
{%- elif neuron.get_multiple_receptors()|length > 1 %}
  assert( e.get_rport() < static_cast< int >( B_.spike_inputs_.size() ) );

  B_.spike_inputs_[ e.get_rport() ].add_value(
    e.get_rel_delivery_steps( nest::kernel().simulation_manager.get_slice_origin() ),
    e.get_weight() * e.get_multiplicity() );
{%- else %}
  const double weight = e.get_weight();
  const double multiplicity = e.get_multiplicity();
{%-   for port in neuron.get_spike_input_ports() %}
{%-     if port.is_excitatory() and port.is_inhibitory() %}
  // this port receives both excitatory and inhibitory spikes (where inhibitory spikes are those where weight < 0)
  get_{{port.get_symbol_name()}}().
      add_value(e.get_rel_delivery_steps( nest::kernel().simulation_manager.get_slice_origin()),
                     weight * multiplicity );
{%-     elif port.is_excitatory() %}
  // this port receives excitatory spikes
  if ( weight >= 0.0 )
  {
    get_{{port.get_symbol_name()}}().
        add_value(e.get_rel_delivery_steps( nest::kernel().simulation_manager.get_slice_origin()),
                       weight * multiplicity );
  }
{%-     elif port.is_inhibitory() %}
  // this port receives inhibitory spikes
  if ( weight < 0.0 )
  {
    get_{{port.get_symbol_name()}}().
        add_value(e.get_rel_delivery_steps( nest::kernel().simulation_manager.get_slice_origin()),
                  -weight * multiplicity );
  }
{%-     endif %}
{%-   endfor %}
{%- endif %}
}
{%- endif %}

{%- if has_continuous_input %}

void {{neuronName}}::handle(nest::CurrentEvent& e)
{
  assert(e.get_delay_steps() > 0);

  const double current = e.get_current();     // we assume that in NEST, this returns a current in pA
  const double weight = e.get_weight();

{%- for port in neuron.get_continuous_input_ports() %}
  get_{{port.get_symbol_name()}}().add_value(
               e.get_rel_delivery_steps( nest::kernel().simulation_manager.get_slice_origin()),
               weight * current );
{%- endfor %}
}
{%- endif %}



{%- if paired_synapse is defined %}


inline double
{{neuronName}}::get_spiketime_ms() const
{
  return last_spike_;
}


void
{{neuronName}}::register_stdp_connection( double t_first_read, double delay )
{
  // Mark all entries in the deque, which we will not read in future as read by
  // this input input, so that we safely increment the incoming number of
  // connections afterwards without leaving spikes in the history.
  // For details see bug #218. MH 08-04-22

  for ( std::deque< histentry__{{neuronName}} >::iterator runner = history_.begin();
        runner != history_.end() and ( t_first_read - runner->t_ > -1.0 * nest::kernel().connection_manager.get_stdp_eps() );
        ++runner )
  {
    ( runner->access_counter_ )++;
  }

  n_incoming_++;

  max_delay_ = std::max( delay, max_delay_ );
}


void
{{neuronName}}::get_history__( double t1,
  double t2,
  std::deque< histentry__{{neuronName}} >::iterator* start,
  std::deque< histentry__{{neuronName}} >::iterator* finish )
{
  *finish = history_.end();
  if ( history_.empty() )
  {
    *start = *finish;
    return;
  }
  std::deque< histentry__{{neuronName}} >::reverse_iterator runner = history_.rbegin();
  const double t2_lim = t2 + nest::kernel().connection_manager.get_stdp_eps();
  const double t1_lim = t1 + nest::kernel().connection_manager.get_stdp_eps();
  while ( runner != history_.rend() and runner->t_ >= t2_lim )
  {
    ++runner;
  }
  *finish = runner.base();
  while ( runner != history_.rend() and runner->t_ >= t1_lim )
  {
    runner->access_counter_++;
    ++runner;
  }
  *start = runner.base();
}

void
{{neuronName}}::set_spiketime( nest::Time const& t_sp, double offset )
{
    {{neuron_parent_class}}::set_spiketime( t_sp, offset );

    unsigned int num_transferred_variables = 0;
{%- for var in transferred_variables %}
    ++num_transferred_variables;
{%- endfor %}

    const double t_sp_ms = t_sp.get_ms() - offset;

    if ( n_incoming_ )
    {
        // prune all spikes from history which are no longer needed
        // only remove a spike if:
        // - its access counter indicates it has been read out by all connected
        //     STDP synapses, and
        // - there is another, later spike, that is strictly more than
        //     (max_delay_ + eps) away from the new spike (at t_sp_ms)
        while ( history_.size() > 1 )
        {
            const double next_t_sp = history_[ 1 ].t_;
            if ( history_.front().access_counter_ >= n_incoming_ * num_transferred_variables
                and t_sp_ms - next_t_sp > max_delay_ + nest::kernel().connection_manager.get_stdp_eps() )
            {
                history_.pop_front();
            }
            else
            {
                break;
            }
        }

        if (history_.size() > 0) {
            assert(history_.back().t_ == last_spike_);

{%- for var in purely_numeric_state_variables_moved|sort %}
            S_.{{names.name(neuron.get_equations_block().get_scope().resolve_to_symbol(var, SymbolKind.VARIABLE))}} = history_.back().{{var}}_;
{%- endfor %}
{%- for var in analytic_state_variables_moved|sort %}
            S_.{{names.name(neuron.get_equations_block().get_scope().resolve_to_symbol(var, SymbolKind.VARIABLE))}} = history_.back().{{var}}_;
{%- endfor %}
        }
        else {
{%- for var in purely_numeric_state_variables_moved|sort %}
            S_.{{names.name(neuron.get_equations_block().get_scope().resolve_to_symbol(var, SymbolKind.VARIABLE))}} = 0.; // initial value for convolution is always 0
{%- endfor %}
{%- for var in analytic_state_variables_moved|sort %}
            S_.{{names.name(neuron.get_equations_block().get_scope().resolve_to_symbol(var, SymbolKind.VARIABLE))}} = 0.; // initial value for convolution is always 0
{%- endfor %}
        }


        /**
         * update state variables transferred from synapse from `last_spike_` to `t_sp_ms`
        **/

        const double old___h = V_.__h;
        V_.__h = t_sp_ms - last_spike_;
        if (V_.__h > 1E-12) {
          recompute_internal_variables(true);
{#
  Generates a series of C++ statements which perform one integration step of all ODEs that are solved by the analytic integrator.
#}

{%- filter indent(6, True) %}
{%- with analytic_state_variables_ = analytic_state_variables_moved|sort %}
{%-     include "directives/AnalyticIntegrationStep_begin.jinja2" %}
{%- endwith %}

{%- if uses_numeric_solver %}
// update only synapse->neuron moved variables; back-up and restore the rest
double ode_state_bak[State_::STATE_VEC_SIZE];

{%-   for variable_name in numeric_state_variables %}
ode_state_bak[State_::{{variable_name}}] = S_.ode_state[State_::{{variable_name}}];
{%-     endfor %}

{%- if uses_numeric_solver %}
{%-     include "directives/GSLIntegrationStep.jinja2" %}
{%- endif %}

// restore non-synapse->neuron-moved variables
{%-   for variable_name in numeric_state_variables %}
S_.ode_state[State_::{{variable_name}}] = ode_state_bak[State_::{{variable_name}}];
{%-     endfor %}

// restore variables solved analytically
{%-   for variable_name in numeric_state_variables %}
S_.ode_state[State_::{{variable_name}}] = ode_state_bak[State_::{{variable_name}}];
{%-     endfor %}
{%- endif %}

{%- with analytic_state_variables_ = analytic_state_variables_moved|sort %}
{%-     include "directives/AnalyticIntegrationStep_end.jinja2" %}
{%- endwith %}

{%- endfilter %}
        V_.__h = old___h;
        recompute_internal_variables(true);
      }

        /**
         * apply spike updates
        **/

{%- for stmt in spike_update_stmts %}
{%- if uses_numeric_solver %}
        {{printer.print_node(stmt)}};
{%- else %}
        {{nest_printer.print_node(stmt)}};
{%- endif %}
{%- endfor %}

{%- for _, spike_update in post_spike_updates.items() %}
        S_.{{names.name(neuron.get_equations_block().get_scope().resolve_to_symbol(spike_update.get_variable().get_complete_name(), SymbolKind.VARIABLE))}} += 1.;
{%- endfor %}

    last_spike_ = t_sp_ms;
    history_.push_back( histentry__{{neuronName}}( last_spike_
{%- for var in purely_numeric_state_variables_moved|sort %}
    , get_{{var}}()
{%- endfor %}
{%- for var in analytic_state_variables_moved|sort %}
    , get_{{var}}()
{%- endfor %}
, 0
 ) );
  }
  else
  {
    last_spike_ = t_sp_ms;
  }
}


void
{{neuronName}}::clear_history()
{
  last_spike_ = -1.0;
  history_.clear();
}


{#
	generate getter functions for the transferred variables
#}

{%- for var in transferred_variables %}
{%- with var_sym = transferred_variables_syms[var] %}

{%- if not var == var_sym.get_symbol_name() %}
{{ raise('Error in resolving variable to symbol') }}
{%- endif %}

double
{{neuronName}}::get_{{var}}( double t, const bool before_increment )
{
#ifdef DEBUG
  std::cout << "{{neuronName}}::get_{{var}}: getting value at t = " << t << std::endl;
#endif

  // case when the neuron has not yet spiked
  if ( history_.empty() )
  {
#ifdef DEBUG
    std::cout << "{{neuronName}}::get_{{var}}: \thistory empty, returning initial value = " << {{var}}__iv << std::endl;
#endif
    // return initial value
    return {{var}}__iv;
  }

  // search for the latest post spike in the history buffer that came strictly before `t`
  int i = history_.size() - 1;
  double eps = 0.;
  if ( before_increment ) {
   eps = nest::kernel().connection_manager.get_stdp_eps();
  }
  while ( i >= 0 )
  {
    if ( t - history_[ i ].t_ >= eps )
    {
#ifdef DEBUG
      std::cout<<"{{neuronName}}::get_{{var}}: \tspike occurred at history[i].t_ = " << history_[i].t_ << std::endl;
#endif

{%- for var_ in purely_numeric_state_variables_moved %}
      S_.{{names.name(neuron.get_equations_block().get_scope().resolve_to_symbol(var_, SymbolKind.VARIABLE))}} = history_[ i ].{{var_}}_;
{%- endfor %}
{%- for var_ in analytic_state_variables_moved %}
      S_.{{names.name(neuron.get_equations_block().get_scope().resolve_to_symbol(var_, SymbolKind.VARIABLE))}} = history_[ i ].{{var_}}_;
{%- endfor %}

      /**
       * update state variables transferred from synapse from `history[i].t_` to `t`
      **/

      if ( t - history_[ i ].t_ >= nest::kernel().connection_manager.get_stdp_eps() )
      {
        const double old___h = V_.__h;
        V_.__h = t - history_[i].t_;
        assert(V_.__h > 0);
        recompute_internal_variables(true);
{#
  Generates a series of C++ statements which perform one integration step of all ODEs that are solved by the analytic integrator.
#}

{%- filter indent(6, True) %}
{%- with analytic_state_variables_ = analytic_state_variables_moved|sort %}
{%-     include "directives/AnalyticIntegrationStep_begin.jinja2" %}
{%- endwith %}

{%- if purely_numeric_state_variables_moved|length > 0 %}
double ode_state_tmp[STATE_VEC_SIZE];

for (int i = 0; i < STATE_VEC_SIZE; ++i) {
  ode_state_tmp[i] = S_.ode_state[i];
}

{%- if uses_numeric_solver %}
{%-     include "directives/GSLIntegrationStep.jinja2" %}
{%- endif %}

{%- for variable_name in numeric_state_variables_moved|sort %}
{%- if not variable_name in analytic_state_variables_moved %}
S_.ode_state[State_::{{variable_name}}] = ode_state_tmp[State_::{{variable_name}}];
{%- endif %}
{%- endfor %}
{%- endif %}

{%- with analytic_state_variables_ = analytic_state_variables_moved|sort %}
{%-     include "directives/AnalyticIntegrationStep_end.jinja2" %}
{%- endwith %}
{%- endfilter %}

        V_.__h = old___h;
        recompute_internal_variables(true);
      }

#ifdef DEBUG
      std::cout << "{{neuronName}}::get_{{var}}: \treturning " << {{names.getter(var_sym)}}() << std::endl;
#endif
      return {{names.getter(var_sym)}}();       // type: {{declarations.print_variable_type(var_sym)}}
    }
    --i;
  }

  // this case occurs when the trace was requested at a time precisely at that of the first spike in the history
  if ( (!before_increment) && t == history_[ 0 ].t_)
  {
{%- for var_ in purely_numeric_state_variables_moved %}
    S_.{{names.name(neuron.get_equations_block().get_scope().resolve_to_symbol(var_, SymbolKind.VARIABLE))}} = history_[ 0 ].{{var_}}_;
{%- endfor %}
{%- for var_ in analytic_state_variables_moved %}
    S_.{{names.name(neuron.get_equations_block().get_scope().resolve_to_symbol(var_, SymbolKind.VARIABLE))}} = history_[ 0 ].{{var_}}_;
{%- endfor %}

#ifdef DEBUG
    std::cout << "{{neuronName}}::get_{{var}}: \ttrace requested at exact time of history entry 0, returning " << {{names.getter(var_sym)}}() << std::endl;
#endif
    return {{names.getter(var_sym)}}();
  }

  // this case occurs when the trace was requested at a time before the first spike in the history
  // return initial value propagated in time
#ifdef DEBUG
  std::cout << "{{neuronName}}::get_{{var}}: \tfall-through, returning initial value = " << {{var}}__iv << std::endl;
#endif

  if (t == 0.) {
    return 0.;  // initial value for convolution is always 0
  }

  // set to initial value
{%- for var_ in purely_numeric_state_variables_moved %}
  S_.{{names.name(neuron.get_equations_block().get_scope().resolve_to_symbol(var_, SymbolKind.VARIABLE))}} = 0.;  // initial value for convolution is always 0
{%- endfor %}
{%- for var_ in analytic_state_variables_moved %}
  S_.{{names.name(neuron.get_equations_block().get_scope().resolve_to_symbol(var_, SymbolKind.VARIABLE))}} = 0.;  // initial value for convolution is always 0
{%- endfor %}

  // propagate in time
  const double old___h = V_.__h;
  V_.__h = t;   // from time 0 to the requested time
  assert(V_.__h > 0);
  recompute_internal_variables(true);
{#
  Generates a series of C++ statements which perform one integration step of all ODEs that are solved by the analytic integrator.
#}
{%- filter indent(2, True) %}
{%- with analytic_state_variables_ = analytic_state_variables_moved|sort %}
{%-     include "directives/AnalyticIntegrationStep_begin.jinja2" %}
{%- endwith %}

{%- if purely_numeric_state_variables_moved|length > 0 %}
double ode_state_tmp[STATE_VEC_SIZE];

for (int i = 0; i < STATE_VEC_SIZE; ++i) {
    ode_state_tmp[i] = S_.ode_state[i];
}

{%- if uses_numeric_solver %}
{%-     include "directives/GSLIntegrationStep.jinja2" %}
{%- endif %}

{%- for variable_name in numeric_state_variables_moved|sort %}
{%- if not variable_name in analytic_state_variables_moved %}
  S_.ode_state[State_::{{variable_name}}] = ode_state_tmp[State_::{{variable_name}}];
{%- endif %}
{%- endfor %}
{%- endif %}

{%- with analytic_state_variables_ = analytic_state_variables_moved|sort %}
{%-     include "directives/AnalyticIntegrationStep_end.jinja2" %}
{%- endwith %}

{%- endfilter %}
  V_.__h = old___h;
  recompute_internal_variables(true);

  return {{names.getter(var_sym)}}();
}
{%- endwith -%}
{%- endfor %}

{%- endif %}
{# leave this comment here to ensure newline is generated at end of file -#}
