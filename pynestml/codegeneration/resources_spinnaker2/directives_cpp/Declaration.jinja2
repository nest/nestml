{#
  Generates C++ declaration
  @param ast ASTDeclaration
#}
{%- if tracing %}/* generated by {{self._TemplateReference__context.name}} */ {% endif %}
{%- for variable in declarations.get_variables(ast) %}
{%-   if ast.has_size_parameter() %}
{{declarations.print_variable_type(variable)}} {{variable.get_symbol_name()}}(P_.{{declarations.print_size_parameter(ast)}});
{%-     if ast.has_expression() %}
for (long i=0; i < get_{{declarations.print_size_parameter(ast)}}(); i++) {
  {{variable.get_symbol_name()}}[i] = {{printer.print(ast.getExpr())}};
}
{%-     endif %}
{%-   else %}
{%-     if ast.has_expression() %}
{{declarations.print_variable_type(variable)}} {{variable.get_symbol_name()}} = {{printer.print(ast.get_expression())}};
{%-     else %}
{{declarations.print_variable_type(variable)}} {{variable.get_symbol_name()}};
{%-     endif %}
{%-   endif %}
{%- endfor -%}
