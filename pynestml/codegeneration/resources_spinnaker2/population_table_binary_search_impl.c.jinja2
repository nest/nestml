#include "population_table.h"
#include "synapse_row.h"
#include "spinn_log.h"

extern volatile population_table_info* pop_table_info;
extern volatile master_population_table_entry* master_population_table;

static uint32_t master_population_table_length;

static inline uint32_t _get_address(master_population_table_entry entry) {
    return entry.address_and_row_length {{ '>>' }} 8;
}

static inline uint32_t _get_row_length(master_population_table_entry entry) {
    return entry.address_and_row_length & 0xFF;
}

bool population_table_initialise( ) {
    master_population_table_length = pop_table_info->length;
//    log_info("pop table address 0: %p\n", pop_table_info->address);
//    log_info("pop table address 1: %p\n", master_population_table);
    master_population_table = (volatile master_population_table_entry*) pop_table_info->address;
//    log_info("pop table address 2: %p\n", master_population_table);
    return true;
}

bool population_table_get_address(spike_t spike, address_t* row_address,
                                  size_t* n_bytes_to_transfer) {
    uint32_t imin = 0;
    uint32_t imax = master_population_table_length;
    while (imin {{ '<' }} imax) {
        int imid = (imax + imin) {{ '>>' }} 1;
        master_population_table_entry entry = master_population_table[imid];
        if ((spike & entry.mask) == entry.key) {
            *row_address =(address_t) _get_address(entry);
            *n_bytes_to_transfer =(size_t) _get_row_length(entry);
            return true;
        } else if (entry.key {{ '<' }} spike) {
            imin = imid + 1;
        } else {
            imax = imid;
        }
    }
    return false;
}


void print_population_table() {
  log_info("== Population table (%d entries) at address 0x%x ==\n", master_population_table_length, (uint32_t) master_population_table);
  for (uint32_t i=0; i{{ '<' }}master_population_table_length; ++i) {
    master_population_table_entry entry = master_population_table[i];
    log_info("Entry %d: key=%d, mask=0x%x, address=0x%x, row_length=%d\n", i, entry.key, entry.mask, _get_address(entry), _get_row_length(entry));
  }
}
