#ifndef _NEURON_MODEL_{{ neuronName|upper }}_IMPL_H_
#define _NEURON_MODEL_{{ neuronName|upper }}_IMPL_H_

#include "neuron_model.h"
#include "common/neuron-typedefs.h"

typedef struct global_neuron_params_t {
    REAL calc_step_raw; // ode calc timestep
    REAL weight_scaling_factor; // scaling factor for syn weights
} global_neuron_params_t;

// neuron state variables
typedef struct neuron_state_t {
    {%- for state in neuron.get_state_symbols() %}
        {{ declarations.get_domain_from_type(state.get_type_symbol()) }} {{ state.name }};
    {%- endfor %}
} neuron_state_t;

// neuron parameters from .nestml file and internal parameters
typedef struct neuron_params_t {

    {%- for parameter in neuron.get_parameter_symbols() |sort(attribute='name') %}
        {{ declarations.get_domain_from_type(parameter.get_type_symbol()) }} {{ parameter.name }};
    {%- endfor %}
{% if uses_numeric_solver == False %}
    {%- for propagator in neuron.get_internal_symbols() %}
    {% if propagator.name != "__h" %}
        {{ declarations.get_domain_from_type(propagator.get_type_symbol()) }} {{ propagator.name }};
    {% endif %}
    {%- endfor %}
{% endif %}
} neuron_params_t;

typedef struct neuron_impl_t {
    neuron_state_t state;
    neuron_params_t parameter;
} neuron_impl_t;

#endif // _NEURON_MODEL_{{ neuronName|upper }}_IMPL_H_

