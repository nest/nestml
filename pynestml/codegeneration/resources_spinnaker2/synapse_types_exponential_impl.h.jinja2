
#ifndef _SYNAPSE_TYPES_EXPONENTIAL_IMPL_H_
#define _SYNAPSE_TYPES_EXPONENTIAL_IMPL_H_
#define SYNAPSE_TYPE_BITS 1
#define SYNAPSE_TYPE_COUNT 2
typedef UFRACT decay_t;


typedef struct synapse_param_t {
    decay_t exc_decay;
    decay_t inh_decay;
} synapse_param_t;

#include "synapse_types.h"

typedef enum input_buffer_regions {
    EXCITATORY, INHIBITORY,
} input_buffer_regions;

static inline index_t _ex_offset(index_t neuron_index) {
    return synapse_types_get_input_buffer_index(EXCITATORY, neuron_index);
}

static inline index_t _in_offset(index_t neuron_index) {
    return synapse_types_get_input_buffer_index(INHIBITORY, neuron_index);
}

static inline decay_t _ex_decay(
        synapse_param_t *parameters, index_t neuron_index) {
    return (parameters[neuron_index].exc_decay);  //->__P__I_syn_exc__I_syn_exc
}

static inline decay_t _in_decay(
        synapse_param_t *parameters, index_t neuron_index) {
    return (parameters[neuron_index].inh_decay);  //->__P__I_syn_inh__I_syn_inh
}

static inline void synapse_types_add_neuron_input(
        input_t *input_buffers, index_t synapse_type_index,
        index_t neuron_index, input_t input) {
    if (synapse_type_index == EXCITATORY) {
        uint32_t index = _ex_offset(neuron_index);
        // log_info("input:%u\n", input);

        input_buffers[index] = input_buffers[index] + input;
    } else if (synapse_type_index == INHIBITORY) {
        uint32_t index = _in_offset(neuron_index);
        input_buffers[index] = input_buffers[index] + input;
    }
}

static inline input_t synapse_types_get_excitatory_input(
        input_t *input_buffers, index_t neuron_index) {
    return input_buffers[_ex_offset(neuron_index)];
}

static inline input_t synapse_types_get_inhibitory_input(
        input_t *input_buffers, index_t neuron_index) {
    return input_buffers[_in_offset(neuron_index)];
}
#endif  // _SYNAPSE_TYPES_EXPONENTIAL_IMPL_H_