#include "synapses.h"
#include "global_params.h"
#include "neuron_model_{{ neuronName }}_impl.h"
#include "spinn_log.h"

static weight_t ring_buffers[RING_BUFFER_SIZE];
input_t input_buffers[INPUT_BUFFER_SIZE];

extern neuron_params_t neuron_params_array[N_NEURONS];
extern global_neuron_params_t global_neuron_params __attribute__((aligned(0x10)));

extern volatile struct global_params* global_params_ptr;

static inline void _process_fixed_synapses(address_t fixed_region_address,
                                           uint32_t time) {
    register uint16_t *synaptic_words = (uint16_t*) synapse_row_fixed_weight_controls(
        fixed_region_address);
    register uint32_t fixed_synapse = synapse_row_num_fixed_synapses(
        fixed_region_address);

    for (; fixed_synapse > 0; fixed_synapse--) {

        uint16_t synaptic_word = *synaptic_words++;

        uint32_t delay = synapse_row_sparse_delay((uint32_t)synaptic_word);
        uint32_t combined_synapse_neuron_index = synapse_row_sparse_type_index(
                (uint32_t)synaptic_word);
        weight_t weight =(weight_t)((uint32_t) synapse_row_sparse_weight((uint32_t)synaptic_word));

        //log_info("\t\tweight: %i, delay %i, index %i\n",  weight, delay, combined_synapse_neuron_index);

        uint32_t ring_buffer_index = synapses_get_ring_buffer_index_combined(
            delay + time, combined_synapse_neuron_index);

        weight_t accumulation = ring_buffers[ring_buffer_index] + (weight * global_neuron_params.weight_scaling_factor);  // added weight_scaling factor here
        ring_buffers[ring_buffer_index] = accumulation;

    }
}

bool synapses_initialise() {

    for (uint32_t i = 0; i < INPUT_BUFFER_SIZE; i++) {
        input_buffers[i] = 0;
    }

    for (uint32_t i = 0; i < RING_BUFFER_SIZE; i++) {
        ring_buffers[i] = 0;
    }

    return true;
}

void synapses_reset(){

    for (uint32_t i = 0; i < INPUT_BUFFER_SIZE; i++) {
        input_buffers[i] = 0;
    }
    for (uint32_t i = 0; i < RING_BUFFER_SIZE; i++) {
        ring_buffers[i] = 0;
    }

}

void synapses_do_timestep_update(uint32_t time) {

    __disable_irq();

    uint32_t n_used_neurons = global_params_ptr->n_used_neurons;
    for (index_t neuron_index = 0; neuron_index < n_used_neurons; neuron_index++) {
        neuron_params_t* neuron_params = &neuron_params_array[neuron_index];

        input_buffers[_ex_offset(neuron_index)] =
            input_buffers[_ex_offset(neuron_index)] * neuron_params->__P__I_syn_exc__I_syn_exc;
        input_buffers[_in_offset(neuron_index)] =
            input_buffers[_in_offset(neuron_index)] * neuron_params->__P__I_syn_inh__I_syn_inh;

        for (uint32_t synapse_type_index = 0;
            synapse_type_index < SYNAPSE_TYPE_COUNT; synapse_type_index++)
        {
            uint32_t ring_buffer_index = synapses_get_ring_buffer_index(
                time, synapse_type_index, neuron_index);

            synapse_types_add_neuron_input(input_buffers, synapse_type_index,
                neuron_index,
                synapses_convert_weight_to_input(
                  ring_buffers[ring_buffer_index],0));
            ring_buffers[ring_buffer_index] = 0;
        }
    }

    __enable_irq();
}

bool synapses_process_synaptic_row(uint32_t time, synaptic_row_t row) {
    address_t fixed_region_address = synapse_row_fixed_region(row);
    _process_fixed_synapses(fixed_region_address, time);
    return true;
}
