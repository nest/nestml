{#-
cm_compartmentcurrents_@NEURON_NAME@.h.jinja2

This file is part of NEST.

Copyright (C) 2004 The NEST Initiative

NEST is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

NEST is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with NEST.  If not, see <http://www.gnu.org/licenses/>.
#}
{%- if tracing %}/* generated by {{self._TemplateReference__context.name}} */ {% endif %}
{%- import 'directives_cpp/FunctionDeclaration.jinja2' as function_declaration with context %}
#ifndef SYNAPSES_NEAT_H_{{cm_unique_suffix | upper }}
#define SYNAPSES_NEAT_H_{{cm_unique_suffix | upper }}

#include <stdlib.h>

#include "ring_buffer.h"

{% macro render_variable_type(variable) %}
{%- with %}
    {%- set symbol = variable.get_scope().resolve_to_symbol(variable.name, SymbolKind.VARIABLE) %}
    {{ types_printer.print(symbol.type_symbol) }}
{%- endwith %}
{%- endmacro %}

namespace nest
{

{%- for ion_channel_name, channel_info in chan_info.items() %}

class {{ion_channel_name}}{{cm_unique_suffix}}{
private:
    // states
    {%- for pure_variable_name, variable_info in channel_info["States"].items() %}
        {%- set variable = variable_info["ASTVariable"] %}
        {%- set rhs_expression = variable_info["rhs_expression"] %}
    {{ render_variable_type(variable) }} {{ variable.name }} = {{ printer_no_origin.print(rhs_expression) }};
    {%- endfor %}

    // parameters
    {%- for pure_variable_name, variable_info in channel_info["Parameters"].items() %}
        {%- set variable = variable_info["ASTVariable"] %}
        {%- set rhs_expression = variable_info["rhs_expression"] %}
    {{ render_variable_type(variable) }} {{ variable.name }} = {{ printer_no_origin.print(rhs_expression) }};
    {%- endfor %}

    // ion-channel root-inline value
    double i_tot_{{ion_channel_name}} = 0;

public:
    // constructor, destructor
    {{ion_channel_name}}{{cm_unique_suffix}}();
    {{ion_channel_name}}{{cm_unique_suffix}}(const DictionaryDatum& channel_params);
    ~{{ion_channel_name}}{{cm_unique_suffix}}(){};

    // initialization channel
{%- if nest_version.startswith("v2") or nest_version.startswith("v3.1") or nest_version.startswith("v3.2") or nest_version.startswith("v3.3") %}
    void calibrate() {
{%- else %}
    void pre_run_hook() {
{%- endif %}
    // states
    {%- for pure_variable_name, variable_info in channel_info["States"].items() %}
        {%- set variable = variable_info["ASTVariable"] %}
        {%- set rhs_expression = variable_info["rhs_expression"] %}
        {{ variable.name }} = {{ printer_no_origin.print(rhs_expression) }};
    {%- endfor %}
    };
    void append_recordables(std::map< Name, double* >* recordables,
                            const long compartment_idx);

    // numerical integration step
    std::pair< double, double > f_numstep( const double v_comp{% for ode in channel_info["Dependencies"]["concentrations"] %}, double {{ode.lhs.name}}{% endfor %}{% if channel_info["Dependencies"]["receptors"]|length %}
                        {% endif %}{% for inline in channel_info["Dependencies"]["receptors"] %}, double {{inline.variable_name}}{% endfor %}{% if channel_info["Dependencies"]["channels"]|length %}
                        {% endif %}{% for inline in channel_info["Dependencies"]["channels"] %}, double {{inline.variable_name}}{% endfor %});

    // function declarations

{%- for function in channel_info["Functions"] %}
    {{ function_declaration.FunctionDeclaration(function) }};
{%- endfor %}

    // root_inline getter
    double get_current_{{ion_channel_name}}();

};
{% endfor %}


////////////////////////////////////////////////// synapses

{% macro render_time_resolution_variable(synapse_info) %}
{# we assume here that there is only one such variable ! #}
{%- for analytic_helper_name, analytic_helper_info in synapse_info["analytic_helpers"].items() %}
{%- if analytic_helper_info["is_time_resolution"] %}
    {{ analytic_helper_name }}
{%- endif %}
{%- endfor %}
{%- endmacro %}

{%- for synapse_name, synapse_info in syns_info.items() %}

class {{synapse_name}}{{cm_unique_suffix}}{
private:
  // global synapse index
  long syn_idx = 0;

  // propagators, initialized via pre_run_hook() or calibrate()
  {%- for convolution, convolution_info in synapse_info["convolutions"].items() %}
  {%- for state_variable_name, state_variable_info in convolution_info["analytic_solution"]["propagators"].items()%}
  double {{state_variable_name}};
  {%- endfor %}
  {%- endfor %}

  // kernel state variables, initialized via pre_run_hook() or calibrate()
  {%- for convolution, convolution_info in synapse_info["convolutions"].items() %}
  {%- for state_variable_name, state_variable_info in convolution_info["analytic_solution"]["kernel_states"].items()%}
  double {{state_variable_name}};
  {%- endfor %}
  {%- endfor %}

  // user defined parameters, initialized via pre_run_hook() or calibrate()
  {%- for param_name, param_declaration in synapse_info["Parameters"].items() %}
  double {{param_name}};
  {%- endfor %}

      // states
    {%- for pure_variable_name, variable_info in synapse_info["States"].items() %}
        {%- set variable = variable_info["ASTVariable"] %}
        {%- set rhs_expression = variable_info["rhs_expression"] %}
  {{ render_variable_type(variable) }} {{ variable.name }} = {{ printer_no_origin.print(rhs_expression) }};
    {%- endfor %}
    double i_tot_{{synapse_name}} = 0;

  // user declared internals in order they were declared, initialized via pre_run_hook() or calibrate()
  {%- for internal_name, internal_declaration in synapse_info["internals_used_declared"] %}
  double {{internal_name}};
  {%- endfor %}



  // spike buffer
  RingBuffer* {{synapse_info["buffer_name"]}}_;

public:
  // constructor, destructor
  {{synapse_name}}{{cm_unique_suffix}}( const long syn_index);
  {{synapse_name}}{{cm_unique_suffix}}( const long syn_index, const DictionaryDatum& receptor_params);
  ~{{synapse_name}}{{cm_unique_suffix}}(){};

  long
  get_syn_idx()
  {
    return syn_idx;
  };

  // numerical integration step
  std::pair< double, double > f_numstep( const double v_comp, const long lag {% for ode in synapse_info["Dependencies"]["concentrations"] %}, double {{ode.lhs.name}}{% endfor %}{% if synapse_info["Dependencies"]["receptors"]|length %}
                        {% endif %}{% for inline in synapse_info["Dependencies"]["receptors"] %}, double {{inline.variable_name}}{% endfor %}{% if synapse_info["Dependencies"]["channels"]|length %}
                        {% endif %}{% for inline in synapse_info["Dependencies"]["channels"] %}, double {{inline.variable_name}}{% endfor %});

  // calibration
{%- if nest_version.startswith("v2") or nest_version.startswith("v3.1") or nest_version.startswith("v3.2") or nest_version.startswith("v3.3") %}
  void calibrate();
{%- else %}
  void pre_run_hook();
{%- endif %}
  void append_recordables(std::map< Name, double* >* recordables);
  void set_buffer_ptr( std::vector< RingBuffer >& syn_buffers )
  {
    {{synapse_info["buffer_name"]}}_ = &syn_buffers[ syn_idx ];
  };

  // function declarations
  {%- for function in synapse_info["Functions"] %}
  {{ function_declaration.FunctionDeclaration(function, "") -}};

  {% endfor %}

    // root_inline getter
    double get_current_{{synapse_name}}();
};


{% endfor %}

///////////////////////////////////////////// concentrations

{%- for concentration_name, concentration_info in conc_info.items() %}

class {{ concentration_name }}{{cm_unique_suffix}}{
private:
    // parameters
    {%- for pure_variable_name, variable_info in concentration_info["Parameters"].items() %}
        {%- set variable = variable_info["ASTVariable"] %}
        {%- set rhs_expression = variable_info["rhs_expression"] %}
    {{ render_variable_type(variable) }} {{ variable.name }} = {{ printer_no_origin.print(rhs_expression) }};
    {%- endfor %}

    // states
    {%- for pure_variable_name, variable_info in concentration_info["States"].items() %}
        {%- set variable = variable_info["ASTVariable"] %}
        {%- set rhs_expression = variable_info["rhs_expression"] %}
    {{ render_variable_type(variable) }} {{ variable.name }} = {{ printer_no_origin.print(rhs_expression) }};
    {%- endfor %}

    // concentration value (root-ode state)
    double {{concentration_name}} = 0;

public:
    // constructor, destructor
    {{ concentration_name }}{{cm_unique_suffix}}();
    {{ concentration_name }}{{cm_unique_suffix}}(const DictionaryDatum& concentration_params);
    ~{{ concentration_name }}{{cm_unique_suffix}}(){};

    // initialization channel
{%- if nest_version.startswith("v2") or nest_version.startswith("v3.1") or nest_version.startswith("v3.2") or nest_version.startswith("v3.3") %}
    void calibrate() {
{%- else %}
    void pre_run_hook() {
{%- endif %}
    // states
    {%- for pure_variable_name, variable_info in concentration_info["States"].items() %}
        {%- set variable = variable_info["ASTVariable"] %}
        {%- set rhs_expression = variable_info["rhs_expression"] %}
        {{ variable.name }} = {{ printer_no_origin.print(rhs_expression) }};
    {%- endfor %}
    };
    void append_recordables(std::map< Name, double* >* recordables,
                            const long compartment_idx);

    // numerical integration step
    void f_numstep( const double v_comp{% for ode in concentration_info["Dependencies"]["concentrations"] %}, double {{ode.lhs.name}}{% endfor %}{% if concentration_info["Dependencies"]["receptors"]|length %}
                        {% endif %}{% for inline in concentration_info["Dependencies"]["receptors"] %}, double {{inline.variable_name}}{% endfor %}{% if concentration_info["Dependencies"]["channels"]|length %}
                        {% endif %}{% for inline in concentration_info["Dependencies"]["channels"] %}, double {{inline.variable_name}}{% endfor %});

    // function declarations
{%- for function in concentration_info["Functions"] %}
    {{ function_declaration.FunctionDeclaration(function) }};
{%- endfor %}

    // root_ode getter
    double get_concentration_{{concentration_name}}();

};
{% endfor %}

///////////////////////////////////////////// currents

{%- set channel_suffix = "_chan_" %}
{%- set concentration_suffix = "_conc_" %}

class CompartmentCurrents{{cm_unique_suffix}} {
private:
  // ion channels
{% with %}
  {%- for ion_channel_name, channel_info in chan_info.items() %}
  {{ion_channel_name}}{{cm_unique_suffix}} {{ion_channel_name}}{{channel_suffix}};
  {% endfor %}
{% endwith %}

  // synapses
  {%- for synapse_name, synapse_info in syns_info.items() %}
  std::vector < {{synapse_name}}{{cm_unique_suffix}} > {{synapse_name}}_syns_;
  {% endfor %}

    //concentrations
{% with %}
  {%- for concentration_name, concentration_info in conc_info.items() %}
  {{concentration_name}}{{cm_unique_suffix}} {{concentration_name}}{{concentration_suffix}};
  {% endfor %}
{% endwith %}

public:
  CompartmentCurrents{{cm_unique_suffix}}(){};
  explicit CompartmentCurrents{{cm_unique_suffix}}(const DictionaryDatum& compartment_params)
  {
    {%- for ion_channel_name, channel_info in chan_info.items() %}
    {{ion_channel_name}}{{channel_suffix}} = {{ion_channel_name}}{{cm_unique_suffix}}( compartment_params );
    {% endfor %}

    {%- for concentration_name, concentration_info in conc_info.items() %}
    {{ concentration_name }}{{concentration_suffix}} = {{ concentration_name }}{{cm_unique_suffix}}( compartment_params );
    {% endfor %}
  };
  ~CompartmentCurrents{{cm_unique_suffix}}(){};

{%- if nest_version.startswith("v2") or nest_version.startswith("v3.1") or nest_version.startswith("v3.2") or nest_version.startswith("v3.3") %}
  void calibrate() {
{%- else %}
  void pre_run_hook() {
{%- endif %}
    // initialization of ion channels
    {%- for ion_channel_name, channel_info in chan_info.items() %}
{%- if nest_version.startswith("v2") or nest_version.startswith("v3.1") or nest_version.startswith("v3.2") or nest_version.startswith("v3.3") %}
    {{ion_channel_name}}{{channel_suffix}}.calibrate();
{%- else %}
    {{ion_channel_name}}{{channel_suffix}}.pre_run_hook();
{%- endif %}
    {% endfor %}

    // initialization of concentrations
    {%- for concentration_name, concentration_info in conc_info.items() %}
{%- if nest_version.startswith("v2") or nest_version.startswith("v3.1") or nest_version.startswith("v3.2") or nest_version.startswith("v3.3") %}
    {{ concentration_name }}{{concentration_suffix}}.calibrate();
{%- else %}
    {{ concentration_name }}{{concentration_suffix}}.pre_run_hook();
{%- endif %}
    {% endfor %}

    // initialization of synapses
  {%- for synapse_name, synapse_info in syns_info.items() %}
    // initialization of {{synapse_name}} synapses
    for( auto syn_it = {{synapse_name}}_syns_.begin();
         syn_it != {{synapse_name}}_syns_.end();
         ++syn_it )
    {
{%- if nest_version.startswith("v2") or nest_version.startswith("v3.1") or nest_version.startswith("v3.2") or nest_version.startswith("v3.3") %}
      syn_it->calibrate();
{%- else %}
      syn_it->pre_run_hook();
{%- endif %}
    }
  {% endfor %}
  };

  void add_synapse( const std::string& type, const long syn_idx )
  {
  {%- for synapse_name, synapse_info in syns_info.items() %}
    {% if not loop.first %}else{% endif %} if ( type == "{{synapse_name}}" )
    {
      {{synapse_name}}_syns_.push_back( {{synapse_name}}{{cm_unique_suffix}}( syn_idx ) );
    }
  {% endfor %}
    else
    {
      assert( false );
    }
  };
  void add_synapse( const std::string& type, const long syn_idx, const DictionaryDatum& receptor_params )
  {
  {%- for synapse_name, synapse_info in syns_info.items() %}
    {% if not loop.first %}else{% endif %} if ( type == "{{synapse_name}}" )
    {
      {{synapse_name}}_syns_.push_back( {{synapse_name}}{{cm_unique_suffix}}( syn_idx, receptor_params ) );
    }
  {% endfor %}
    else
    {
      assert( false );
    }
  };

  void
  add_receptor_info( ArrayDatum& ad, const long compartment_index )
  {
    {%- for synapse_name, synapse_info in syns_info.items() %}
    for( auto syn_it = {{synapse_name}}_syns_.begin(); syn_it != {{synapse_name}}_syns_.end(); syn_it++)
    {
      DictionaryDatum dd = DictionaryDatum( new Dictionary );
      def< long >( dd, names::receptor_idx, syn_it->get_syn_idx() );
      def< long >( dd, names::comp_idx, compartment_index );
      def< std::string >( dd, names::receptor_type, "{{synapse_name}}" );
      ad.push_back( dd );
    }
    {% endfor %}
  };

  void
  set_syn_buffers( std::vector< RingBuffer >& syn_buffers )
  {
    // spike buffers for synapses
    {%- for synapse_name, synapse_info in syns_info.items() %}
    for( auto syn_it = {{synapse_name}}_syns_.begin(); syn_it != {{synapse_name}}_syns_.end(); syn_it++)
      syn_it->set_buffer_ptr( syn_buffers );
    {% endfor %}
  };

  std::map< Name, double* >
  get_recordables( const long compartment_idx )
  {
    std::map< Name, double* > recordables;

    // append ion channel state variables to recordables
    {%- for ion_channel_name, channel_info in chan_info.items() %}
    {{ion_channel_name}}{{channel_suffix}}.append_recordables( &recordables, compartment_idx );
    {% endfor %}

    // append concentration state variables to recordables
    {%- for concentration_name, concentration_info in conc_info.items() %}
    {{concentration_name}}{{concentration_suffix}}.append_recordables( &recordables, compartment_idx );
    {% endfor %}

    // append synapse state variables to recordables
    {%- for synapse_name, synapse_info in syns_info.items() %}
    for( auto syn_it = {{synapse_name}}_syns_.begin(); syn_it != {{synapse_name}}_syns_.end(); syn_it++)
      syn_it->append_recordables( &recordables );
    {% endfor %}

    return recordables;
  };

  std::pair< double, double >
  f_numstep( const double v_comp, const long lag )
  {
    std::pair< double, double > gi(0., 0.);
    double g_val = 0.;
    double i_val = 0.;
{%- for synapse_name, synapse_info in syns_info.items() %}
    double {{synapse_name}}{{channel_suffix}}current_sum = 0;
    for( auto syn_it = {{synapse_name}}_syns_.begin();
         syn_it != {{synapse_name}}_syns_.end();
         ++syn_it )
    {
        {{synapse_name}}{{channel_suffix}}current_sum += syn_it->get_current_{{synapse_name}}();
    }
{% endfor %}

    {%- for concentration_name, concentration_info in conc_info.items() %}
    // computation of {{ concentration_name }} concentration
    {{ concentration_name }}{{concentration_suffix}}.f_numstep( v_comp{% for ode in concentration_info["Dependencies"]["concentrations"] %}, {{ode.lhs.name}}{{concentration_suffix}}.get_concentration_{{ode.lhs.name}}(){% endfor %}{% if concentration_info["Dependencies"]["receptors"]|length %}
                        {% endif %}{% for inline in concentration_info["Dependencies"]["receptors"] %}, {{inline.variable_name}}{{channel_suffix}}_current_sum{% endfor %}{% if concentration_info["Dependencies"]["channels"]|length %}
                        {% endif %}{% for inline in concentration_info["Dependencies"]["channels"] %}, {{inline.variable_name}}{{channel_suffix}}.get_current_{{inline.variable_name}}(){% endfor %});

    {% endfor %}

    {%- for ion_channel_name, channel_info in chan_info.items() %}
    // contribution of {{ion_channel_name}} channel
    gi = {{ion_channel_name}}{{channel_suffix}}.f_numstep( v_comp{% for ode in channel_info["Dependencies"]["concentrations"] %}, {{ode.lhs.name}}{{concentration_suffix}}.get_concentration_{{ode.lhs.name}}(){% endfor %}{% if channel_info["Dependencies"]["receptors"]|length %}
                        {% endif %}{% for inline in channel_info["Dependencies"]["receptors"] %}, {{inline.variable_name}}{{channel_suffix}}_current_sum{% endfor %}{% if channel_info["Dependencies"]["channels"]|length %}
                        {% endif %}{% for inline in channel_info["Dependencies"]["channels"] %}, {{inline.variable_name}}{{channel_suffix}}.get_current_{{inline.variable_name}}(){% endfor %});

    g_val += gi.first;
    i_val += gi.second;

    {% endfor %}

  {%- for synapse_name, synapse_info in syns_info.items() %}
    // contribution of {{synapse_name}} synapses
    for( auto syn_it = {{synapse_name}}_syns_.begin();
         syn_it != {{synapse_name}}_syns_.end();
         ++syn_it )
    {
      gi = syn_it->f_numstep( v_comp, lag {% for ode in synapse_info["Dependencies"]["concentrations"] %}, {{ode.lhs.name}}{{concentration_suffix}}.get_concentration_{{ode.lhs.name}}(){% endfor %}{% if synapse_info["Dependencies"]["receptors"]|length %}
                        {% endif %}{% for inline in synapse_info["Dependencies"]["receptors"] %}, {{inline.variable_name}}{{channel_suffix}}_current_sum{% endfor %}{% if synapse_info["Dependencies"]["channels"]|length %}
                        {% endif %}{% for inline in synapse_info["Dependencies"]["channels"] %}, {{inline.variable_name}}{{channel_suffix}}.get_current{{inline.variable_name}}(){% endfor %});

      g_val += gi.first;
      i_val += gi.second;
    }
  {% endfor %}

    return std::make_pair(g_val, i_val);
  };
};

} // namespace

#endif /* #ifndef SYNAPSES_NEAT_H_{{cm_unique_suffix | upper }} */
