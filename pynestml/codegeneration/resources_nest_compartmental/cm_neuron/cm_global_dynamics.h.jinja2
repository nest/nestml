///////////////////////////////////// global

#include <tuple>

{%- with %}

class Global{{cm_unique_suffix}}{
private:
    // states
    {%- for pure_variable_name, variable_info in global_info["States"].items() %}
        {%- set variable = variable_info["ASTVariable"] %}
        {%- set rhs_expression = variable_info["rhs_expression"] %}
    std::vector<{{ render_variable_type(variable) }}> {{ variable.name }};
    {%- endfor %}

    // parameters
    {%- for pure_variable_name, variable_info in global_info["Parameters"].items() %}
        {%- set variable = variable_info["ASTVariable"] %}
        {%- set rhs_expression = variable_info["rhs_expression"] %}
    std::vector<{{ render_variable_type(variable) }}> {{ variable.name }};
    {%- endfor %}

    // internals
    {%- for pure_variable_name, variable_info in global_info["Internals"].items() %}
        {%- set variable = variable_info["ASTVariable"] %}
        {%- set rhs_expression = variable_info["rhs_expression"] %}
    std::vector<{{ render_variable_type(variable) }}> {{ variable.name }};
    {%- endfor %}

      {%- with %}
  {%- for in_function_declaration in global_info["InFunctionDeclarationsVars"] %}
      {%- for variable in declarations.get_variables(in_function_declaration) %}
  std::vector<{{declarations.print_variable_type(variable)}}> {{variable.get_symbol_name()}};
      {%- endfor %}
  {%- endfor %}
  {%- endwith %}

    bool self_spikes = false;

public:
    // constructor, destructor
    Global{{cm_unique_suffix}}(){};
    ~Global{{cm_unique_suffix}}(){};

    // initialization global
{%- if nest_version.startswith("v2") or nest_version.startswith("v3.1") or nest_version.startswith("v3.2") or nest_version.startswith("v3.3") %}
    void calibrate() {
{%- else %}
    void pre_run_hook() {
{%- endif %}
    };

    void new_compartment();
    void new_compartment(const DictionaryDatum& channel_params);

    //number of channels
    std::size_t neuron_compartment_count = 0;

    void append_recordables(std::map< Name, double* >* recordables, const long compartment_idx);

    // numerical integration step
    void f_numstep(std::vector< double > v_comp);

    void f_self_spike();

    // function declarations

{%- for function in global_info["Functions"] %}
    #pragma omp declare simd
    __attribute__((always_inline)) inline {{ function_declaration.FunctionDeclaration(function) }};
{%- endfor %}

    // states getters
    {%- for pure_variable_name, variable_info in global_info["States"].items() %}
        {%- set variable = variable_info["ASTVariable"] %}
        {%- set rhs_expression = variable_info["rhs_expression"] %}
    std::vector<{{ render_variable_type(variable) }}> get_{{ variable.name }}(){
        return {{ variable.name }};
    };
    {%- endfor %}

    bool get_self_spikes(){
        return self_spikes;
    };

};
{% endwith -%}