///////////////////////////////////// global

{%- with %}

class Global{{cm_unique_suffix}}{
private:
    // states
    {%- for pure_variable_name, variable_info in global_info["States"].items() %}
        {%- set variable = variable_info["ASTVariable"] %}
        {%- set rhs_expression = variable_info["rhs_expression"] %}
    {{ render_variable_type(variable) }}& {{ variable.name }};
    {%- endfor %}

    // parameters
    {%- for pure_variable_name, variable_info in global_info["Parameters"].items() %}
        {%- set variable = variable_info["ASTVariable"] %}
        {%- set rhs_expression = variable_info["rhs_expression"] %}
    {{ render_variable_type(variable) }} {{ variable.name }} = {{printer_no_origin.print(rhs_expression)}};
    {%- endfor %}

    // internals
    {%- for pure_variable_name, variable_info in global_info["Internals"].items() %}
        {%- set variable = variable_info["ASTVariable"] %}
        {%- set rhs_expression = variable_info["rhs_expression"] %}
    {{ render_variable_type(variable) }} {{ variable.name }} = {{printer_no_origin.print(rhs_expression)}};
    {%- endfor %}

      {%- with %}
  {%- for in_function_declaration in global_info["InFunctionDeclarationsVars"] %}
      {%- for variable in declarations.get_variables(in_function_declaration) %}
  {{declarations.print_variable_type(variable)}} {{variable.get_symbol_name()}};
      {%- endfor %}
  {%- endfor %}
  {%- endwith %}

public:
    // constructor, destructor
    Global{{cm_unique_suffix}}({%- for pure_variable_name, variable_info in global_info["States"].items() %}
                                            {%- set variable = variable_info["ASTVariable"] %}
                                            {%- set rhs_expression = variable_info["rhs_expression"] %}
                                            {{ render_variable_type(variable) }}& init_{{ variable.name }}{% if not loop.last %}, {% endif %}
                                            {%- endfor %}
                                            );

    ~Global{{cm_unique_suffix}}(){};

    // initialization global
{%- if nest_version.startswith("v2") or nest_version.startswith("v3.1") or nest_version.startswith("v3.2") or nest_version.startswith("v3.3") %}
    void calibrate() {
{%- else %}
    void pre_run_hook() {
{%- endif %}
    };

    void append_recordables(std::map< Name, double* >* recordables, const long compartment_idx);

    // numerical integration step
    void f_numstep();

    bool f_self_spike();

    // function declarations

{%- for function in global_info["Functions"] %}
    {%- if not function.get_name() == global_info["SelfSpikesFunction"].get_name() %}
    #pragma omp declare simd
    __attribute__((always_inline)) inline {{ function_declaration.FunctionDeclaration(function) }};
    {%- endif %}
{%- endfor %}

};
{% endwith -%}