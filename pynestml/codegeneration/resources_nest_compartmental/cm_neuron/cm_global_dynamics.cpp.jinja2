{%- with %}
// Global channel //////////////////////////////////////////////////////////////////

void nest::Global{{cm_unique_suffix}}::new_compartment()
{
    {%- for pure_variable_name, variable_info in global_info["States"].items() %}
    // state variable {{pure_variable_name}}
    {%- set variable = variable_info["ASTVariable"] %}
    {%- set rhs_expression = variable_info["rhs_expression"] %}
    {{variable.name}}.push_back({{ vector_printer.print(rhs_expression, "neuron_compartment_count") -}});
    {%- endfor %}

    {% for variable_type, variable_info in global_info["Parameters"].items() %}
    // channel parameter {{variable_type }}
    {%- set variable = variable_info["ASTVariable"] %}
    {%- set rhs_expression = variable_info["rhs_expression"] %}
    {{variable.name}}.push_back({{ vector_printer.print(rhs_expression, "neuron_compartment_count") -}});
    {%- endfor %}

    {% for variable_type, variable_info in global_info["Internals"].items() %}
    // channel parameter {{variable_type }}
    {%- set variable = variable_info["ASTVariable"] %}
    {%- set rhs_expression = variable_info["rhs_expression"] %}
    {{variable.name}}.push_back({{ vector_printer.print(rhs_expression, "neuron_compartment_count") -}});
    {%- endfor %}

    {%- for in_function_declaration in global_info["InFunctionDeclarationsVars"] %}
    {%- for variable in declarations.get_variables(in_function_declaration) %}
    {{variable.name}}.push_back(0);
    {%- endfor %}
    {%- endfor %}

    neuron_compartment_count++;
}

void nest::Global{{cm_unique_suffix}}::new_compartment(const DictionaryDatum& global_params)
// update {{ion_channel_name}} channel parameters
{
    neuron_compartment_count++;

    {%- for pure_variable_name, variable_info in global_info["States"].items() %}
    // state variable {{pure_variable_name }}
    {%- set variable = variable_info["ASTVariable"] %}
    {%- set rhs_expression = variable_info["rhs_expression"] %}
    {{ variable.name}}.push_back({{ vector_printer.print(rhs_expression, "neuron_compartment_count-1") -}});
    {%- endfor %}

    {%- with %}
    {%- for variable_type, variable_info in global_info["States"].items() %}
        {%- set variable = variable_info["ASTVariable"] %}
        {%- set dynamic_variable = render_dynamic_channel_variable_name(variable_type, ion_channel_name) %}
    // {{ion_channel_name}} channel parameter {{dynamic_variable }}
    if( global_params->known( "{{variable.name}}" ) )
        {{variable.name}}[neuron_compartment_count-1] = getValue< double >( global_params, "{{variable.name}}" );
    {%- endfor %}
    {% endwith %}

    {%- with %}
    {%- for variable_type, variable_info in global_info["ODEs"].items() %}
        {%- set variable_name = variable_type %}
        {%- set dynamic_variable = render_dynamic_channel_variable_name(variable_type, ion_channel_name) %}
    // {{ion_channel_name}} channel ODE state {{dynamic_variable }}
    if( global_params->known( "{{variable_name}}" ) )
        {{variable_name}}[neuron_compartment_count-1] = getValue< double >( global_params, "{{variable_name}}" );
    {%- endfor %}
    {% endwith %}

    {% for variable_type, variable_info in global_info["Parameters"].items() %}
    // channel parameter {{variable_type }}
    {%- set variable = variable_info["ASTVariable"] %}
    {%- set rhs_expression = variable_info["rhs_expression"] %}
    {{ variable.name}}.push_back({{ vector_printer.print(rhs_expression, "neuron_compartment_count-1") -}});
    {%- endfor %}

    {%- with %}
    {%- for variable_type, variable_info in global_info["Parameters"].items() %}
        {%- set variable = variable_info["ASTVariable"] %}
        {%- set dynamic_variable = render_dynamic_channel_variable_name(variable_type, ion_channel_name) %}
    // {{ion_channel_name}} channel parameter {{dynamic_variable }}
    if( global_params->known( "{{variable.name}}" ) )
        {{variable.name}}[neuron_compartment_count-1] = getValue< double >( global_params, "{{variable.name}}" );
    {%- endfor %}
    {% endwith %}

    {%- for pure_variable_name, variable_info in global_info["Internals"].items() %}
    // state variable {{pure_variable_name }}
    {%- set variable = variable_info["ASTVariable"] %}
    {%- set rhs_expression = variable_info["rhs_expression"] %}
    {{ variable.name}}.push_back({{ vector_printer.print(rhs_expression, "neuron_compartment_count-1") -}});
    {%- endfor %}

    {%- for in_function_declaration in global_info["InFunctionDeclarationsVars"] %}
    {%- for variable in declarations.get_variables(in_function_declaration) %}
    {{variable.name}}.push_back(0);
    {%- endfor %}
    {%- endfor %}
}

void
nest::Global{{cm_unique_suffix}}::append_recordables(std::map< Name, double* >* recordables,
                                               const long compartment_idx)
{
  // add state variables to recordables map
  bool found_rec = false;
  {%- with %}
  {%- for pure_variable_name, variable_info in global_info["States"].items() %}
  {%- set variable = variable_info["ASTVariable"] %}
  found_rec = false;
  ( *recordables )[ Name( std::string("{{variable.name}}") + std::to_string(compartment_idx) )] = &{{variable.name}}[compartment_idx];
  {%- endfor %}
  {% endwith %}
}

void nest::Global{{cm_unique_suffix}}::f_numstep(std::vector< double > v_comp)
{
    {% if global_info["ODEs"].items()|length %}
    std::vector< double > {{ printer_no_origin.print(global_info["time_resolution_var"]) }}(neuron_compartment_count, Time::get_resolution().get_ms());
    {% endif %}

    {%- for ode_variable, ode_info in global_info["ODEs"].items() %}
            {%- for propagator, propagator_info in ode_info["transformed_solutions"][0]["propagators"].items() %}
    std::vector< double > {{ propagator }}(neuron_compartment_count, 0);
            {%- endfor %}
    {%- endfor %}

    for(std::size_t i = 0; i < neuron_compartment_count; i++){
        //update ODE state variable
        {%- for ode_variable, ode_info in global_info["ODEs"].items() %}
          {%- for propagator, propagator_info in ode_info["transformed_solutions"][0]["propagators"].items() %}
        {{ propagator }}[i] = {{ vector_printer.print(propagator_info["init_expression"], "i") }};
          {%- endfor %}
          {%- for state, state_solution_info in ode_info["transformed_solutions"][0]["states"].items() %}
        {{state}}[i] = {{ vector_printer.print(state_solution_info["update_expression"], "i") }};
          {%- endfor %}
        {%- endfor %}
        double __resolution = Time::get_resolution().get_ms();
        {%- if global_info["UpdateBlock"] %}
        {%- set function = global_info["UpdateBlock"] %}
        {%-   filter indent(2,True) %}
        {%-   with ast = function.get_block() %}
        {%- set printer = vector_printer %}
        {%-     include "cm_directives_cpp/Block.jinja2" %}
        {%-   endwith %}
        {%-   endfilter %}
        {%- endif %}
    }
    self_spikes = false;
}

void nest::Global{{cm_unique_suffix}}::f_self_spike()
{
    self_spikes = true;
    for(std::size_t i = 0; i < neuron_compartment_count; i++){
        double __resolution = Time::get_resolution().get_ms();
        {%- if global_info["SelfSpikesFunction"] %}
        {%- set function = global_info["SelfSpikesFunction"] %}
        {%-   filter indent(2,True) %}
        {%-   with ast = function.get_block() %}
        {%- set printer = vector_printer %}
        {%-     include "cm_directives_cpp/Block.jinja2" %}
        {%-   endwith %}
        {%-   endfilter %}
        {%- endif %}
    }
}

{%- for function in global_info["Functions"] %}
    {%-   filter indent(2,True) %}
    {%-   with ast = function.get_block() %}
    {%- set printer = printer_no_origin %}
    {%-     include "cm_directives_cpp/Block.jinja2" %}
    {%-   endwith %}
    {%-   endfilter %}
{%- endfor %}

// Global end ///////////////////////////////////////////////////////////
{% endwith %}