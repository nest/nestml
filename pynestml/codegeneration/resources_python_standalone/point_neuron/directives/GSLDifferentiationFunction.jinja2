{#
  Creates scipy odeint implementation of the differentiation step for the system of ODEs.
#}
@staticmethod
def dynamics(t: float, ode_state: List[float], args: Tuple[Any]) -> List[float]:
  # ode_state[] here is---and must be---the state vector supplied by the integrator, not the state vector in the node, node.S_.ode_state[].
  node = args

  dim: int = len(ode_state)
  f = np.empty(dim, dtype=float)

{%- for equations_block in neuron.get_equations_blocks() %}
{%-   for ode in equations_block.get_declarations() %}
{%-     for inline_expr in utils.get_inline_expression_symbols(ode) %}
{%-       if not inline_expr.is_equation() %}
{%-         set declaring_expr = inline_expr.get_declaring_expression() %}
  double {{ printer.print(utils.get_variable_by_name(astnode, inline_expr)) }} = {{ gsl_printer.print(declaring_expr) }}
{%-       endif %}
{%-     endfor %}
{%-   endfor %}
{%- endfor %}

{%- for variable_name in numeric_state_variables %}
{%-   set update_expr = numeric_update_expressions[variable_name] %}
{%-   set variable_symbol = variable_symbols[variable_name] %}
  f[node.S_.ode_state_variable_name_to_index["{{variable_symbol.name}}"]] = {{ gsl_printer.print(update_expr) }}
{%- endfor %}
{%- if paired_synapse is defined %}
{%- for variable_name in numeric_state_variables_moved %}
{%-   set update_expr = numeric_update_expressions[variable_name] %}
{%-   set variable_symbol = neuron.get_scope().resolve_to_symbol(variable_name, SymbolKind.VARIABLE) %}
  f[node.S_.ode_state_variable_name_to_index["{{variable_symbol.name}}"]] = {{gsl_printer.print(update_expr)}}
{%- endfor %}
{%- endif %}

  return f
  