{#-
@NEURON_NAME@.py.jinja2

This file is part of NEST.

Copyright (C) 2004 The NEST Initiative

NEST is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

NEST is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with NEST.  If not, see <http://www.gnu.org/licenses/>.
#}
{%- import 'directives/FunctionDeclaration.jinja2' as function_declaration with context %}
"""
{{neuronName}}.py

This file is part of NEST.

Copyright (C) 2004 The NEST Initiative

NEST is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

NEST is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with NEST.  If not, see <http://www.gnu.org/licenses/>.

Generated from NESTML at time: {{now}}
"""

{% if tracing %}# generated by {{self._TemplateReference__context.name}}
{% endif -%}

from typing import Any, List, Mapping, Tuple

import math
from math import *
import numpy as np
import scipy
import scipy.integrate

from .neuron import Neuron
from .utils import steps

DEBUG = 1


{%- set stateSize = neuron.get_non_inline_state_symbols()|length %}

class Neuron_{{neuronName}}(Neuron):

  class Parameters_:
{%- filter indent(4,True) %}
{%- for variable_symbol in neuron.get_parameter_symbols() %}
{%-   set variable = utils.get_variable_by_name(astnode, variable_symbol.get_symbol_name()) %}
{%-   include 'directives/MemberDeclaration.jinja2' %}
{%- endfor %}
{%- endfilter %}

  class State_:
{%- if numeric_state_variables|length > 0 %}
    ode_state = np.nan * np.ones({{ numeric_state_variables|length }})
    ode_state_variable_name_to_index = {
{%- for var_name in numeric_state_variables %}
"{{ var_name }}" : {{ loop.index - 1 }},
{%- endfor %}
      }

{% endif %}
{%- filter indent(4,True) %}
{%- for variable_symbol in neuron.get_state_symbols() %}
{%-   set variable = utils.get_variable_by_name(astnode, variable_symbol.get_symbol_name()) %}
{%-   include 'directives/MemberDeclaration.jinja2' %}
{%- endfor %}
{%- endfilter %}

  class Variables_:
{%- filter indent(4,True) %}
{%- for variable_symbol in neuron.get_internal_symbols() %}
{%-   set variable = utils.get_variable_by_name(astnode, variable_symbol.get_symbol_name()) %}
{%-   include "directives/MemberDeclaration.jinja2" %}
{%- endfor %}
{%- endfilter %}

  class Buffers_:
{%- if neuron.get_spike_input_ports() | length > 0 %}
    # spiking input ports
{%- endif %}
{%- for port in neuron.get_spike_input_ports() %}
{%-     if port.has_vector_parameter() %}
    {{ port.get_symbol_name() }}: List[float] = []
{%-     else %}
    {{ port.get_symbol_name() }}: float = 0.
{%-     endif %}
{%- endfor %}

{%- if neuron.get_continuous_input_ports() | length > 0 %}
    # continuous input ports
{%- endif %}
{%- for port in neuron.get_continuous_input_ports() %}
{%-     if port.has_vector_parameter() %}
    {{ port.get_symbol_name() }}: List[float] = []
{%-     else %}
    {{ port.get_symbol_name() }}: float = 0.
{%-     endif %}
{%- endfor %}


  def __init__(self, timestep: float):
    super().__init__()

    self.P_ = self.Parameters_()
    self.S_ = self.State_()
    self.V_ = self.Variables_()
    self.B_ = self.Buffers_()

{%- if parameter_vars_with_iv|length > 0 %}
    # initial values for parameters
{%- filter indent(4) %}
{%- for variable in parameter_vars_with_iv %}
{%-   set variable_symbol = neuron.get_scope().resolve_to_symbol(variable.get_name(), SymbolKind.VARIABLE) %}
{%-   include "directives/MemberInitialization.jinja2" %}
{%- endfor %}
{%- endfilter %}
{%- endif %}

{%- if neuron.get_state_symbols()|length > 0 %}
    # initial values for state variables
{%- filter indent(4) %}
{%- for variable_symbol in neuron.get_state_symbols() %}
{%-   set variable = utils.get_variable_by_name(astnode, variable_symbol.get_symbol_name()) %}
{%-   include "directives/MemberInitialization.jinja2" %}
{%- endfor %}
{%- endfilter %}
{%- endif %}

    self._timestep = timestep
    self.recompute_internal_variables(self._timestep)

{%- if paired_synapse is defined %}
    # -----------------------------
    #    code for paired synapse
    # -----------------------------

    # state variables for archiving state for paired synapse
    self.n_incoming_ = 0.
    self.max_delay_ = 0.
    self.last_spike_ = -1.

    # cache initial values
{%- for var in transferred_variables %}
{%-   set variable_symbol = transferred_variables_syms[var] %}
{%-   set variable = utils.get_variable_by_name(astnode, variable_name) %}
{%-   if not var == variable_symbol.get_symbol_name() %}
    {{ raise('Error in resolving variable to symbol') }}
{%-   endif %}
    {{var}}__iv = get_{{ printer.print(variable) }}()
{%- endfor %}

    self.clear_history()
{%- endif %}

  def get_model(self) -> str:
    return "{{neuronName}}"

  def recompute_internal_variables(self, timestep: float, exclude_timestep: bool = False):
    __resolution: float = timestep  # do not remove, this is necessary for the resolution() function

    if exclude_timestep:
  {%- filter indent(6,True) %}
  {%- for variable_symbol in neuron.get_internal_symbols() %}
  {%-   set variable = utils.get_variable_by_name(astnode, variable_symbol.get_symbol_name()) %}
  {%-   if variable.name != "__h" %}
  {%-     include "directives/MemberInitialization.jinja2" %}
  {%-   endif %}
  {%- endfor %}
  {%- endfilter %}
    else:
      # internals V_
  {%- filter indent(6) %}
  {%- for variable_symbol in neuron.get_internal_symbols() %}
  {%-   set variable = utils.get_variable_by_name(astnode, variable_symbol.get_symbol_name()) %}
  {%-   include "directives/MemberInitialization.jinja2" %}
  {%- endfor %}
  {%- endfilter %}

{%- if neuron.get_functions()|length > 0 %}

  # ---------------------------------------------------------------------------
  #   Functions defined in the NESTML model
  # ---------------------------------------------------------------------------
{% for function in neuron.get_functions() -%}
  {{ function_declaration.FunctionDeclaration(function, neuronName) }}:
{%-   filter indent(4,True) %}
{%-   with ast = function.get_block() %}
{%-     include "directives/Block.jinja2" %}
{%-   endwith %}
{%-   endfilter %}
{%- endfor %}
{%- endif %}

  # -------------------------------------------------------------------------
  #   Getters/setters for state block
  # -------------------------------------------------------------------------
{% filter indent(2, True) -%}
{%- for variable_symbol in neuron.get_state_symbols() %}
{%-   if not is_delta_kernel(neuron.get_kernel_by_name(variable_symbol.get_symbol_name())) %}
{%-     set variable = utils.get_variable_by_name(astnode, variable_symbol.get_symbol_name()) %}
{%-     include "directives/MemberVariableGetterSetter.jinja2" %}
{%-   endif %}
{%- endfor %}
{%- endfilter %}

  # -------------------------------------------------------------------------
  #   Getters/setters for parameters block
  # -------------------------------------------------------------------------
{% filter indent(2, True) -%}
{%- for variable_symbol in neuron.get_parameter_symbols() %}
{%-   set variable = utils.get_variable_by_name(astnode, variable_symbol.get_symbol_name()) %}
{%-   include "directives/MemberVariableGetterSetter.jinja2" %}
{%- endfor %}
{%- endfilter %}

{%- if uses_numeric_solver %}
  # -------------------------------------------------------------------------
  #   Numeric solver stepping function
  # -------------------------------------------------------------------------

{% filter indent(2) %}
{%- include "directives/GSLDifferentiationFunction.jinja2" %}
{%- endfilter %}
{%- endif %}

{% if neuron.get_equations_blocks()|length > 0 %}
  # -------------------------------------------------------------------------
  #   Numeric + analytic solver stepping function
  # -------------------------------------------------------------------------

  def _integrate_odes(self, origin: float, timestep: float):
    r"""Integrate all ODEs defined in the model equation block by one timestep.
    """
{%- filter indent(4) %}
{%-     with analytic_state_variables_ = analytic_state_variables %}
{%-         include "directives/AnalyticIntegrationStep_begin.jinja2" %}
{%-     endwith %}
{%-     if uses_numeric_solver %}
{%-        include "directives/GSLIntegrationStep.jinja2" %}
{%-     endif %}
{%-     with analytic_state_variables_ = analytic_state_variables %}
{%-         include "directives/AnalyticIntegrationStep_end.jinja2" %}
{%-     endwith %}
{%- endfilter %}
{%- endif %}

  def step(self, origin: float, timestep: float) -> None:
    __resolution: float = timestep   # do not remove, this is necessary for the resolution() function

    # -------------------------------------------------------------------------
    #     NESTML generated code for the update block
    # -------------------------------------------------------------------------

{% if neuron.get_update_blocks()|length > 0 %}
{%- filter indent(4) %}
{%- for dynamics in neuron.get_update_blocks() %}
{%-   set ast = dynamics.get_block() %}
{%-   include "directives/Block.jinja2" %}
{%- endfor %}
{%- endfilter %}
{%- endif %}

    # -------------------------------------------------------------------------
    #     Clear spike buffers at end of timestep
    # -------------------------------------------------------------------------

{%- for port in neuron.get_spike_input_ports() %}
    self.B_.{{port.get_symbol_name()}} = 0.
{%- endfor %}


{% if has_spike_input %}
  # -------------------------------------------------------------------------
  #   Spiking input handlers
  # -------------------------------------------------------------------------

  def handle(self, t_spike: float, w: float, port_name: str) -> None:
{%-   for port in neuron.get_spike_input_ports() %}
    if port_name == "{{port.name}}":
      self.B_.{{port.get_symbol_name()}} += abs(w)
      return
{%-   endfor %}
{%- endif %}
    raise Exception("Received a spike on unknown input port \"" + port_name + "\" at t = " + "{0:E}".format(t_spike))

  def get_spiking_input_ports(self) -> List[str]:
    return [
{%- for port in neuron.get_spike_input_ports() %}
            "{{port.name}}",
{%- endfor %}
    ]
