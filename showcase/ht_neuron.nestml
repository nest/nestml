/*
   Name: ht_neuron - Neuron model after Hill & Tononi (2005).

   Description:
   This model neuron implements a slightly modified version of the
   neuron model described in [1]. The most important properties are:

   - Integrate-and-fire with threshold that is increased on spiking
     and decays back to an equilibrium value.
   - No hard reset, but repolarizing potassium current.
   - AMPA, NMDA, GABA_A, and GABA_B conductance-based synapses with
     beta-function (difference of two exponentials) time course.
   - Intrinsic currents I_h (pacemaker), I_T (low-threshold calcium),
     I_Na(p) (persistent sodium), and I_KNa (depolarization-activated
     potassium).

   In comparison to the model described in the paper, the following
   modifications were mare:

   - NMDA conductance is given by g(t) = g_peak * m(V), where

       m(V) = 1 / ( 1 + exp( - ( V - NMDA_Vact ) / NMDA_Sact ) )

     This is an approximation to the NMDA model used in [2].

   - Several apparent typographical errors in the descriptions of
     the intrinsic currents were fixed, hopefully in a meaningful
     way.

   I'd like to thank Sean Hill for giving me access to his
   simulator source code.

   See examples/hilltononi for usage examples.

   Warning:
   THIS MODEL NEURON HAS NOT BEEN TESTED EXTENSIVELY!

   Parameters:
   V_m            -  membrane potential
   spike_duration - duration of re-polarizing potassium current
   Tau_m          - membrane time constant applying to all currents but
                    repolarizing K-current (see [1, p 1677])
   Tau_spike      - membrane time constant applying to repolarizing K-current
   Theta, Theta_eq, Tau_theta - Threshold, equilibrium value, time constant
   g_KL, E_K, g_NaL, E_Na     - conductances and reversal potentials for K and
   Na
                                leak currents

   Author: Hans Ekkehard Plesser

   Sends: SpikeEvent

   Receives: SpikeEvent, CurrentEvent, DataLoggingRequest

   FirstVersion: October 2009

   References:
   [1] S Hill and G Tononi (2005). J Neurophysiol 93:1671-1698.
   [2] ED Lumer, GM Edelman, and G Tononi (1997). Cereb Cortex 7:207-227.

   SeeAlso: ht_synapse
*/
neuron ht_neuron_nestml:

  state:
    V_m mV = ( g_NaL * E_Na + g_KL * E_K ) / ( g_NaL + g_KL ) # membrane potential
    Theta mV = Theta_eq # Threshold
    g_AMPA, g_NMDA, g_GABAA, g_GABAB, IKNa_D, IT_m, IT_h, Ih_m nS

    r_potassium integer
    g_spike boolean = false
  end

  equations:
    #############
    # V_m
    #############
    function I_syn_ampa pA = -g_AMPA * ( V_m - AMPA_E_rev )
    function I_syn_nmda pA = -g_NMDA * ( V_m - NMDA_E_rev ) / ( 1 + exp( ( NMDA_Vact - V_m ) / NMDA_Sact ) )
    function I_syn_gaba_a pA = -g_GABAA * ( V_m - GABA_A_E_rev )
    function I_syn_gaba_b pA = -g_GABAB * ( V_m - GABA_B_E_rev )
    function I_syn pA = I_syn_ampa + I_syn_nmda + I_syn_gaba_a + I_syn_gaba_b

    # I_Na(p), m_inf^3 according to Compte et al, J Neurophysiol 2003 89:2707
    function INaP_thresh mV = -55.7pA
    function INaP_slope mV = 7.7pA
    function m_inf_NaP real = 1.0 / ( 1.0 + exp( -( V_m - INaP_thresh ) / INaP_slope ) )
    # Persistent Na current; member only to allow recording
    recordable function I_NaP pA = -NaP_g_peak * pow( m_inf_NaP, 3.0 )* ( V_m - NaP_E_rev )

    function d_half real = 0.25
    function m_inf_KNa real = 1.0 / ( 1.0 + pow( d_half / IKNa_D, 3.5 ) )
    # Depol act. K current; member only to allow recording
    recordable function  I_KNa pA = -KNa_g_peak * m_inf_KNa * ( V_m - KNa_E_rev )

    # Low-thresh Ca current; member only to allow recording
    recordable function  I_T pA = -T_g_peak * IT_m * IT_m * IT_h * ( V_m - T_E_rev )

    recordable function I_h pA = -h_g_peak * Ih_m  * ( V_m - h_E_rev )
    # The spike current is only activate immediately after a spike.
    function I_spike mV = (g_spike) ? -( V_m - E_K ) / Tau_spike : 0
    V_m'  = ( I_Na + I_K + I_syn + I_NaP + I_KNa + I_T + I_h + I_stim ) / Tau_m + I_spike

    #############
    # Intrinsic currents
    #############
    # I_T
    function m_inf_T real = 1.0 / ( 1.0 + exp( -( V_m + 59.0 ) / 6.2 ) )
    function h_inf_T real = 1.0 / ( 1.0 + exp( ( V_m + 83.0 ) / 4 ) )
    function tau_m_h real = 1.0 / ( exp( -14.59 - 0.086 * V_m ) + exp( -1.87 + 0.0701 * V_m ) )
    # I_KNa
    function D_influx_peak real = 0.025
    function tau_D real = 1250.0 # yes, 1.25s
    function D_thresh real = -10.0
    function D_slope real = 5.0
    function D_influx real = 1.0 / ( 1.0 + exp( -( V_m - D_thresh ) / D_slope ) )

    function I_Na real = -g_NaL * ( V_m - E_Na )
    function I_K real = -g_KL * ( V_m - E_K )

    Theta' = -( Theta - Theta_eq ) / Tau_theta

    # equation modified from y[](1-D_eq) to (y[]-D_eq), since we'd not
    # be converging to equilibrium otherwise
    IKNa_D' = D_influx_peak * D_influx - ( IKNa_D  - KNa_D_EQ ) / tau_D

    function tau_m_T real = 0.22 / ( exp( -( V_m + 132.0 ) / 16.7 ) + exp( ( V_m + 16.8 ) / 18.2 ) ) + 0.13
    function tau_h_T real = 8.2 + ( 56.6 + 0.27 * exp( ( V_m + 115.2 ) / 5.0 ) ) / ( 1.0 + exp( ( V_m + 86.0 ) / 3.2 ) )
    function I_h_Vthreshold real = -75.0
    function m_inf_h real = 1.0 / ( 1.0 + exp( ( V_m - I_h_Vthreshold ) / 5.5 ) )
    IT_m' = ( m_inf_T - IT_m ) / tau_m_T
    IT_h' = ( h_inf_T - IT_h ) / tau_h_T
    Ih_m' = ( m_inf_h - Ih_m ) / tau_m_h

    #############
    # Synapses
    #############
    g_AMPA'' = -g_AMPA' / AMPA_Tau_1
    g_AMPA' = g_AMPA' - g_AMPA  / AMPA_Tau_2

    g_NMDA'' = -g_NMDA' / NMDA_Tau_1
    g_NMDA' = g_NMDA' - g_NMDA / NMDA_Tau_2

    g_GABAA'' = -g_GABAA' / GABA_A_Tau_1
    g_GABAA' = g_GABAA' - g_GABAA / GABA_A_Tau_2

    g_GABAB'' = -g_GABAB' / GABA_B_Tau_1
    g_GABAB' = g_GABAB' - g_GABAB /GABA_B_Tau_2
  end

  parameters:
    E_Na mV = 30.0mV
    E_K mV = -90.0mV
    g_NaL nS =  0.2nS
    g_KL nS = 1.0nS       # 1.0 - 1.85
    Tau_m ms = 16.0ms     # membrane time constant applying to all currents but repolarizing K-current (see [1, p 1677])
    Theta_eq mV = -51.0mV # equilibrium value
    Tau_theta ms = 2.0ms  # time constant
    Tau_spike ms = 1.75ms # membrane time constant applying to repolarizing K-current
    t_spike ms = 2.0ms    # duration of re-polarizing potassium current

    # Parameters for synapse of type AMPA, GABA_A, GABA_B and NMDA
    AMPA_g_peak nS = 0.1nS      # peak conductance
    AMPA_E_rev mV = 0.0mV       # reversal potential
    AMPA_Tau_1 ms = 0.5ms       # rise time
    AMPA_Tau_2 ms = 2.4ms       # decay time, Tau_1 < Tau_2
    NMDA_g_peak nS = 0.075nS    # peak conductance
    NMDA_Tau_1 ms = 4.0ms       # rise time
    NMDA_Tau_2 ms = 40.0ms      # decay time, Tau_1 < Tau_2
    NMDA_E_rev mV = 0.0mV       # reversal potential
    NMDA_Vact mV = -58.0mV      # inactive for V << Vact, inflection of sigmoid
    NMDA_Sact mV = 2.5mV        # scale of inactivation
    GABA_A_g_peak nS = 0.33nS   # peak conductance
    GABA_A_Tau_1 ms = 1.0ms     # rise time
    GABA_A_Tau_2 ms = 7.0ms     # decay time, Tau_1 < Tau_2
    GABA_A_E_rev mV = -70.0mV   # reversal potential
    GABA_B_g_peak nS = 0.0132nS # peak conductance
    GABA_B_Tau_1 ms = 60.0ms    # rise time
    GABA_B_Tau_2 ms = 200.0ms   # decay time, Tau_1 < Tau_2
    GABA_B_E_rev mV = -90.0mV   # reversal potential for intrinsic current

    # parameters for intrinsic currents
    NaP_g_peak nS = 1.0nS       # peak conductance for intrinsic current
    NaP_E_rev mV = 30.0mV       # reversal potential for intrinsic current
    KNa_g_peak nS = 1.0nS       # peak conductance for intrinsic current
    KNa_E_rev mV = -90.0mV      # reversal potential for intrinsic current
    T_g_peak nS = 1.0nS         # peak conductance for intrinsic current
    T_E_rev mV = 0.0mV          # reversal potential for intrinsic current
    h_g_peak nS = 1.0nS         # peak conductance for intrinsic current
    h_E_rev mV = -40.0mV        # reversal potential for intrinsic current
    KNa_D_EQ pA = 0.001pA
  end

  internals:
    AMPAInitialValue real = compute_synapse_constant( AMPA_Tau_1, AMPA_Tau_2, AMPA_g_peak )
    NMDAInitialValue real = compute_synapse_constant( NMDA_Tau_1, NMDA_Tau_2, NMDA_g_peak )

    GABA_AInitialValue real = compute_synapse_constant( GABA_A_Tau_1, GABA_A_Tau_2, GABA_A_g_peak )
    GABA_BInitialValue real = compute_synapse_constant( GABA_B_Tau_1, GABA_B_Tau_2, GABA_B_g_peak )
    PotassiumRefractoryCounts integer = steps(t_spike)
    # Input current injected by CurrentEvent.
    # This variable is used to transport the current applied into the
    # _dynamics function computing the derivative of the state vector.
    I_stim pA = 0pA
  end

  input:
      AMPA   <- spike
      NMDA   <- spike
      GABA_A <- spike
      GABA_B <- spike
      currents <- current
  end

  output: spike

  update:
    integrate_odes()

    # Deactivate potassium current after spike time have expired
    if (r_potassium > 0) and (r_potassium-1 == 0):
      g_spike = false # Deactivate potassium current.
    end
    r_potassium -= 1

    g_AMPA' += AMPAInitialValue * AMPA
    g_NMDA' += NMDAInitialValue * NMDA
    g_GABAA' += GABA_AInitialValue * GABA_A
    g_GABAB' += GABA_BInitialValue * GABA_B

    if (not g_spike) and V_m >= Theta:
      # Set V and Theta to the sodium reversal potential.
      V_m = E_Na
      Theta = E_Na

      # Activate fast potassium current. Drives the
      # membrane potential towards the potassium reversal
      # potential (activate only if duration is non-zero).
      if PotassiumRefractoryCounts > 0:
        g_spike = true
      else:
        g_spike = false
      end

      r_potassium = PotassiumRefractoryCounts

      emit_spike()
    end

    I_stim = currents.get_sum()
  end

  function compute_synapse_constant(Tau_1 ms, Tau_2 ms, g_peak real) real:
    # Factor used to account for the missing 1/((1/Tau_2)-(1/Tau_1)) term
    # in the ht_neuron_dynamics integration of the synapse terms.
    # See: Exact digital simulation of time-invariant linear systems
    # with applications to neuronal modeling, Rotter and Diesmann,
    # section 3.1.2.
    exact_integration_adjustment real = ( 1 / Tau_2 ) - ( 1 / Tau_1 )

    t_peak real = ( Tau_2 * Tau_1 ) * log( Tau_2 / Tau_1 ) / ( Tau_2 - Tau_1 )
    normalisation_factor real = 1 / ( exp( -t_peak / Tau_1 ) - exp( -t_peak / Tau_2 ) )

    return g_peak * normalisation_factor * exact_integration_adjustment
  end

end
