/* generated by template org.nest.nestml.neuron.NeuronHeader*/
/*
*  iaf_cond_alpha_implicit.h
*
*  This file is part of NEST.
*
*  Copyright (C) 2004 The NEST Initiative
*
*  NEST is free software: you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation, either version 2 of the License, or
*  (at your option) any later version.
*
*  NEST is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  You should have received a copy of the GNU General Public License
*  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
*
*/
#ifndef IAF_COND_ALPHA_IMPLICIT
#define IAF_COND_ALPHA_IMPLICIT
#include "config.h"

#ifdef HAVE_GSL
#include <gsl/gsl_errno.h>
#include <gsl/gsl_matrix.h>
#include <gsl/gsl_odeiv.h>
// forwards the declaration of the function
extern "C" inline int iaf_cond_alpha_implicit_dynamics(double, const double y[],
                                                       double f[], void *pnode);

// Includes from nestkernel:
#include "archiving_node.h"
#include "connection.h"
#include "event.h"
#include "nest_types.h"
#include "ring_buffer.h"
#include "universal_data_logger.h"

// Includes from sli:
#include "dictdatum.h"

/* BeginDocumentation
Name: iaf_cond_alpha_implicit.

//
Name: iaf_cond_alpha_implicit - Simple conductance based leaky
integrate-and-fire neuron
                       model.

Description:
iaf_cond_alpha is an implementation of a spiking neuron using IAF dynamics with
conductance-based synapses. Incoming spike events induce a post-synaptic change
of conductance modelled by an alpha function. The alpha function
is normalised such that an event of weight 1.0 results in a peak current of 1 nS
at t = tau_syn.

Sends: SpikeEvent

Receives: SpikeEvent, CurrentEvent, DataLoggingRequest

References:

Meffin, H., Burkitt, A. N., & Grayden, D. B. (2004). An analytical
model for the large, fluctuating synaptic conductance state typical of
neocortical neurons in vivo. J.  Comput. Neurosci., 16, 159-175.

Bernander, O ., Douglas, R. J., Martin, K. A. C., & Koch, C. (1991).
Synaptic background activity influences spatiotemporal integration in
single pyramidal cells.  Proc. Natl. Acad. Sci. USA, 88(24),
11569-11573.

Kuhn, Aertsen, Rotter (2004) Neuronal Integration of Synaptic Input in
the Fluctuation- Driven Regime. Jneurosci 24(10) 2345-2356

Author: Schrader, Plesser

SeeAlso: iaf_cond_exp, iaf_cond_alpha_mc
//

Parameters:

Remarks:
Empty

References:
Empty

Sends: nest::SpikeEvent

Receives: Spike, Current,  DataLoggingRequest

SeeAlso:

Empty
*/
class iaf_cond_alpha_implicit : public nest::Archiving_Node {
public:
  /**
  * The constructor is only used to create the model prototype in the model
  * manager.
  */
  iaf_cond_alpha_implicit();

  /**
  * The copy constructor is used to create model copies and instances of the
  * model.
  * @node The copy constructor needs to initialize the parameters and the state.
  *       Initialization of buffers and interal variables is deferred to
  *       @c init_buffers_() and @c calibrate().
  */
  iaf_cond_alpha_implicit(const iaf_cond_alpha_implicit &);

  /**
  * Releases resources.
  */
  ~iaf_cond_alpha_implicit();
  /**
  * Import sets of overloaded virtual functions.
  * This is necessary to ensure proper overload and overriding resolution.
  * @see http://www.gotw.ca/gotw/005.htm.
  */
  using nest::Node::handles_test_event;
  using nest::Node::handle;

  /**
  * Used to validate that we can send nest::SpikeEvent to desired target:port.
  */
  nest::port send_test_event(nest::Node &target, nest::rport receptor_type,
                             nest::synindex, bool);

  /**
  * @defgroup mynest_handle Functions handling incoming events.
  * We tell nest that we can handle incoming events of various types by
  * defining @c handle() and @c connect_sender() for the given event.
  * @{
  */
  void handle(nest::SpikeEvent &);         //! accept spikes
  void handle(nest::CurrentEvent &);       //! accept input current
  void handle(nest::DataLoggingRequest &); //! allow recording with multimeter

  nest::port handles_test_event(nest::SpikeEvent &, nest::port);
  nest::port handles_test_event(nest::CurrentEvent &, nest::port);
  nest::port handles_test_event(nest::DataLoggingRequest &, nest::port);
  /** @} */

  // SLI communication functions:
  void get_status(DictionaryDatum &) const;
  void set_status(const DictionaryDatum &);

private:
  //! Reset parameters and state of neuron.

  //! Reset state of neuron.
  void init_state_(const Node &proto);

  //! Reset internal buffers of neuron.
  void init_buffers_();

  //! Initialize auxiliary quantities, leave parameters and state untouched.
  void calibrate();

  //! Take neuron through given time interval
  void update(nest::Time const &, const long, const long);

  // The next two classes need to be friends to access the State_ class/member
  friend class nest::RecordablesMap<iaf_cond_alpha_implicit>;
  friend class nest::UniversalDataLogger<iaf_cond_alpha_implicit>;

  /**
  * Free parameters of the neuron.
  *
  *
  *
  * These are the parameters that can be set by the user through @c SetStatus.
  * They are initialized from the model prototype when the node is created.
  * Parameters do not change during calls to @c update() and are not reset by
  * @c ResetNetwork.
  *
  * @note Parameters_ need neither copy constructor nor @c operator=(), since
  *       all its members are copied properly by the default copy constructor
  *       and assignment operator. Important:
  *       - If Parameters_ contained @c Time members, you need to define the
  *         assignment operator to recalibrate all members of type @c Time . You
  *         may also want to define the assignment operator.
  *       - If Parameters_ contained members that cannot copy themselves, such
  *         as C-style arrays, you need to define the copy constructor and
  *         assignment operator to copy those members.
  */
  struct Parameters_ {
    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double V_th; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double V_reset; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double t_ref; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double g_L; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double C_m; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double E_ex; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double E_in; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double E_L; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double tau_syn_ex; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double tau_syn_in; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double I_e; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double I_stim; //

    /** Initialize parameters to their default values. */
    Parameters_();
  };

  /**
  * Dynamic state of the neuron.
  *
  *
  *
  * These are the state variables that are advanced in time by calls to
  * @c update(). In many models, some or all of them can be set by the user
  * through @c SetStatus. The state variables are initialized from the model
  * prototype when the node is created. State variables are reset by @c
  * ResetNetwork.
  *
  * @note State_ need neither copy constructor nor @c operator=(), since
  *       all its members are copied properly by the default copy constructor
  *       and assignment operator. Important:
  *       - If State_ contained @c Time members, you need to define the
  *         assignment operator to recalibrate all members of type @c Time . You
  *         may also want to define the assignment operator.
  *       - If State_ contained members that cannot copy themselves, such
  *         as C-style arrays, you need to define the copy constructor and
  *         assignment operator to copy those members.
  */
  struct State_ {
    //! Symbolic indices to the elements of the state vector y
    enum StateVecElems { V_m, g_in, g_ex, __D_g_in, __D_g_ex, STATE_VEC_SIZE };
    //! state vector, must be C-array for GSL solver
    double y[STATE_VEC_SIZE];

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double I_syn_exc; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double I_syn_inh; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double I_leak; //

    State_();
  };

  /**
  * Internal variables of the neuron.
  *
  *
  *
  * These variables must be initialized by @c calibrate, which is called before
  * the first call to @c update() upon each call to @c Simulate.
  * @node Variables_ needs neither constructor, copy constructor or assignment
  * operator,
  *       since it is initialized by @c calibrate(). If Variables_ has members
  * that
  *       cannot destroy themselves, Variables_ will need a destructor.
  */
  struct Variables_ {
    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double PSConInit_E; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double PSConInit_I; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    long RefractoryCounts; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    long r; //
  };

  /**
    * Buffers of the neuron.
    * Ususally buffers for incoming spikes and data logged for analog recorders.
    * Buffers must be initialized by @c init_buffers_(), which is called before
    * @c calibrate() on the first call to @c Simulate after the start of NEST,
    * ResetKernel or ResetNetwork.
    * @node Buffers_ needs neither constructor, copy constructor or assignment
   * operator,
    *       since it is initialized by @c init_nodes_(). If Buffers_ has members
   * that
    *       cannot destroy themselves, Buffers_ will need a destructor.
    */
  struct Buffers_ {
    Buffers_(iaf_cond_alpha_implicit &);
    Buffers_(const Buffers_ &, iaf_cond_alpha_implicit &);

    /** Logger for all analog data */
    nest::UniversalDataLogger<iaf_cond_alpha_implicit> logger_;

    inline nest::RingBuffer &get_spikeInh() { return spikeInh; }
    nest::RingBuffer spikeInh;
    //!< Buffer incoming Buffers through delay, as sum
    ;
    double spikeInh_last_value_;
    inline nest::RingBuffer &get_spikeExc() { return spikeExc; }
    nest::RingBuffer spikeExc;
    //!< Buffer incoming Buffers through delay, as sum
    ;
    double spikeExc_last_value_;

    nest::RingBuffer currents;
    //!< Buffer incoming Buffers through delay, as sum
    ;
    inline nest::RingBuffer &get_currents() { return currents; }
    double currents_last_value_;

    /** GSL ODE stuff */
    gsl_odeiv_step *__s;    //!< stepping function
    gsl_odeiv_control *__c; //!< adaptive stepsize control function
    gsl_odeiv_evolve *__e;  //!< evolution function
    gsl_odeiv_system __sys; //!< struct describing system

    // IntergrationStep_ should be reset with the neuron on ResetNetwork,
    // but remain unchanged during calibration. Since it is initialized with
    // step_, and the resolution cannot change after nodes have been created,
    // it is safe to place both here.
    double __step; //!< step size in ms
    double
        __integration_step; //!< current integration time step, updated by GSL
  };

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_V_m() const { return S_.y[State_::V_m]; }

  inline void set_V_m(const double __v) { S_.y[State_::V_m] = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_g_in() const { return S_.y[State_::g_in]; }

  inline void set_g_in(const double __v) { S_.y[State_::g_in] = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_g_ex() const { return S_.y[State_::g_ex]; }

  inline void set_g_ex(const double __v) { S_.y[State_::g_ex] = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get___D_g_in() const { return S_.y[State_::__D_g_in]; }

  inline void set___D_g_in(const double __v) { S_.y[State_::__D_g_in] = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get___D_g_ex() const { return S_.y[State_::__D_g_ex]; }

  inline void set___D_g_ex(const double __v) { S_.y[State_::__D_g_ex] = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_V_th() const { return P_.V_th; }

  inline void set_V_th(const double __v) { P_.V_th = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_V_reset() const { return P_.V_reset; }

  inline void set_V_reset(const double __v) { P_.V_reset = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_t_ref() const { return P_.t_ref; }

  inline void set_t_ref(const double __v) { P_.t_ref = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_g_L() const { return P_.g_L; }

  inline void set_g_L(const double __v) { P_.g_L = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_C_m() const { return P_.C_m; }

  inline void set_C_m(const double __v) { P_.C_m = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_E_ex() const { return P_.E_ex; }

  inline void set_E_ex(const double __v) { P_.E_ex = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_E_in() const { return P_.E_in; }

  inline void set_E_in(const double __v) { P_.E_in = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_E_L() const { return P_.E_L; }

  inline void set_E_L(const double __v) { P_.E_L = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_tau_syn_ex() const { return P_.tau_syn_ex; }

  inline void set_tau_syn_ex(const double __v) { P_.tau_syn_ex = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_tau_syn_in() const { return P_.tau_syn_in; }

  inline void set_tau_syn_in(const double __v) { P_.tau_syn_in = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_I_e() const { return P_.I_e; }

  inline void set_I_e(const double __v) { P_.I_e = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_I_stim() const { return P_.I_stim; }

  inline void set_I_stim(const double __v) { P_.I_stim = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_PSConInit_E() const { return V_.PSConInit_E; }

  inline void set_PSConInit_E(const double __v) { V_.PSConInit_E = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_PSConInit_I() const { return V_.PSConInit_I; }

  inline void set_PSConInit_I(const double __v) { V_.PSConInit_I = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline long get_RefractoryCounts() const { return V_.RefractoryCounts; }

  inline void set_RefractoryCounts(const long __v) {
    V_.RefractoryCounts = __v;
  }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline long get_r() const { return V_.r; }

  inline void set_r(const long __v) { V_.r = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_I_syn_exc() const { return S_.I_syn_exc; }

  inline void set_I_syn_exc(const double __v) { S_.I_syn_exc = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_I_syn_inh() const { return S_.I_syn_inh; }

  inline void set_I_syn_inh(const double __v) { S_.I_syn_inh = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_I_leak() const {
    return P_.g_L * (S_.y[State_::V_m] - P_.E_L);
  }

  inline nest::RingBuffer &get_spikeInh() { return B_.get_spikeInh(); };
  inline nest::RingBuffer &get_spikeExc() { return B_.get_spikeExc(); };
  inline nest::RingBuffer &get_currents() { return B_.get_currents(); };

  // Generate function header
  /**
  * @defgroup pif_members Member variables of neuron model.
  * Each model neuron should have precisely the following four data members,
  * which are one instance each of the parameters, state, buffers and variables
  * structures. Experience indicates that the state and variables member should
  * be next to each other to achieve good efficiency (caching).
  * @note Devices require one additional data member, an instance of the @c
  * Device
  *       child class they belong to.
  * @{
  */
  Parameters_ P_; //!< Free parameters.
  State_ S_;      //!< Dynamic state.
  Variables_ V_;  //!< Internal Variables
  Buffers_ B_;    //!< Buffers.

  //! Mapping of recordables names to access functions
  static nest::RecordablesMap<iaf_cond_alpha_implicit> recordablesMap_;

  friend int iaf_cond_alpha_implicit_dynamics(double, const double y[],
                                              double f[], void *pnode);
  /** @} */
}; /* neuron iaf_cond_alpha_implicit */

inline nest::port iaf_cond_alpha_implicit::send_test_event(
    nest::Node &target, nest::rport receptor_type, nest::synindex, bool) {
  // You should usually not change the code in this function.
  // It confirms that the target of connection @c c accepts @c nest::SpikeEvent
  // on
  // the given @c receptor_type.
  nest::SpikeEvent e;
  e.set_sender(*this);

  return target.handles_test_event(e, receptor_type);
}

inline nest::port
iaf_cond_alpha_implicit::handles_test_event(nest::SpikeEvent &,
                                            nest::port receptor_type) {
  // You should usually not change the code in this function.
  // It confirms to the connection management system that we are able
  // to handle @c SpikeEvent on port 0. You need to extend the function
  // if you want to differentiate between input ports.
  if (receptor_type != 0)
    throw nest::UnknownReceptorType(receptor_type, get_name());
  return 0;
}

inline nest::port
iaf_cond_alpha_implicit::handles_test_event(nest::CurrentEvent &,
                                            nest::port receptor_type) {
  // You should usually not change the code in this function.
  // It confirms to the connection management system that we are able
  // to handle @c CurrentEvent on port 0. You need to extend the function
  // if you want to differentiate between input ports.
  if (receptor_type != 0)
    throw nest::UnknownReceptorType(receptor_type, get_name());
  return 0;
}
inline nest::port
iaf_cond_alpha_implicit::handles_test_event(nest::DataLoggingRequest &dlr,
                                            nest::port receptor_type) {
  // You should usually not change the code in this function.
  // It confirms to the connection management system that we are able
  // to handle @c DataLoggingRequest on port 0.
  // The function also tells the built-in UniversalDataLogger that this node
  // is recorded from and that it thus needs to collect data during simulation.
  if (receptor_type != 0)
    throw nest::UnknownReceptorType(receptor_type, get_name());

  return B_.logger_.connect_logging_device(dlr, recordablesMap_);
}

// TODO call get_status on used or internal components
inline void iaf_cond_alpha_implicit::get_status(DictionaryDatum &__d) const {
  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "V_th", get_V_th());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "V_reset", get_V_reset());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "t_ref", get_t_ref());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "g_L", get_g_L());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "C_m", get_C_m());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "E_ex", get_E_ex());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "E_in", get_E_in());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "E_L", get_E_L());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "tau_syn_ex", get_tau_syn_ex());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "tau_syn_in", get_tau_syn_in());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "I_e", get_I_e());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "I_stim", get_I_stim());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "V_m", get_V_m());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "g_in", get_g_in());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "g_ex", get_g_ex());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "__D_g_in", get___D_g_in());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "__D_g_ex", get___D_g_ex());

  (*__d)[nest::names::recordables] = recordablesMap_.get_list();
}

inline void iaf_cond_alpha_implicit::set_status(const DictionaryDatum &__d) {
  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_V_th = get_V_th();
  updateValue<double>(__d, "V_th", tmp_V_th);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_V_reset = get_V_reset();
  updateValue<double>(__d, "V_reset", tmp_V_reset);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_t_ref = get_t_ref();
  updateValue<double>(__d, "t_ref", tmp_t_ref);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_g_L = get_g_L();
  updateValue<double>(__d, "g_L", tmp_g_L);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_C_m = get_C_m();
  updateValue<double>(__d, "C_m", tmp_C_m);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_E_ex = get_E_ex();
  updateValue<double>(__d, "E_ex", tmp_E_ex);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_E_in = get_E_in();
  updateValue<double>(__d, "E_in", tmp_E_in);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_E_L = get_E_L();
  updateValue<double>(__d, "E_L", tmp_E_L);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_tau_syn_ex = get_tau_syn_ex();
  updateValue<double>(__d, "tau_syn_ex", tmp_tau_syn_ex);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_tau_syn_in = get_tau_syn_in();
  updateValue<double>(__d, "tau_syn_in", tmp_tau_syn_in);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_I_e = get_I_e();
  updateValue<double>(__d, "I_e", tmp_I_e);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_I_stim = get_I_stim();
  updateValue<double>(__d, "I_stim", tmp_I_stim);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_V_m = get_V_m();
  updateValue<double>(__d, "V_m", tmp_V_m);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_g_in = get_g_in();
  updateValue<double>(__d, "g_in", tmp_g_in);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_g_ex = get_g_ex();
  updateValue<double>(__d, "g_ex", tmp_g_ex);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp___D_g_in = get___D_g_in();
  updateValue<double>(__d, "__D_g_in", tmp___D_g_in);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp___D_g_ex = get___D_g_ex();
  updateValue<double>(__d, "__D_g_ex", tmp___D_g_ex);

  // We now know that (ptmp, stmp) are consistent. We do not
  // write them back to (P_, S_) before we are also sure that
  // the properties to be set in the parent class are internally
  // consistent.
  Archiving_Node::set_status(__d);

  // if we get here, temporaries contain consistent set of properties
  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_V_th(tmp_V_th);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_V_reset(tmp_V_reset);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_t_ref(tmp_t_ref);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_g_L(tmp_g_L);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_C_m(tmp_C_m);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_E_ex(tmp_E_ex);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_E_in(tmp_E_in);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_E_L(tmp_E_L);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_tau_syn_ex(tmp_tau_syn_ex);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_tau_syn_in(tmp_tau_syn_in);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_I_e(tmp_I_e);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_I_stim(tmp_I_stim);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_V_m(tmp_V_m);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_g_in(tmp_g_in);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_g_ex(tmp_g_ex);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set___D_g_in(tmp___D_g_in);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set___D_g_ex(tmp___D_g_ex);
};

#endif /* #ifndef IAF_COND_ALPHA_IMPLICIT */
#endif /* HAVE GSL */
