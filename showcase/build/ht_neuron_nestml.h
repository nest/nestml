/* generated by template org.nest.nestml.neuron.NeuronHeader*/
/*
*  ht_neuron_nestml.h
*
*  This file is part of NEST.
*
*  Copyright (C) 2004 The NEST Initiative
*
*  NEST is free software: you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation, either version 2 of the License, or
*  (at your option) any later version.
*
*  NEST is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  You should have received a copy of the GNU General Public License
*  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
*
*/
#ifndef HT_NEURON_NESTML
#define HT_NEURON_NESTML
#include "config.h"

#ifdef HAVE_GSL
#include <gsl/gsl_errno.h>
#include <gsl/gsl_matrix.h>
#include <gsl/gsl_odeiv.h>
// forwards the declaration of the function
extern "C" inline int ht_neuron_nestml_dynamics(double, const double y[],
                                                double f[], void *pnode);

// Includes from nestkernel:
#include "archiving_node.h"
#include "connection.h"
#include "event.h"
#include "nest_types.h"
#include "ring_buffer.h"
#include "universal_data_logger.h"

// Includes from sli:
#include "dictdatum.h"

/* BeginDocumentation
Name: ht_neuron_nestml.

//
   Name: ht_neuron - Neuron model after Hill & Tononi (2005).

   Description:
   This model neuron implements a slightly modified version of the
   neuron model described in [1]. The most important properties are:

   - Integrate-and-fire with threshold that is increased on spiking
     and decays back to an equilibrium value.
   - No hard reset, but repolarizing potassium current.
   - AMPA, NMDA, GABA_A, and GABA_B conductance-based synapses with
     beta-function (difference of two exponentials) time course.
   - Intrinsic currents I_h (pacemaker), I_T (low-threshold calcium),
     I_Na(p) (persistent sodium), and I_KNa (depolarization-activated
     potassium).

   In comparison to the model described in the paper, the following
   modifications were mare:

   - NMDA conductance is given by g(t) = g_peak * m(V), where

       m(V) = 1 / ( 1 + exp( - ( V - NMDA_Vact ) / NMDA_Sact ) )

     This is an approximation to the NMDA model used in [2].

   - Several apparent typographical errors in the descriptions of
     the intrinsic currents were fixed, hopefully in a meaningful
     way.

   I'd like to thank Sean Hill for giving me access to his
   simulator source code.

   See examples/hilltononi for usage examples.

   Warning:
   THIS MODEL NEURON HAS NOT BEEN TESTED EXTENSIVELY!

   Parameters:
   V_m            -  membrane potential
   spike_duration - duration of re-polarizing potassium current
   Tau_m          - membrane time constant applying to all currents but
                    repolarizing K-current (see [1, p 1677])
   Tau_spike      - membrane time constant applying to repolarizing K-current
   Theta, Theta_eq, Tau_theta - Threshold, equilibrium value, time constant
   g_KL, E_K, g_NaL, E_Na     - conductances and reversal potentials for K and
   Na
                                leak currents

   Author: Hans Ekkehard Plesser

   Sends: SpikeEvent

   Receives: SpikeEvent, CurrentEvent, DataLoggingRequest

   FirstVersion: October 2009

   References:
   [1] S Hill and G Tononi (2005). J Neurophysiol 93:1671-1698.
   [2] ED Lumer, GM Edelman, and G Tononi (1997). Cereb Cortex 7:207-227.

   SeeAlso: ht_synapse
//

Parameters:

Remarks:
Empty

References:
Empty

Sends: nest::SpikeEvent

Receives: Spike, Current,  DataLoggingRequest

SeeAlso:

Empty
*/
class ht_neuron_nestml : public nest::Archiving_Node {
public:
  /**
  * The constructor is only used to create the model prototype in the model
  * manager.
  */
  ht_neuron_nestml();

  /**
  * The copy constructor is used to create model copies and instances of the
  * model.
  * @node The copy constructor needs to initialize the parameters and the state.
  *       Initialization of buffers and interal variables is deferred to
  *       @c init_buffers_() and @c calibrate().
  */
  ht_neuron_nestml(const ht_neuron_nestml &);

  /**
  * Releases resources.
  */
  ~ht_neuron_nestml();
  /**
  * Import sets of overloaded virtual functions.
  * This is necessary to ensure proper overload and overriding resolution.
  * @see http://www.gotw.ca/gotw/005.htm.
  */
  using nest::Node::handles_test_event;
  using nest::Node::handle;

  /**
  * Used to validate that we can send nest::SpikeEvent to desired target:port.
  */
  nest::port send_test_event(nest::Node &target, nest::rport receptor_type,
                             nest::synindex, bool);

  /**
  * @defgroup mynest_handle Functions handling incoming events.
  * We tell nest that we can handle incoming events of various types by
  * defining @c handle() and @c connect_sender() for the given event.
  * @{
  */
  void handle(nest::SpikeEvent &);         //! accept spikes
  void handle(nest::CurrentEvent &);       //! accept input current
  void handle(nest::DataLoggingRequest &); //! allow recording with multimeter

  nest::port handles_test_event(nest::SpikeEvent &, nest::port);
  nest::port handles_test_event(nest::CurrentEvent &, nest::port);
  nest::port handles_test_event(nest::DataLoggingRequest &, nest::port);
  /** @} */

  // SLI communication functions:
  void get_status(DictionaryDatum &) const;
  void set_status(const DictionaryDatum &);

private:
  /**
   * Synapse types to connect to
   * @note Excluded upper and lower bounds are defined as INF_, SUP_.
   *       Excluding port 0 avoids accidental connections.
   */
  enum SynapseTypes {
    INF_SPIKE_RECEPTOR = 0,
    AMPA,
    NMDA,
    GABA_A,
    GABA_B,
    SUP_SPIKE_RECEPTOR
  };
  //! Reset parameters and state of neuron.

  //! Reset state of neuron.
  void init_state_(const Node &proto);

  //! Reset internal buffers of neuron.
  void init_buffers_();

  //! Initialize auxiliary quantities, leave parameters and state untouched.
  void calibrate();

  //! Take neuron through given time interval
  void update(nest::Time const &, const long, const long);

  // The next two classes need to be friends to access the State_ class/member
  friend class nest::RecordablesMap<ht_neuron_nestml>;
  friend class nest::UniversalDataLogger<ht_neuron_nestml>;

  /**
  * Free parameters of the neuron.
  *
  *
  *
  * These are the parameters that can be set by the user through @c SetStatus.
  * They are initialized from the model prototype when the node is created.
  * Parameters do not change during calls to @c update() and are not reset by
  * @c ResetNetwork.
  *
  * @note Parameters_ need neither copy constructor nor @c operator=(), since
  *       all its members are copied properly by the default copy constructor
  *       and assignment operator. Important:
  *       - If Parameters_ contained @c Time members, you need to define the
  *         assignment operator to recalibrate all members of type @c Time . You
  *         may also want to define the assignment operator.
  *       - If Parameters_ contained members that cannot copy themselves, such
  *         as C-style arrays, you need to define the copy constructor and
  *         assignment operator to copy those members.
  */
  struct Parameters_ {
    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double E_Na; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double E_K; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double g_NaL; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double g_KL; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double Tau_m; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double Theta_eq; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double Tau_theta; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double Tau_spike; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double t_spike; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double AMPA_g_peak; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double AMPA_E_rev; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double AMPA_Tau_1; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double AMPA_Tau_2; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double NMDA_g_peak; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double NMDA_Tau_1; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double NMDA_Tau_2; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double NMDA_E_rev; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double NMDA_Vact; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double NMDA_Sact; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double GABA_A_g_peak; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double GABA_A_Tau_1; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double GABA_A_Tau_2; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double GABA_A_E_rev; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double GABA_B_g_peak; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double GABA_B_Tau_1; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double GABA_B_Tau_2; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double GABA_B_E_rev; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double NaP_g_peak; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double NaP_E_rev; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double KNa_g_peak; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double KNa_E_rev; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double T_g_peak; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double T_E_rev; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double h_g_peak; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double h_E_rev; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double KNa_D_EQ; //

    /** Initialize parameters to their default values. */
    Parameters_();
  };

  /**
  * Dynamic state of the neuron.
  *
  *
  *
  * These are the state variables that are advanced in time by calls to
  * @c update(). In many models, some or all of them can be set by the user
  * through @c SetStatus. The state variables are initialized from the model
  * prototype when the node is created. State variables are reset by @c
  * ResetNetwork.
  *
  * @note State_ need neither copy constructor nor @c operator=(), since
  *       all its members are copied properly by the default copy constructor
  *       and assignment operator. Important:
  *       - If State_ contained @c Time members, you need to define the
  *         assignment operator to recalibrate all members of type @c Time . You
  *         may also want to define the assignment operator.
  *       - If State_ contained members that cannot copy themselves, such
  *         as C-style arrays, you need to define the copy constructor and
  *         assignment operator to copy those members.
  */
  struct State_ {
    //! Symbolic indices to the elements of the state vector y
    enum StateVecElems {
      V_m,
      Theta,
      g_AMPA,
      g_NMDA,
      g_GABAA,
      g_GABAB,
      IKNa_D,
      IT_m,
      IT_h,
      Ih_m,
      r_potassium,
      g_spike,
      __D_g_AMPA,
      __D_g_NMDA,
      __D_g_GABAA,
      __D_g_GABAB,
      STATE_VEC_SIZE
    };
    //! state vector, must be C-array for GSL solver
    double y[STATE_VEC_SIZE];

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double I_syn_ampa; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double I_syn_nmda; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double I_syn_gaba_a; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double I_syn_gaba_b; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double I_syn; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double INaP_thresh; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double INaP_slope; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double m_inf_NaP; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double I_NaP; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double d_half; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double m_inf_KNa; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double I_KNa; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double I_T; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double I_h; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double I_spike; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double m_inf_T; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double h_inf_T; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double tau_m_h; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double D_influx_peak; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double tau_D; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double D_thresh; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double D_slope; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double D_influx; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double I_Na; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double I_K; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double tau_m_T; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double tau_h_T; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double I_h_Vthreshold; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double m_inf_h; //

    State_();
  };

  /**
  * Internal variables of the neuron.
  *
  *
  *
  * These variables must be initialized by @c calibrate, which is called before
  * the first call to @c update() upon each call to @c Simulate.
  * @node Variables_ needs neither constructor, copy constructor or assignment
  * operator,
  *       since it is initialized by @c calibrate(). If Variables_ has members
  * that
  *       cannot destroy themselves, Variables_ will need a destructor.
  */
  struct Variables_ {
    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double AMPAInitialValue; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double NMDAInitialValue; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double GABA_AInitialValue; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double GABA_BInitialValue; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    long PotassiumRefractoryCounts; //

    /* generated by template org.nest.nestml.neuron.function.MemberDeclaration*/

    double I_stim; //
  };

  /**
    * Buffers of the neuron.
    * Ususally buffers for incoming spikes and data logged for analog recorders.
    * Buffers must be initialized by @c init_buffers_(), which is called before
    * @c calibrate() on the first call to @c Simulate after the start of NEST,
    * ResetKernel or ResetNetwork.
    * @node Buffers_ needs neither constructor, copy constructor or assignment
   * operator,
    *       since it is initialized by @c init_nodes_(). If Buffers_ has members
   * that
    *       cannot destroy themselves, Buffers_ will need a destructor.
    */
  struct Buffers_ {
    Buffers_(ht_neuron_nestml &);
    Buffers_(const Buffers_ &, ht_neuron_nestml &);

    /** Logger for all analog data */
    nest::UniversalDataLogger<ht_neuron_nestml> logger_;
    std::vector<long> receptor_types_;

    /** buffers and sums up incoming spikes/currents */
    std::vector<nest::RingBuffer> spike_inputs_;

    inline nest::RingBuffer &get_AMPA() { return spike_inputs_[AMPA - 1]; }
    double AMPA_last_value_;
    inline nest::RingBuffer &get_NMDA() { return spike_inputs_[NMDA - 1]; }
    double NMDA_last_value_;
    inline nest::RingBuffer &get_GABA_A() { return spike_inputs_[GABA_A - 1]; }
    double GABA_A_last_value_;
    inline nest::RingBuffer &get_GABA_B() { return spike_inputs_[GABA_B - 1]; }
    double GABA_B_last_value_;

    nest::RingBuffer currents;
    //!< Buffer incoming Buffers through delay, as sum
    ;
    inline nest::RingBuffer &get_currents() { return currents; }
    double currents_last_value_;

    /** GSL ODE stuff */
    gsl_odeiv_step *__s;    //!< stepping function
    gsl_odeiv_control *__c; //!< adaptive stepsize control function
    gsl_odeiv_evolve *__e;  //!< evolution function
    gsl_odeiv_system __sys; //!< struct describing system

    // IntergrationStep_ should be reset with the neuron on ResetNetwork,
    // but remain unchanged during calibration. Since it is initialized with
    // step_, and the resolution cannot change after nodes have been created,
    // it is safe to place both here.
    double __step; //!< step size in ms
    double
        __integration_step; //!< current integration time step, updated by GSL
  };

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_V_m() const { return S_.y[State_::V_m]; }

  inline void set_V_m(const double __v) { S_.y[State_::V_m] = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_Theta() const { return S_.y[State_::Theta]; }

  inline void set_Theta(const double __v) { S_.y[State_::Theta] = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_g_AMPA() const { return S_.y[State_::g_AMPA]; }

  inline void set_g_AMPA(const double __v) { S_.y[State_::g_AMPA] = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_g_NMDA() const { return S_.y[State_::g_NMDA]; }

  inline void set_g_NMDA(const double __v) { S_.y[State_::g_NMDA] = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_g_GABAA() const { return S_.y[State_::g_GABAA]; }

  inline void set_g_GABAA(const double __v) { S_.y[State_::g_GABAA] = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_g_GABAB() const { return S_.y[State_::g_GABAB]; }

  inline void set_g_GABAB(const double __v) { S_.y[State_::g_GABAB] = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_IKNa_D() const { return S_.y[State_::IKNa_D]; }

  inline void set_IKNa_D(const double __v) { S_.y[State_::IKNa_D] = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_IT_m() const { return S_.y[State_::IT_m]; }

  inline void set_IT_m(const double __v) { S_.y[State_::IT_m] = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_IT_h() const { return S_.y[State_::IT_h]; }

  inline void set_IT_h(const double __v) { S_.y[State_::IT_h] = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_Ih_m() const { return S_.y[State_::Ih_m]; }

  inline void set_Ih_m(const double __v) { S_.y[State_::Ih_m] = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline long get_r_potassium() const { return S_.y[State_::r_potassium]; }

  inline void set_r_potassium(const long __v) {
    S_.y[State_::r_potassium] = __v;
  }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline bool get_g_spike() const { return S_.y[State_::g_spike]; }

  inline void set_g_spike(const bool __v) { S_.y[State_::g_spike] = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get___D_g_AMPA() const { return S_.y[State_::__D_g_AMPA]; }

  inline void set___D_g_AMPA(const double __v) {
    S_.y[State_::__D_g_AMPA] = __v;
  }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get___D_g_NMDA() const { return S_.y[State_::__D_g_NMDA]; }

  inline void set___D_g_NMDA(const double __v) {
    S_.y[State_::__D_g_NMDA] = __v;
  }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get___D_g_GABAA() const { return S_.y[State_::__D_g_GABAA]; }

  inline void set___D_g_GABAA(const double __v) {
    S_.y[State_::__D_g_GABAA] = __v;
  }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get___D_g_GABAB() const { return S_.y[State_::__D_g_GABAB]; }

  inline void set___D_g_GABAB(const double __v) {
    S_.y[State_::__D_g_GABAB] = __v;
  }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_E_Na() const { return P_.E_Na; }

  inline void set_E_Na(const double __v) { P_.E_Na = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_E_K() const { return P_.E_K; }

  inline void set_E_K(const double __v) { P_.E_K = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_g_NaL() const { return P_.g_NaL; }

  inline void set_g_NaL(const double __v) { P_.g_NaL = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_g_KL() const { return P_.g_KL; }

  inline void set_g_KL(const double __v) { P_.g_KL = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_Tau_m() const { return P_.Tau_m; }

  inline void set_Tau_m(const double __v) { P_.Tau_m = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_Theta_eq() const { return P_.Theta_eq; }

  inline void set_Theta_eq(const double __v) { P_.Theta_eq = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_Tau_theta() const { return P_.Tau_theta; }

  inline void set_Tau_theta(const double __v) { P_.Tau_theta = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_Tau_spike() const { return P_.Tau_spike; }

  inline void set_Tau_spike(const double __v) { P_.Tau_spike = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_t_spike() const { return P_.t_spike; }

  inline void set_t_spike(const double __v) { P_.t_spike = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_AMPA_g_peak() const { return P_.AMPA_g_peak; }

  inline void set_AMPA_g_peak(const double __v) { P_.AMPA_g_peak = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_AMPA_E_rev() const { return P_.AMPA_E_rev; }

  inline void set_AMPA_E_rev(const double __v) { P_.AMPA_E_rev = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_AMPA_Tau_1() const { return P_.AMPA_Tau_1; }

  inline void set_AMPA_Tau_1(const double __v) { P_.AMPA_Tau_1 = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_AMPA_Tau_2() const { return P_.AMPA_Tau_2; }

  inline void set_AMPA_Tau_2(const double __v) { P_.AMPA_Tau_2 = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_NMDA_g_peak() const { return P_.NMDA_g_peak; }

  inline void set_NMDA_g_peak(const double __v) { P_.NMDA_g_peak = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_NMDA_Tau_1() const { return P_.NMDA_Tau_1; }

  inline void set_NMDA_Tau_1(const double __v) { P_.NMDA_Tau_1 = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_NMDA_Tau_2() const { return P_.NMDA_Tau_2; }

  inline void set_NMDA_Tau_2(const double __v) { P_.NMDA_Tau_2 = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_NMDA_E_rev() const { return P_.NMDA_E_rev; }

  inline void set_NMDA_E_rev(const double __v) { P_.NMDA_E_rev = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_NMDA_Vact() const { return P_.NMDA_Vact; }

  inline void set_NMDA_Vact(const double __v) { P_.NMDA_Vact = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_NMDA_Sact() const { return P_.NMDA_Sact; }

  inline void set_NMDA_Sact(const double __v) { P_.NMDA_Sact = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_GABA_A_g_peak() const { return P_.GABA_A_g_peak; }

  inline void set_GABA_A_g_peak(const double __v) { P_.GABA_A_g_peak = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_GABA_A_Tau_1() const { return P_.GABA_A_Tau_1; }

  inline void set_GABA_A_Tau_1(const double __v) { P_.GABA_A_Tau_1 = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_GABA_A_Tau_2() const { return P_.GABA_A_Tau_2; }

  inline void set_GABA_A_Tau_2(const double __v) { P_.GABA_A_Tau_2 = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_GABA_A_E_rev() const { return P_.GABA_A_E_rev; }

  inline void set_GABA_A_E_rev(const double __v) { P_.GABA_A_E_rev = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_GABA_B_g_peak() const { return P_.GABA_B_g_peak; }

  inline void set_GABA_B_g_peak(const double __v) { P_.GABA_B_g_peak = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_GABA_B_Tau_1() const { return P_.GABA_B_Tau_1; }

  inline void set_GABA_B_Tau_1(const double __v) { P_.GABA_B_Tau_1 = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_GABA_B_Tau_2() const { return P_.GABA_B_Tau_2; }

  inline void set_GABA_B_Tau_2(const double __v) { P_.GABA_B_Tau_2 = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_GABA_B_E_rev() const { return P_.GABA_B_E_rev; }

  inline void set_GABA_B_E_rev(const double __v) { P_.GABA_B_E_rev = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_NaP_g_peak() const { return P_.NaP_g_peak; }

  inline void set_NaP_g_peak(const double __v) { P_.NaP_g_peak = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_NaP_E_rev() const { return P_.NaP_E_rev; }

  inline void set_NaP_E_rev(const double __v) { P_.NaP_E_rev = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_KNa_g_peak() const { return P_.KNa_g_peak; }

  inline void set_KNa_g_peak(const double __v) { P_.KNa_g_peak = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_KNa_E_rev() const { return P_.KNa_E_rev; }

  inline void set_KNa_E_rev(const double __v) { P_.KNa_E_rev = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_T_g_peak() const { return P_.T_g_peak; }

  inline void set_T_g_peak(const double __v) { P_.T_g_peak = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_T_E_rev() const { return P_.T_E_rev; }

  inline void set_T_E_rev(const double __v) { P_.T_E_rev = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_h_g_peak() const { return P_.h_g_peak; }

  inline void set_h_g_peak(const double __v) { P_.h_g_peak = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_h_E_rev() const { return P_.h_E_rev; }

  inline void set_h_E_rev(const double __v) { P_.h_E_rev = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_KNa_D_EQ() const { return P_.KNa_D_EQ; }

  inline void set_KNa_D_EQ(const double __v) { P_.KNa_D_EQ = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_AMPAInitialValue() const { return V_.AMPAInitialValue; }

  inline void set_AMPAInitialValue(const double __v) {
    V_.AMPAInitialValue = __v;
  }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_NMDAInitialValue() const { return V_.NMDAInitialValue; }

  inline void set_NMDAInitialValue(const double __v) {
    V_.NMDAInitialValue = __v;
  }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_GABA_AInitialValue() const { return V_.GABA_AInitialValue; }

  inline void set_GABA_AInitialValue(const double __v) {
    V_.GABA_AInitialValue = __v;
  }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_GABA_BInitialValue() const { return V_.GABA_BInitialValue; }

  inline void set_GABA_BInitialValue(const double __v) {
    V_.GABA_BInitialValue = __v;
  }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline long get_PotassiumRefractoryCounts() const {
    return V_.PotassiumRefractoryCounts;
  }

  inline void set_PotassiumRefractoryCounts(const long __v) {
    V_.PotassiumRefractoryCounts = __v;
  }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_I_stim() const { return V_.I_stim; }

  inline void set_I_stim(const double __v) { V_.I_stim = __v; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_I_syn_ampa() const {
    return ((-S_.y[State_::g_AMPA])) * (S_.y[State_::V_m] - P_.AMPA_E_rev);
  }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_I_syn_nmda() const {
    return ((-S_.y[State_::g_NMDA])) * (S_.y[State_::V_m] - P_.NMDA_E_rev) /
           (1 + std::exp((P_.NMDA_Vact - S_.y[State_::V_m]) / P_.NMDA_Sact));
  }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_I_syn_gaba_a() const {
    return ((-S_.y[State_::g_GABAA])) * (S_.y[State_::V_m] - P_.GABA_A_E_rev);
  }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_I_syn_gaba_b() const {
    return ((-S_.y[State_::g_GABAB])) * (S_.y[State_::V_m] - P_.GABA_B_E_rev);
  }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_I_syn() const {
    return get_I_syn_ampa() + get_I_syn_nmda() + get_I_syn_gaba_a() +
           get_I_syn_gaba_b();
  }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_INaP_thresh() const { return ((-55.7)); }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_INaP_slope() const { return 7.7; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_m_inf_NaP() const {
    return 1.0 / (1.0 + std::exp(((-(S_.y[State_::V_m] - get_INaP_thresh()))) /
                                 get_INaP_slope()));
  }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_I_NaP() const {
    return ((-P_.NaP_g_peak)) * std::pow(get_m_inf_NaP(), 3.0) *
           (S_.y[State_::V_m] - P_.NaP_E_rev);
  }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_d_half() const { return 0.25; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_m_inf_KNa() const {
    return 1.0 / (1.0 + std::pow(get_d_half() / S_.y[State_::IKNa_D], 3.5));
  }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_I_KNa() const {
    return ((-P_.KNa_g_peak)) * get_m_inf_KNa() *
           (S_.y[State_::V_m] - P_.KNa_E_rev);
  }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_I_T() const {
    return ((-P_.T_g_peak)) * S_.y[State_::IT_m] * S_.y[State_::IT_m] *
           S_.y[State_::IT_h] * (S_.y[State_::V_m] - P_.T_E_rev);
  }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_I_h() const {
    return ((-P_.h_g_peak)) * S_.y[State_::Ih_m] *
           (S_.y[State_::V_m] - P_.h_E_rev);
  }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_I_spike() const {
    return (((S_.y[State_::g_spike])))
               ? ((((-(S_.y[State_::V_m] - P_.E_K))) / P_.Tau_spike))
               : ((0));
  }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_m_inf_T() const {
    return 1.0 / (1.0 + std::exp(((-(S_.y[State_::V_m] + 59.0))) / 6.2));
  }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_h_inf_T() const {
    return 1.0 / (1.0 + std::exp((S_.y[State_::V_m] + 83.0) / 4));
  }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_tau_m_h() const {
    return 1.0 / (std::exp(((-14.59)) - 0.086 * S_.y[State_::V_m]) +
                  std::exp(((-1.87)) + 0.0701 * S_.y[State_::V_m]));
  }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_D_influx_peak() const { return 0.025; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_tau_D() const { return 1250.0; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_D_thresh() const { return ((-10.0)); }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_D_slope() const { return 5.0; }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_D_influx() const {
    return 1.0 / (1.0 + std::exp(((-(S_.y[State_::V_m] - get_D_thresh()))) /
                                 get_D_slope()));
  }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_I_Na() const {
    return ((-P_.g_NaL)) * (S_.y[State_::V_m] - P_.E_Na);
  }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_I_K() const {
    return ((-P_.g_KL)) * (S_.y[State_::V_m] - P_.E_K);
  }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_tau_m_T() const {
    return 0.22 / (std::exp(((-(S_.y[State_::V_m] + 132.0))) / 16.7) +
                   std::exp((S_.y[State_::V_m] + 16.8) / 18.2)) +
           0.13;
  }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_tau_h_T() const {
    return 8.2 +
           (56.6 + 0.27 * std::exp((S_.y[State_::V_m] + 115.2) / 5.0)) /
               (1.0 + std::exp((S_.y[State_::V_m] + 86.0) / 3.2));
  }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_I_h_Vthreshold() const { return ((-75.0)); }

  /* generated by template
   * org.nest.nestml.neuron.function.MemberVariableGetterSetter*/

  inline double get_m_inf_h() const {
    return 1.0 /
           (1.0 + std::exp((S_.y[State_::V_m] - get_I_h_Vthreshold()) / 5.5));
  }

  inline nest::RingBuffer &get_AMPA() { return B_.get_AMPA(); };
  inline nest::RingBuffer &get_NMDA() { return B_.get_NMDA(); };
  inline nest::RingBuffer &get_GABA_A() { return B_.get_GABA_A(); };
  inline nest::RingBuffer &get_GABA_B() { return B_.get_GABA_B(); };
  inline nest::RingBuffer &get_currents() { return B_.get_currents(); };

  // Generate function header
  //
  double compute_synapse_constant(double, double, double);
  /**
  * @defgroup pif_members Member variables of neuron model.
  * Each model neuron should have precisely the following four data members,
  * which are one instance each of the parameters, state, buffers and variables
  * structures. Experience indicates that the state and variables member should
  * be next to each other to achieve good efficiency (caching).
  * @note Devices require one additional data member, an instance of the @c
  * Device
  *       child class they belong to.
  * @{
  */
  Parameters_ P_; //!< Free parameters.
  State_ S_;      //!< Dynamic state.
  Variables_ V_;  //!< Internal Variables
  Buffers_ B_;    //!< Buffers.

  //! Mapping of recordables names to access functions
  static nest::RecordablesMap<ht_neuron_nestml> recordablesMap_;

  friend int ht_neuron_nestml_dynamics(double, const double y[], double f[],
                                       void *pnode);
  /** @} */
}; /* neuron ht_neuron_nestml */

inline nest::port ht_neuron_nestml::send_test_event(nest::Node &target,
                                                    nest::rport receptor_type,
                                                    nest::synindex, bool) {
  // You should usually not change the code in this function.
  // It confirms that the target of connection @c c accepts @c nest::SpikeEvent
  // on
  // the given @c receptor_type.
  nest::SpikeEvent e;
  e.set_sender(*this);

  return target.handles_test_event(e, receptor_type);
}

inline nest::port
ht_neuron_nestml::handles_test_event(nest::SpikeEvent &,
                                     nest::port receptor_type) {
  assert(B_.spike_inputs_.size() == 4);

  if (!(INF_SPIKE_RECEPTOR < receptor_type &&
        receptor_type < SUP_SPIKE_RECEPTOR)) {
    throw nest::UnknownReceptorType(receptor_type, get_name());
    return 0;
  } else {
    return receptor_type - 1;
  }
}

inline nest::port
ht_neuron_nestml::handles_test_event(nest::CurrentEvent &,
                                     nest::port receptor_type) {
  // You should usually not change the code in this function.
  // It confirms to the connection management system that we are able
  // to handle @c CurrentEvent on port 0. You need to extend the function
  // if you want to differentiate between input ports.
  if (receptor_type != 0)
    throw nest::UnknownReceptorType(receptor_type, get_name());
  return 0;
}
inline nest::port
ht_neuron_nestml::handles_test_event(nest::DataLoggingRequest &dlr,
                                     nest::port receptor_type) {
  // You should usually not change the code in this function.
  // It confirms to the connection management system that we are able
  // to handle @c DataLoggingRequest on port 0.
  // The function also tells the built-in UniversalDataLogger that this node
  // is recorded from and that it thus needs to collect data during simulation.
  if (receptor_type != 0)
    throw nest::UnknownReceptorType(receptor_type, get_name());

  return B_.logger_.connect_logging_device(dlr, recordablesMap_);
}

// TODO call get_status on used or internal components
inline void ht_neuron_nestml::get_status(DictionaryDatum &__d) const {
  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "E_Na", get_E_Na());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "E_K", get_E_K());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "g_NaL", get_g_NaL());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "g_KL", get_g_KL());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "Tau_m", get_Tau_m());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "Theta_eq", get_Theta_eq());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "Tau_theta", get_Tau_theta());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "Tau_spike", get_Tau_spike());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "t_spike", get_t_spike());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "AMPA_g_peak", get_AMPA_g_peak());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "AMPA_E_rev", get_AMPA_E_rev());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "AMPA_Tau_1", get_AMPA_Tau_1());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "AMPA_Tau_2", get_AMPA_Tau_2());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "NMDA_g_peak", get_NMDA_g_peak());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "NMDA_Tau_1", get_NMDA_Tau_1());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "NMDA_Tau_2", get_NMDA_Tau_2());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "NMDA_E_rev", get_NMDA_E_rev());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "NMDA_Vact", get_NMDA_Vact());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "NMDA_Sact", get_NMDA_Sact());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "GABA_A_g_peak", get_GABA_A_g_peak());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "GABA_A_Tau_1", get_GABA_A_Tau_1());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "GABA_A_Tau_2", get_GABA_A_Tau_2());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "GABA_A_E_rev", get_GABA_A_E_rev());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "GABA_B_g_peak", get_GABA_B_g_peak());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "GABA_B_Tau_1", get_GABA_B_Tau_1());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "GABA_B_Tau_2", get_GABA_B_Tau_2());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "GABA_B_E_rev", get_GABA_B_E_rev());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "NaP_g_peak", get_NaP_g_peak());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "NaP_E_rev", get_NaP_E_rev());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "KNa_g_peak", get_KNa_g_peak());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "KNa_E_rev", get_KNa_E_rev());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "T_g_peak", get_T_g_peak());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "T_E_rev", get_T_E_rev());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "h_g_peak", get_h_g_peak());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "h_E_rev", get_h_E_rev());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "KNa_D_EQ", get_KNa_D_EQ());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "V_m", get_V_m());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "Theta", get_Theta());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "g_AMPA", get_g_AMPA());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "g_NMDA", get_g_NMDA());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "g_GABAA", get_g_GABAA());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "g_GABAB", get_g_GABAB());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "IKNa_D", get_IKNa_D());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "IT_m", get_IT_m());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "IT_h", get_IT_h());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "Ih_m", get_Ih_m());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<long>(__d, "r_potassium", get_r_potassium());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<bool>(__d, "g_spike", get_g_spike());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "__D_g_AMPA", get___D_g_AMPA());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "__D_g_NMDA", get___D_g_NMDA());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "__D_g_GABAA", get___D_g_GABAA());

  /* generated by template org.nest.nestml.neuron.function.WriteInDictionary*/

  def<double>(__d, "__D_g_GABAB", get___D_g_GABAB());

  DictionaryDatum __receptor_type = new Dictionary();
  (*__receptor_type)["AMPA"] = AMPA;
  (*__receptor_type)["NMDA"] = NMDA;
  (*__receptor_type)["GABA_A"] = GABA_A;
  (*__receptor_type)["GABA_B"] = GABA_B;
  (*__d)["receptor_types"] = __receptor_type;

  (*__d)[nest::names::recordables] = recordablesMap_.get_list();
}

inline void ht_neuron_nestml::set_status(const DictionaryDatum &__d) {
  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_E_Na = get_E_Na();
  updateValue<double>(__d, "E_Na", tmp_E_Na);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_E_K = get_E_K();
  updateValue<double>(__d, "E_K", tmp_E_K);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_g_NaL = get_g_NaL();
  updateValue<double>(__d, "g_NaL", tmp_g_NaL);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_g_KL = get_g_KL();
  updateValue<double>(__d, "g_KL", tmp_g_KL);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_Tau_m = get_Tau_m();
  updateValue<double>(__d, "Tau_m", tmp_Tau_m);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_Theta_eq = get_Theta_eq();
  updateValue<double>(__d, "Theta_eq", tmp_Theta_eq);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_Tau_theta = get_Tau_theta();
  updateValue<double>(__d, "Tau_theta", tmp_Tau_theta);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_Tau_spike = get_Tau_spike();
  updateValue<double>(__d, "Tau_spike", tmp_Tau_spike);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_t_spike = get_t_spike();
  updateValue<double>(__d, "t_spike", tmp_t_spike);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_AMPA_g_peak = get_AMPA_g_peak();
  updateValue<double>(__d, "AMPA_g_peak", tmp_AMPA_g_peak);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_AMPA_E_rev = get_AMPA_E_rev();
  updateValue<double>(__d, "AMPA_E_rev", tmp_AMPA_E_rev);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_AMPA_Tau_1 = get_AMPA_Tau_1();
  updateValue<double>(__d, "AMPA_Tau_1", tmp_AMPA_Tau_1);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_AMPA_Tau_2 = get_AMPA_Tau_2();
  updateValue<double>(__d, "AMPA_Tau_2", tmp_AMPA_Tau_2);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_NMDA_g_peak = get_NMDA_g_peak();
  updateValue<double>(__d, "NMDA_g_peak", tmp_NMDA_g_peak);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_NMDA_Tau_1 = get_NMDA_Tau_1();
  updateValue<double>(__d, "NMDA_Tau_1", tmp_NMDA_Tau_1);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_NMDA_Tau_2 = get_NMDA_Tau_2();
  updateValue<double>(__d, "NMDA_Tau_2", tmp_NMDA_Tau_2);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_NMDA_E_rev = get_NMDA_E_rev();
  updateValue<double>(__d, "NMDA_E_rev", tmp_NMDA_E_rev);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_NMDA_Vact = get_NMDA_Vact();
  updateValue<double>(__d, "NMDA_Vact", tmp_NMDA_Vact);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_NMDA_Sact = get_NMDA_Sact();
  updateValue<double>(__d, "NMDA_Sact", tmp_NMDA_Sact);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_GABA_A_g_peak = get_GABA_A_g_peak();
  updateValue<double>(__d, "GABA_A_g_peak", tmp_GABA_A_g_peak);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_GABA_A_Tau_1 = get_GABA_A_Tau_1();
  updateValue<double>(__d, "GABA_A_Tau_1", tmp_GABA_A_Tau_1);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_GABA_A_Tau_2 = get_GABA_A_Tau_2();
  updateValue<double>(__d, "GABA_A_Tau_2", tmp_GABA_A_Tau_2);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_GABA_A_E_rev = get_GABA_A_E_rev();
  updateValue<double>(__d, "GABA_A_E_rev", tmp_GABA_A_E_rev);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_GABA_B_g_peak = get_GABA_B_g_peak();
  updateValue<double>(__d, "GABA_B_g_peak", tmp_GABA_B_g_peak);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_GABA_B_Tau_1 = get_GABA_B_Tau_1();
  updateValue<double>(__d, "GABA_B_Tau_1", tmp_GABA_B_Tau_1);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_GABA_B_Tau_2 = get_GABA_B_Tau_2();
  updateValue<double>(__d, "GABA_B_Tau_2", tmp_GABA_B_Tau_2);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_GABA_B_E_rev = get_GABA_B_E_rev();
  updateValue<double>(__d, "GABA_B_E_rev", tmp_GABA_B_E_rev);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_NaP_g_peak = get_NaP_g_peak();
  updateValue<double>(__d, "NaP_g_peak", tmp_NaP_g_peak);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_NaP_E_rev = get_NaP_E_rev();
  updateValue<double>(__d, "NaP_E_rev", tmp_NaP_E_rev);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_KNa_g_peak = get_KNa_g_peak();
  updateValue<double>(__d, "KNa_g_peak", tmp_KNa_g_peak);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_KNa_E_rev = get_KNa_E_rev();
  updateValue<double>(__d, "KNa_E_rev", tmp_KNa_E_rev);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_T_g_peak = get_T_g_peak();
  updateValue<double>(__d, "T_g_peak", tmp_T_g_peak);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_T_E_rev = get_T_E_rev();
  updateValue<double>(__d, "T_E_rev", tmp_T_E_rev);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_h_g_peak = get_h_g_peak();
  updateValue<double>(__d, "h_g_peak", tmp_h_g_peak);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_h_E_rev = get_h_E_rev();
  updateValue<double>(__d, "h_E_rev", tmp_h_E_rev);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_KNa_D_EQ = get_KNa_D_EQ();
  updateValue<double>(__d, "KNa_D_EQ", tmp_KNa_D_EQ);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_V_m = get_V_m();
  updateValue<double>(__d, "V_m", tmp_V_m);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_Theta = get_Theta();
  updateValue<double>(__d, "Theta", tmp_Theta);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_g_AMPA = get_g_AMPA();
  updateValue<double>(__d, "g_AMPA", tmp_g_AMPA);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_g_NMDA = get_g_NMDA();
  updateValue<double>(__d, "g_NMDA", tmp_g_NMDA);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_g_GABAA = get_g_GABAA();
  updateValue<double>(__d, "g_GABAA", tmp_g_GABAA);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_g_GABAB = get_g_GABAB();
  updateValue<double>(__d, "g_GABAB", tmp_g_GABAB);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_IKNa_D = get_IKNa_D();
  updateValue<double>(__d, "IKNa_D", tmp_IKNa_D);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_IT_m = get_IT_m();
  updateValue<double>(__d, "IT_m", tmp_IT_m);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_IT_h = get_IT_h();
  updateValue<double>(__d, "IT_h", tmp_IT_h);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp_Ih_m = get_Ih_m();
  updateValue<double>(__d, "Ih_m", tmp_Ih_m);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  long tmp_r_potassium = get_r_potassium();
  updateValue<long>(__d, "r_potassium", tmp_r_potassium);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  bool tmp_g_spike = get_g_spike();
  updateValue<bool>(__d, "g_spike", tmp_g_spike);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp___D_g_AMPA = get___D_g_AMPA();
  updateValue<double>(__d, "__D_g_AMPA", tmp___D_g_AMPA);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp___D_g_NMDA = get___D_g_NMDA();
  updateValue<double>(__d, "__D_g_NMDA", tmp___D_g_NMDA);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp___D_g_GABAA = get___D_g_GABAA();
  updateValue<double>(__d, "__D_g_GABAA", tmp___D_g_GABAA);

  /* generated by template
   * org.nest.nestml.neuron.function.ReadFromDictionaryToTmp*/

  double tmp___D_g_GABAB = get___D_g_GABAB();
  updateValue<double>(__d, "__D_g_GABAB", tmp___D_g_GABAB);

  // We now know that (ptmp, stmp) are consistent. We do not
  // write them back to (P_, S_) before we are also sure that
  // the properties to be set in the parent class are internally
  // consistent.
  Archiving_Node::set_status(__d);

  // if we get here, temporaries contain consistent set of properties
  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_E_Na(tmp_E_Na);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_E_K(tmp_E_K);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_g_NaL(tmp_g_NaL);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_g_KL(tmp_g_KL);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_Tau_m(tmp_Tau_m);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_Theta_eq(tmp_Theta_eq);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_Tau_theta(tmp_Tau_theta);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_Tau_spike(tmp_Tau_spike);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_t_spike(tmp_t_spike);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_AMPA_g_peak(tmp_AMPA_g_peak);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_AMPA_E_rev(tmp_AMPA_E_rev);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_AMPA_Tau_1(tmp_AMPA_Tau_1);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_AMPA_Tau_2(tmp_AMPA_Tau_2);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_NMDA_g_peak(tmp_NMDA_g_peak);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_NMDA_Tau_1(tmp_NMDA_Tau_1);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_NMDA_Tau_2(tmp_NMDA_Tau_2);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_NMDA_E_rev(tmp_NMDA_E_rev);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_NMDA_Vact(tmp_NMDA_Vact);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_NMDA_Sact(tmp_NMDA_Sact);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_GABA_A_g_peak(tmp_GABA_A_g_peak);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_GABA_A_Tau_1(tmp_GABA_A_Tau_1);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_GABA_A_Tau_2(tmp_GABA_A_Tau_2);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_GABA_A_E_rev(tmp_GABA_A_E_rev);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_GABA_B_g_peak(tmp_GABA_B_g_peak);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_GABA_B_Tau_1(tmp_GABA_B_Tau_1);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_GABA_B_Tau_2(tmp_GABA_B_Tau_2);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_GABA_B_E_rev(tmp_GABA_B_E_rev);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_NaP_g_peak(tmp_NaP_g_peak);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_NaP_E_rev(tmp_NaP_E_rev);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_KNa_g_peak(tmp_KNa_g_peak);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_KNa_E_rev(tmp_KNa_E_rev);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_T_g_peak(tmp_T_g_peak);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_T_E_rev(tmp_T_E_rev);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_h_g_peak(tmp_h_g_peak);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_h_E_rev(tmp_h_E_rev);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_KNa_D_EQ(tmp_KNa_D_EQ);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_V_m(tmp_V_m);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_Theta(tmp_Theta);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_g_AMPA(tmp_g_AMPA);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_g_NMDA(tmp_g_NMDA);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_g_GABAA(tmp_g_GABAA);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_g_GABAB(tmp_g_GABAB);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_IKNa_D(tmp_IKNa_D);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_IT_m(tmp_IT_m);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_IT_h(tmp_IT_h);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_Ih_m(tmp_Ih_m);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_r_potassium(tmp_r_potassium);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set_g_spike(tmp_g_spike);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set___D_g_AMPA(tmp___D_g_AMPA);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set___D_g_NMDA(tmp___D_g_NMDA);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set___D_g_GABAA(tmp___D_g_GABAA);

  /* generated by template
   * org.nest.nestml.neuron.function.AssignTmpDictionaryValue*/

  set___D_g_GABAB(tmp___D_g_GABAB);
};

#endif /* #ifndef HT_NEURON_NESTML */
#endif /* HAVE GSL */
