/*
Name: iaf_psc_exp_nestml - Leaky integrate-and-fire neuron model with exponential
                   PSCs.

Description:
iaf_psc_exp_nestml is an implementation of a leaky integrate-and-fire model
with exponential shaped postsynaptic currents (PSCs) according to [1].
Thus, postsynaptic currents have an infinitely short rise time.

The threshold crossing is followed by an absolute refractory period (t_ref)
during which the membrane potential is clamped to the resting potential
and spiking is prohibited.

The linear subthresold dynamics is integrated by the Exact
Integration scheme [2]. The neuron dynamics is solved on the time
grid given by the computation step size. Incoming as well as emitted
spikes are forced to that grid.

An additional state variable and the corresponding differential
equation represents a piecewise constant external current.

The general framework for the consistent formulation of systems with
neuron like dynamics interacting by point events is described in
[2]. A flow chart can be found in [3].

Remarks:
The present implementation uses individual variables for the
components of the state vector and the non-zero matrix elements of
the propagator.  Because the propagator is a lower triangular matrix
no full matrix multiplication needs to be carried out and the
computation can be done "in place" i.e. no temporary state vector
object is required.

The template support of recent C++ compilers enables a more succinct
formulation without loss of runtime performance already at minimal
optimization levels. A future version of iaf_psc_exp_nestml will probably
address the problem of efficient usage of appropriate vector and
matrix objects.

Remarks: If tau_m is very close to tau_syn_ex or tau_syn_in, the model
will numerically behave as if tau_m is equal to tau_syn_ex or
tau_syn_in, respectively, to avoid numerical instabilities.
For details, please see IAF_Neruons_Singularity.ipynb in the
NEST source code (docs/model_details).

iaf_psc_exp_nestml can handle current input in two ways: Current input
through receptor_type 0 are handled as stepwise constant current
input as in other iaf models, i.e., this current directly enters
the membrane potential equation. Current input through
receptor_type 1, in contrast, is filtered through an exponential
kernel with the time constant of the excitatory synapse,
tau_syn_ex. For an example application, see [4].

References:
[1] Misha Tsodyks, Asher Uziel, and Henry Markram (2000) Synchrony Generation
in Recurrent Networks with Frequency-Dependent Synapses, The Journal of
Neuroscience, 2000, Vol. 20 RC50 p. 1-5
[2] Rotter S & Diesmann M (1999) Exact simulation of time-invariant linear
systems with applications to neuronal modeling. Biologial Cybernetics
81:381-402.
[3] Diesmann M, Gewaltig M-O, Rotter S, & Aertsen A (2001) State space
analysis of synchronous spiking in cortical neural networks.
Neurocomputing 38-40:565-571.
[4] Schuecker J, Diesmann M, Helias M (2015) Modulated escape from a
metastable state driven by colored noise.
Physical Review E 92:052119

Sends: SpikeEvent

Receives: SpikeEvent, CurrentEvent, DataLoggingRequest

SeeAlso: iaf_psc_exp_ps

FirstVersion: March 2006
Author: Moritz Helias
*/
neuron iaf_psc_exp_neuron:

  state:
    V_abs mV
    function V_m mV = V_abs + E_L # Membrane potential.
    r integer                               # counts number of tick during the refractory period
  end

  equations:
    shape I_shape_in = exp(-1/tau_syn_in*t)
    shape I_shape_ex = exp(-1/tau_syn_ex*t)
    function  I_syn mV = (convolve(I_shape_in, in_spikes) + convolve(I_shape_ex, ex_spikes) + I_e + currents)
    V_abs' = -V_abs/tau_m + (I_syn/C_m) *nS
  end

  parameters:
    C_m pF = 250pF       # Capacity of the membrane
    tau_m ms = 10ms      # Membrane time constant.
    tau_syn_in ms = 2ms  # Time constant of synaptic current.
    tau_syn_ex ms = 2ms  # Time constant of synaptic current.
    t_ref ms = 2ms       # Duration of refractory period
    E_L  mV = -70mV      # Resting potential.
    function V_reset mV = -70mV - E_L # reset value of the membrane potential
    function Theta   mV = -55mV - E_L # Threshold, RELATIVE TO RESTING POTENTAIL(!).
                                   # I.e. the real threshold is (E_L_+V_th_)
    I_e     pA = 0pA     # External current.
  end

  internals:
    RefractoryCounts integer = steps(t_ref) # refractory time in steps
  end

  input:
    ex_spikes nS <- excitatory spike
    in_spikes nS <- inhibitory spike
    currents    <- current
  end

  output: spike

  update:
    if r == 0: # neuron not refractory, so evolve V
      integrate_odes()
    else:
      r = r - 1 # neuron is absolute refractory
    end

    if V_abs >= Theta: # threshold crossing
      r = RefractoryCounts
      V_abs = V_reset
      emit_spike()
    end

  end

end
