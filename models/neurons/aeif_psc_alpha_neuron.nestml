#
#aeif_psc_alpha - Conductance based exponential integrate-and-fire neuron model
###############################################################################
#
#Description
#+++++++++++
#
#aeif_psc_alpha is the adaptive exponential integrate and fire neuron according to Brette and Gerstner (2005), with post-synaptic conductances in the form of a bi-exponential ("alpha") function.
#
#The membrane potential is given by the following differential equation:
#
#.. math::

#   C_m \frac{dV_m}{dt} =
#   -g_L(V_m-E_L)+g_L\Delta_T\exp\left(\frac{V_m-V_{th}}{\Delta_T}\right) -
# g_e(t)(V_m-E_e) \\
#                                                     -g_i(t)(V_m-E_i)-w + I_e
#
#and
#
#.. math::
#
# \tau_w \frac{dw}{dt} = a(V_m-E_L) - w
#
#Note that the membrane potential can diverge to positive infinity due to the exponential term. To avoid numerical instabilities, instead of :math:`V_m`, the value :math:`\min(V_m,V_{peak})` is used in the dynamical equations.
#
#
#References
#++++++++++
#
#.. [1] Brette R and Gerstner W (2005). Adaptive exponential
#       integrate-and-fire model as an effective description of neuronal
#       activity. Journal of Neurophysiology. 943637-3642
#       DOI: https://doi.org/10.1152/jn.00686.2005
#
#
#See also
#++++++++
#
#iaf_psc_alpha, aeif_psc_exp

model aeif_psc_alpha_neuron:

    state:
        V_m mV = E_L                 # Membrane potential
        w pA = 0 pA                  # Spike-adaptation current
        refr_t ms = 0 ms             # Refractory period timer
        I_syn_exc pA = 0 pA          # AHP conductance
        I_syn_exc' pA/ms = 0 pA/ms   # AHP conductance
        I_syn_inh pA = 0 pA          # AHP conductance
        I_syn_inh' pA/ms = 0 pA/ms   # AHP conductance

    equations:
        inline V_bounded mV = min(V_m, V_peak) # prevent exponential divergence

        I_syn_exc'' = -2 * I_syn_exc' / tau_exc - I_syn_exc / tau_exc**2
        I_syn_inh'' = -2 * I_syn_inh' / tau_inh - I_syn_inh / tau_inh**2

        # Add inlines to simplify the equation definition of V_m
        inline exp_arg real = (V_bounded - V_th) / Delta_T
        inline I_spike pA = g_L * Delta_T * exp(exp_arg)

        V_m' = (-g_L * (V_bounded - E_L) + I_spike + I_syn_exc - I_syn_inh - w + I_e + I_stim) / C_m
        w' = (a * (V_bounded - E_L) - w) / tau_w

        refr_t' = -1e3 * ms/s    # refractoriness is implemented as an ODE, representing a timer counting back down to zero. XXX: TODO: This should simply read ``refr_t' = -1 / s`` (see https://github.com/nest/nestml/issues/984)

    parameters:
        # membrane parameters
        C_m pF = 281.0 pF         # Membrane Capacitance
        refr_T ms = 2 ms         # Duration of refractory period
        V_reset mV = -60.0 mV     # Reset Potential
        g_L nS = 30.0 nS          # Leak Conductance
        E_L mV = -70.6 mV         # Leak reversal Potential (aka resting potential)

        # spike adaptation parameters
        a nS = 4 nS               # Subthreshold adaptation
        b pA = 80.5 pA            # Spike-triggered adaptation
        Delta_T mV = 2.0 mV       # Slope factor
        tau_w ms = 144.0 ms       # Adaptation time constant
        V_th mV = -50.4 mV        # Threshold Potential
        V_peak mV = 0 mV          # Spike detection threshold

        # synaptic parameters
        tau_exc ms = 0.2 ms    # Synaptic Time Constant Excitatory Synapse
        tau_inh ms = 2.0 ms    # Synaptic Time Constant for Inhibitory Synapse

        # constant external input current
        I_e pA = 0 pA

    input:
        exc_spikes <- excitatory spike
        inh_spikes <- inhibitory spike
        I_stim pA <- continuous

    output:
        spike

    update:
        if refr_t > 0 ms:
            # neuron is absolute refractory, do not evolve V_m
            integrate_odes(I_syn_exc, I_syn_inh, w, refr_t)
        else:
            # always evolve all ODEs; V_m
            integrate_odes(I_syn_exc, I_syn_inh, w, V_m)

    onCondition(V_m >= V_th):
        # threshold crossing
        refr_t = refr_T    # start of the refractory period
        V_m = V_reset
        w += b
        emit_spike()

    onReceive(exc_spikes): # Spike input
        I_syn_exc' += exc_spikes * (e / tau_exc) * pA * s

    onReceive(inh_spikes): # Spike input
        I_syn_inh' += inh_spikes * (e / tau_inh) * pA * s
