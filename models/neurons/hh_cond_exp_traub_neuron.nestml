"""
hh_cond_exp_traub - Hodgkin-Huxley model for Brette et al (2007) review
#######################################################################

Description
+++++++++++

hh_cond_exp_traub is an implementation of a modified Hodgkin-Huxley model.

This model was specifically developed for a major review of simulators [1]_,
based on a model of hippocampal pyramidal cells by Traub and Miles [2]_.
The key differences between the current model and the model in [2]_ are:

- This model is a point neuron, not a compartmental model.
- This model includes only I_Na and I_K, with simpler I_K dynamics than
  in [2]_, so it has only three instead of eight gating variables;
  in particular, all Ca dynamics have been removed.
- Incoming spikes induce an instantaneous conductance change followed by
  exponential decay instead of activation over time.

This model is primarily provided as reference implementation for hh_coba
example of the Brette et al (2007) review. Default parameter values are chosen
to match those used with NEST 1.9.10 when preparing data for [1]_. Code for all
simulators covered is available from ModelDB [3]_.

Note: In this model, a spike is emitted if :math:`V_m >= V_T + 30` mV and
:math:`V_m` has fallen during the current time step.

To avoid that this leads to multiple spikes during the falling flank of a
spike, it is essential to choose a sufficiently long refractory period.
Traub and Miles used :math:`t_{ref} = 3` ms [2, p 118], while we used
:math:`t_{ref} = 2` ms in [2]_.

References
++++++++++

.. [1] Brette R et al. (2007). Simulation of networks of spiking neurons: A
       review of tools and strategies. Journal of Computational Neuroscience
       23:349-98. DOI: https://doi.org/10.1007/s10827-007-0038-6
.. [2] Traub RD and Miles R (1991). Neuronal networks of the hippocampus.
       Cambridge University Press, Cambridge UK.
.. [3] http://modeldb.yale.edu/83319


See also
++++++++

hh_psc_alpha
"""
model hh_cond_exp_traub_neuron:

    state:
        V_m mV = E_L    #  Membrane potential
        V_m_old mV = E_L    #  Membrane potential at previous timestep
        refr_t ms = 0 ms    # Refractory period timer

        Act_m real = alpha_m_init / ( alpha_m_init + beta_m_init )
        Act_h real = alpha_h_init / ( alpha_h_init + beta_h_init )
        Inact_n real = alpha_n_init / ( alpha_n_init + beta_n_init )

    equations:
        # synapses: exponential conductance
        kernel g_inh = exp(-t/tau_syn_inh)
        kernel g_exc = exp(-t/tau_syn_exc)

        # Add aliases to simplify the equation definition of V_m
        inline I_Na  pA = g_Na * Act_m * Act_m * Act_m * Act_h * ( V_m - E_Na )
        inline I_K   pA  = g_K * Inact_n * Inact_n * Inact_n * Inact_n * ( V_m - E_K )
        inline I_L   pA = g_L * ( V_m - E_L )
        inline I_syn_exc pA = convolve(g_exc, exc_spikes) * nS * ( V_m - E_exc )
        inline I_syn_inh pA = convolve(g_inh, inh_spikes) * nS * ( V_m - E_inh )

        V_m' = ( -I_Na - I_K - I_L - I_syn_exc - I_syn_inh + I_e + I_stim ) / C_m
        refr_t' = -1e3 * ms/s    # refractoriness is implemented as an ODE, representing a timer counting back down to zero. XXX: TODO: This should simply read ``refr_t' = -1 / s`` (see https://github.com/nest/nestml/issues/984)

        # channel dynamics
        inline V_rel mV = V_m - V_T
        inline alpha_n 1/ms = 0.032/(ms* mV ) * ( 15. mV - V_rel) / ( exp( ( 15. mV - V_rel) / 5. mV ) - 1. )
        inline beta_n 1/ms = 0.5 /ms * exp( ( 10. mV - V_rel ) / 40. mV )
        inline alpha_m 1/ms = 0.32/(ms* mV ) * ( 13. mV - V_rel) / ( exp( ( 13. mV - V_rel) / 4. mV ) - 1. )
        inline beta_m 1/ms = 0.28/(ms* mV ) * ( V_rel  - 40. mV ) / ( exp( ( V_rel - 40. mV ) / 5. mV ) - 1. )
        inline alpha_h 1/ms = 0.128/ms * exp( ( 17. mV - V_rel) / 18. mV )
        inline beta_h 1/ms = ( 4. / ( 1. + exp( ( 40. mV - V_rel ) / 5. mV) ) ) / ms

        Act_m' = ( alpha_m - ( alpha_m + beta_m ) * Act_m )
        Act_h' = ( alpha_h - ( alpha_h + beta_h ) * Act_h )
        Inact_n' = ( alpha_n - ( alpha_n + beta_n ) * Inact_n )

    parameters:
        g_Na nS = 20000 nS        # Na Conductance
        g_K nS = 6000 nS          # K Conductance
        g_L nS = 10 nS            # Leak Conductance
        C_m pF = 200 pF           # Membrane Capacitance
        E_Na mV = 50 mV           # Reversal potentials
        E_K mV = -90 mV           # Potassium reversal potential
        E_L mV = -60 mV           # Leak reversal potential (aka resting potential)
        V_T mV = -63 mV           # Voltage offset that controls dynamics. For default
                                  # parameters, V_T = -63 mV results in a threshold around -50 mV.
        tau_syn_exc ms = 5 ms     # Synaptic time constant of excitatory synapse
        tau_syn_inh ms = 10 ms    # Synaptic time constant of inhibitory synapse
        refr_T ms = 2 ms          # Duration of refractory period
        E_exc mV = 0 mV           # Excitatory synaptic reversal potential
        E_inh mV = -80 mV         # Inhibitory synaptic reversal potential

        alpha_n_init 1/ms = 0.032/(ms* mV ) * ( 15. mV - E_L) / ( exp( ( 15. mV - E_L) / 5. mV ) - 1. )
        beta_n_init 1/ms = 0.5 /ms * exp( ( 10. mV - E_L ) / 40. mV )
        alpha_m_init 1/ms = 0.32/(ms* mV ) * ( 13. mV - E_L) / ( exp( ( 13. mV - E_L) / 4. mV ) - 1. )
        beta_m_init 1/ms = 0.28/(ms* mV ) * ( E_L  - 40. mV ) / ( exp( ( E_L - 40. mV ) / 5. mV ) - 1. )
        alpha_h_init 1/ms = 0.128/ms * exp( ( 17. mV - E_L) / 18. mV )
        beta_h_init 1/ms = ( 4. / ( 1. + exp( ( 40. mV - E_L ) / 5. mV) ) ) / ms

        # constant external input current
        I_e pA = 0 pA

    input:
        inh_spikes <- inhibitory spike
        exc_spikes <- excitatory spike
        I_stim pA <- continuous

    output:
        spike

    update:
        # Hodgkin-Huxley type model: ODEs are always integrated, regardless of refractory state
        V_m_old = V_m
        if refr_t > 0 ms:
            # neuron is absolute refractory
            integrate_odes(V_m, Inact_n, Act_h, Act_m, refr_t)
        else:
            # neuron not refractory
            integrate_odes(V_m, Inact_n, Act_h, Act_m)

    onCondition(refr_t <= 0 ms and V_m > V_T + 30 mV and V_m_old > V_m):
        refr_t = refr_T    # start of the refractory period
        emit_spike()
