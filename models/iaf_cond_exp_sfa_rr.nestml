/* BeginDocumentation
Name: iaf_cond_exp_sfa_rr_implicit - Simple conductance based leaky integrate-and-fire
                            neuron model.

Description:
iaf_cond_exp_sfa_rr is an iaf_cond_exp_sfa_rr i.e. an implementation of a
spiking neuron using IAF dynamics with conductance-based synapses,
with additional spike-frequency adaptation and relative refractory
mechanisms as described in Dayan+Abbott, 2001, page 166.

As for the iaf_cond_exp_sfa_rr, Incoming spike events induce a post-synaptic
change  of  conductance  modelled  by an  exponential  function.  The
exponential function is  normalised such that an event  of weight 1.0
results in a peak current of 1 nS.

Outgoing spike events induce a change of the adaptation and relative
refractory conductances by q_sfa and q_rr, respectively.  Otherwise
these conductances decay exponentially with time constants tau_sfa
and tau_rr, respectively.

Sends: SpikeEvent

Receives: SpikeEvent, CurrentEvent, DataLoggingRequest


References:

Meffin, H., Burkitt, A. N., & Grayden, D. B. (2004). An analytical
model for the large, fluctuating synaptic conductance state typical of
neocortical neurons in vivo. J.  Comput. Neurosci., 16, 159-175.

Dayan, P. and Abbott, L. F. (2001). Theoretical Neuroscience, MIT Press (p166)

Author: Sven Schrader, Eilif Muller

SeeAlso: iaf_cond_exp_sfa_rr, aeif_cond_alpha, iaf_psc_delta, iaf_psc_exp,
iaf_cond_alpha
*/
neuron iaf_cond_exp_sfa_rr_neuron:

  state:
    V_m mV = E_L ## membrane potential
    g_sfa nS     ## inputs from the sfa conductance
    g_rr nS      ## inputs from the rr conductance
    r integer    ## counts number of tick during the refractory period
  end

  equations:
    shape g_in = exp(-t/tau_syn_in) ## inputs from the inh conductance
    shape g_ex = exp(-t/tau_syn_ex) ## inputs from the exc conductance

    g_sfa' = -g_sfa / tau_sfa
    g_rr' = g_rr / tau_rr

    function I_syn_exc pA = convolve(g_ex, spikesExc) * ( V_m - E_ex )
    function I_syn_inh pA = convolve(g_in, spikesInh) * ( V_m - E_in )
    function I_L pA = g_L * ( V_m - E_L )
    function I_sfa pA = g_sfa * ( V_m - E_sfa )
    function I_rr pA = g_rr * ( V_m - E_rr )

    V_m' = ( -I_L + currents + I_e - I_syn_exc - I_syn_inh - I_sfa - I_rr ) / C_m
  end

  parameters:
    V_th mV = -57.0mV      ## Threshold Potential in mV
    V_reset mV = -70.0mV   ## Reset Potential in mV
    t_ref ms = 0.5ms       ## Refractory period in ms
    g_L nS = 28.95nS       ## Leak Conductance in nS
    C_m pF = 289.5pF       ## Membrane Capacitance in pF
    E_ex mV = 0 mV         ## Excitatory reversal Potential in mV
    E_in mV = -75.0mV      ## Inhibitory reversal Potential in mV
    E_L mV = -70.0mV       ## Leak reversal Potential (aka resting potential) in mV
    tau_syn_ex ms = 1.5ms  ## Synaptic Time Constant Excitatory Synapse in ms
    tau_syn_in ms = 10.0ms ## Synaptic Time Constant for Inhibitory Synapse in ms
    q_sfa nS = 14.48nS     ## Outgoing spike activated quantal spike-frequency adaptation conductance increase
    q_rr nS = 3214.0nS     ## Outgoing spike activated quantal relative refractory conductance increase.
    tau_sfa ms = 110.0ms   ## Time constant of spike-frequency adaptation in ms.
    tau_rr ms = 1.97ms     ## Time constant of the relative refractory mechanism.
    E_sfa mV = -70.0mV     ## spike-frequency adaptation conductance reversal potential
    E_rr mV = -70.0mV      ## relative refractory mechanism conductance reversal potential
    I_e pA = 0pA           ## Constant Current
  end

  internals:
    RefractoryCounts integer = steps(t_ref) # refractory time in steps
  end

  input:
      spikesInh nS <- inhibitory spike
      spikesExc nS <- excitatory spike
      currents <- current
  end

  output: spike

  update:
    integrate_odes()
    if r != 0:  # neuron is absolute refractory
      r =  r - 1
      V_m = V_reset # clamp potential
    elif V_m >= V_th: # neuron is not absolute refractory
      r = RefractoryCounts
      V_m = V_reset # clamp potential
      g_sfa += q_sfa
      g_rr += q_rr
      emit_spike()
    end

  end

end


/* BeginDocumentation
Name: iaf_cond_exp_sfa_rr_implicit - Simple conductance based leaky integrate-and-fire
                            neuron model.

Description:
iaf_cond_exp_sfa_rr is an iaf_cond_exp_sfa_rr i.e. an implementation of a
spiking neuron using IAF dynamics with conductance-based synapses,
with additional spike-frequency adaptation and relative refractory
mechanisms as described in Dayan+Abbott, 2001, page 166.

As for the iaf_cond_exp_sfa_rr, Incoming spike events induce a post-synaptic
change  of  conductance  modelled  by an  exponential  function.  The
exponential function is  normalised such that an event  of weight 1.0
results in a peak current of 1 nS.

Outgoing spike events induce a change of the adaptation and relative
refractory conductances by q_sfa and q_rr, respectively.  Otherwise
these conductances decay exponentially with time constants tau_sfa
and tau_rr, respectively.

Sends: SpikeEvent

Receives: SpikeEvent, CurrentEvent, DataLoggingRequest


References:

Meffin, H., Burkitt, A. N., & Grayden, D. B. (2004). An analytical
model for the large, fluctuating synaptic conductance state typical of
neocortical neurons in vivo. J.  Comput. Neurosci., 16, 159-175.

Dayan, P. and Abbott, L. F. (2001). Theoretical Neuroscience, MIT Press (p166)

Author: Sven Schrader, Eilif Muller

SeeAlso: iaf_cond_exp_sfa_rr, aeif_cond_alpha, iaf_psc_delta, iaf_psc_exp,
iaf_cond_alpha
*/
neuron iaf_cond_exp_sfa_rr_implicit:

  state:
    V_m mV = E_L ## membrane potential
    g_in nS      ## inputs from the inh conductance
    g_ex nS      ## inputs from the exc conductance
    g_sfa nS     ## inputs from the sfa conductance
    g_rr nS      ## inputs from the rr conductance
    r integer    ## counts number of tick during the refractory period
  end

  equations:
    g_in' = -g_in/tau_syn_in
    g_ex' = -g_ex/tau_syn_ex

    g_sfa' = -g_sfa / tau_sfa
    g_rr' = g_rr / tau_rr

    function I_syn_exc pA = convolve(g_ex, spikesExc) * ( V_m - E_ex )
    function I_syn_inh pA = convolve(g_in, spikesInh) * ( V_m - E_in )
    function I_L pA = g_L * ( V_m - E_L )
    function I_sfa pA = g_sfa * ( V_m - E_sfa )
    function I_rr pA = g_rr * ( V_m - E_rr )

    V_m' = ( -I_L + currents + I_e - I_syn_exc - I_syn_inh - I_sfa - I_rr ) / C_m
  end

  parameters:
    V_th mV = -57.0mV      ## Threshold Potential in mV
    V_reset mV = -70.0mV   ## Reset Potential in mV
    t_ref ms = 0.5ms       ## Refractory period in ms
    g_L nS = 28.95nS       ## Leak Conductance in nS
    C_m pF = 289.5pF       ## Membrane Capacitance in pF
    E_ex mV = 0 mV         ## Excitatory reversal Potential in mV
    E_in mV = -75.0mV      ## Inhibitory reversal Potential in mV
    E_L mV = -70.0mV       ## Leak reversal Potential (aka resting potential) in mV
    tau_syn_ex ms = 1.5ms  ## Synaptic Time Constant Excitatory Synapse in ms
    tau_syn_in ms = 10.0ms ## Synaptic Time Constant for Inhibitory Synapse in ms
    q_sfa nS = 14.48nS     ## Outgoing spike activated quantal spike-frequency adaptation conductance increase
    q_rr nS = 3214.0nS     ## Outgoing spike activated quantal relative refractory conductance increase.
    tau_sfa ms = 110.0ms   ## Time constant of spike-frequency adaptation in ms.
    tau_rr ms = 1.97ms     ## Time constant of the relative refractory mechanism.
    E_sfa mV = -70.0mV     ## spike-frequency adaptation conductance reversal potential
    E_rr mV = -70.0mV      ## relative refractory mechanism conductance reversal potential
    I_e pA = 0pA           ## Constant Current
  end

  internals:
    RefractoryCounts integer = steps(t_ref) # refractory time in steps
  end

  input:
      spikesInh nS <- inhibitory spike
      spikesExc nS <- excitatory spike
      currents <- current
  end

  output: spike

  update:
    integrate_odes()
    if r != 0:  # neuron is absolute refractory
      r =  r - 1
      V_m = V_reset # clamp potential
    elif V_m >= V_th: # neuron is not absolute refractory
      r = RefractoryCounts
      V_m = V_reset # clamp potential
      g_sfa += q_sfa
      g_rr += q_rr
      emit_spike()
    end

    g_ex += spikesExc
    g_in += spikesInh
  end

end
