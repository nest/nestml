/*
Name: iaf_neuron_nestml - Leaky integrate-and-fire neuron model.

Description:

iaf_neuron is an implementation of a leaky integrate-and-fire model
with alpha-function shaped synaptic currents. Thus, synaptic currents
and the resulting post-synaptic potentials have a finite rise time.
The threshold crossing is followed by an absolute refractory period
during which the membrane potential is clamped to the resting potential.

The subthreshold membrane potential dynamics are given by [3]

dV_m/dt = - ( V_m - E_L ) / tau_m + I_syn(t) / C_m + I_e / C_m

where I_syn(t) is the sum of alpha-shaped synaptic currents

I_syn(t) = Sum[w_j alpha(t-t_j) for t_j in input spike times]

w_j is the synaptic weight of the connection through which the spike
at time t_j arrived. Each individual alpha-current is given by

alpha(t) = e * t/tau_s * e^{-t/tau_s} * Heaviside(t)

alpha(t=tau_s) == 1 is the maximum of the alpha-current.

The linear subthresold dynamics is integrated by the Exact
Integration scheme [1]. The neuron dynamics is solved on the time
grid given by the computation step size. Incoming as well as emitted
spikes are forced to that grid.

An additional state variable and the corresponding differential
equation represents a piecewise constant external current.

The general framework for the consistent formulation of systems with
neuron like dynamics interacting by point events is described in
[1].  A flow chart can be found in [2].

Critical tests for the formulation of the neuron model are the
comparisons of simulation results for different computation step
sizes. sli/testsuite/nest contains a number of such tests.

The iaf_neuron is the standard model used to check the consistency
of the nest simulation kernel because it is at the same time complex
enough to exhibit non-trivial dynamics and simple enough to compute
relevant measures analytically.


Remarks:
If tau_m is very close to tau_syn, the model will numerically behave as if
tau_m is equal to tau_syn to avoid numerical instabilities.
For details, please see IAF_Neruons_Singularity.ipynb in
the NEST source code (docs/model_details).

References:
[1] Rotter S & Diesmann M (1999) Exact simulation of time-invariant linear
    systems with applications to neuronal modeling. Biologial Cybernetics
    81:381-402.
[2] Diesmann M, Gewaltig M-O, Rotter S, & Aertsen A (2001) State space
    analysis of synchronous spiking in cortical neural networks.
    Neurocomputing 38-40:565-571.
[3] Morrison A, Straube S, Plesser H E, & Diesmann M (2007) Exact subthreshold
    integration with continuous spike times in discrete time neural network
    simulations. Neural Computation 19:47-79.

Sends: SpikeEvent

Receives: SpikeEvent, CurrentEvent, DataLoggingRequest

Author:  September 1999, Diesmann, Gewaltig
SeeAlso: iaf_psc_alpha, testsuite::test_iaf
*/
neuron iaf_neuron_nestml:

  # Captures the dynamic state of the neuron
  state:
    V_abs mV
    function V_m mV = V_abs + E_L # Membrane potential.
    r integer  # counts number of tick during the refractory period
  end

  # Declarative description of the updates rules
  equations:
    shape G = (e/tau_syn) * t * exp(-1/tau_syn*t)
    V_abs' = -1/Tau * (V_abs) + (convolve(G, spikes) + I_e + currents) / C_m
  end

  # these parameter are adjusted from outside
  parameters:
    C_m     pF = 250 pF [[C_m > 0 pF]]   # Capacity of the membrane
    Tau     ms = 10 ms    # Membrane time constant.
    tau_syn ms = 2 ms     # Time constant of synaptic current.
    t_ref   ms = 2 ms     # Refractory period.
    E_L     mV = -70 mV   # Resting potential.
    function V_reset mV = -70 mV - E_L
    function Theta   mV = -55 mV - E_L
    I_e     pA = 0 pA     # External current.
  end

  # helper calculations
  internals:
    # refractory time in steps
    RefractoryCounts integer = steps(t_ref)
  end

  # input sources
  input:
    spikes pA <- spike
    currents <- current
  end

  # output events
  output: spike

  # Describes how the state evolves in the time
  update:
    if r == 0: # not refractory
      integrate_odes()
      if V_abs >= Theta: # threshold crossing
        r = RefractoryCounts
        V_abs = V_reset
        # A supra-threshold membrane potential should never be observable.
        # The reset at the time of threshold crossing enables accurate
        # integration independent of the computation step size, see [2,3] for
        # details.
        emit_spike()
      end
    else:
      r = r - 1
    end

  end

end
