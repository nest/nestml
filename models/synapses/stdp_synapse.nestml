"""
stdp - Synapse model for spike-timing dependent plasticity
#########################################################

Description
+++++++++++

stdp_synapse is a synapse with spike-timing dependent plasticity (as defined in [1]_). Here the weight dependence exponent can be set separately for potentiation and depression. Examples:

=================== ==== =============================
Multiplicative STDP [2]_ mu_plus = mu_minus = 1
Additive STDP       [3]_ mu_plus = mu_minus = 0
Guetig STDP         [1]_ mu_plus, mu_minus in [0, 1]
Van Rossum STDP     [4]_ mu_plus = 0 mu_minus = 1
=================== ==== =============================


References
++++++++++

.. [1] Guetig et al. (2003) Learning Input Correlations through Nonlinear
       Temporally Asymmetric Hebbian Plasticity. Journal of Neuroscience

.. [2] Rubin, J., Lee, D. and Sompolinsky, H. (2001). Equilibrium
       properties of temporally asymmetric Hebbian plasticity, PRL
       86,364-367

.. [3] Song, S., Miller, K. D. and Abbott, L. F. (2000). Competitive
       Hebbian learning through spike-timing-dependent synaptic
       plasticity,Nature Neuroscience 3:9,919--926

.. [4] van Rossum, M. C. W., Bi, G-Q and Turrigiano, G. G. (2000).
       Stable Hebbian learning from spike timing-dependent
       plasticity, Journal of Neuroscience, 20:23,8812--8821
"""
model stdp_synapse:
    state:
        w real = 1.    @nest::weight   # Synaptic weight (> 0 for excitatory and < 0 for inhibitory synapses)
        pre_trace real = 0.
        post_trace real = 0.

    parameters:
        d ms = 1 ms  @nest::delay   # Synaptic transmission delay
        lambda real =  0.01         # (dimensionless) learning rate for causal updates
        alpha real = 1              # relative learning rate for acausal firing
        tau_tr_pre ms = 20 ms       # time constant of presynaptic trace
        tau_tr_post ms = 20 ms      # time constant of postsynaptic trace
        mu_plus real = 1            # weight dependence exponent for causal updates
        mu_minus real = 1           # weight dependence exponent for acausal updates

        Wmax real = 100.            # maximum absolute value of synaptic weight
        Wmin real = 0.              # minimum absolute value of synaptic weight

    internals:
        w_sign real = w / abs(w)   # sign of synaptic weight

    equations:
        pre_trace' = -pre_trace / tau_tr_pre
        post_trace' = -post_trace / tau_tr_post

    input:
        pre_spikes <- spike
        post_spikes <- spike

    output:
        spike

    onReceive(post_spikes):
        post_trace += 1

        # potentiate synapse
        w_ real = Wmax * (abs(w) / Wmax + (lambda * (1. - (abs(w) / Wmax))**mu_plus * pre_trace))
        w = w_sign * min(Wmax, w_)

    onReceive(pre_spikes):
        pre_trace += 1

        # depress synapse
        w_ real = Wmax * (abs(w) / Wmax - (alpha * lambda * (abs(w) / Wmax)**mu_minus * post_trace))
        w = w_sign * max(Wmin, w_)

        # deliver spike to postsynaptic partner
        emit_spike(w, d)

    update:
        integrate_odes()
