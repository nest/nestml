/* BeginDocumentation
Name: hh_psc_alpha_nestml - Hodgkin Huxley neuron model.

Description:

 hh_psc_alpha is an implementation of a spiking neuron using the Hodkin-Huxley
 formalism.

 (1) Post-syaptic currents
 Incoming spike events induce a post-synaptic change of current modelled
 by an alpha function. The alpha function is normalised such that an event of
 weight 1.0 results in a peak current of 1 pA.


 (2) Spike Detection
 Spike detection is done by a combined threshold-and-local-maximum search: if
 there is a local maximum above a certain threshold of the membrane potential,
 it is considered a spike.

Problems/Todo:

 better spike detection
 initial wavelet/spike at simulation onset

References:

 Spiking Neuron Models:
 Single Neurons, Populations, Plasticity
 Wulfram Gerstner, Werner Kistler,  Cambridge University Press

 Theoretical Neuroscience:
 Computational and Mathematical Modeling of Neural Systems
 Peter Dayan, L. F. Abbott, MIT Press (parameters taken from here)

 Hodgkin, A. L. and Huxley, A. F.,
 A Quantitative Description of Membrane Current
 and Its Application to Conduction and Excitation in Nerve,
 Journal of Physiology, 117, 500-544 (1952)

Sends: SpikeEvent

Receives: SpikeEvent, CurrentEvent, DataLoggingRequest

Authors: Schrader
SeeAlso: hh_cond_exp_traub
*/
neuron hh_psc_alpha_neuron:

  state:
    V_m mV = -65. mV # Membrane potential

    function alpha_n_init real = ( 0.01 * ( V_m / mV + 55. ) ) / ( 1. - exp( -( V_m / mV + 55. ) / 10. ) )
    function beta_n_init  real = 0.125 * exp( -( V_m / mV + 65. ) / 80. )
    function alpha_m_init real = ( 0.1 * ( V_m / mV + 40. ) ) / ( 1. - exp( -( V_m / mV + 40. ) / 10. ) )
    function beta_m_init  real = 4. * exp( -( V_m / mV + 65. ) / 18. )
    function alpha_h_init real = 0.07 * exp( -( V_m / mV + 65. ) / 20. )
    function beta_h_init  real = 1. / ( 1. + exp( -( V_m / mV + 35. ) / 10. ) )

    Act_m real =  alpha_m_init / ( alpha_m_init + beta_m_init )   # Activation variable m
    Act_h real = alpha_h_init / ( alpha_h_init + beta_h_init )    # Activation variable h
    Inact_n real =  alpha_n_init / ( alpha_n_init + beta_n_init ) # Inactivation variable n
    r integer # number of steps in the current refractory phase
  end

  equations:
    # synapses: alpha functions
    shape I_syn_in = (e/tau_syn_in) * t * exp(-t/tau_syn_in)
    shape I_syn_ex = (e/tau_syn_ex) * t * exp(-t/tau_syn_ex)

    function I_syn_exc pA = convolve(I_syn_ex, spikeExc)
    function I_syn_inh pA = convolve(I_syn_in, spikeInh)
    function I_Na  pA = g_Na * Act_m * Act_m * Act_m * Act_h * ( V_m - E_Na )
    function I_K   pA  = g_K * Inact_n * Inact_n * Inact_n * Inact_n * ( V_m - E_K )
    function I_L   pA = g_L * ( V_m - E_L )
    V_m' =( -( I_Na + I_K + I_L ) + currents + I_e + I_syn_inh + I_syn_exc ) / C_m

    # Inact_n
    function alpha_n real = ( 0.01 * ( V_m / mV + 55. ) ) / ( 1. - exp( -( V_m / mV + 55. ) / 10. ) )
    function beta_n  real = 0.125 * exp( -( V_m / mV + 65. ) / 80. )
    Inact_n' = ( alpha_n * ( 1 - Inact_n ) - beta_n * Inact_n ) / ms # n-variable

    # Act_m
    function alpha_m real = ( 0.1 * ( V_m / mV + 40. ) ) / ( 1. - exp( -( V_m / mV + 40. ) / 10. ) )
    function beta_m  real = 4. * exp( -( V_m / mV + 65. ) / 18. )
    Act_m' = ( alpha_m * ( 1 - Act_m ) - beta_m * Act_m ) / ms # m-variable

    # Act_h'
    function alpha_h real = 0.07 * exp( -( V_m / mV + 65. ) / 20. )
    function beta_h  real = 1. / ( 1. + exp( -( V_m / mV + 35. ) / 10. ) )
    Act_h' = ( alpha_h * ( 1 - Act_h ) - beta_h * Act_h ) / ms # h-variable
  end

  parameters:
    t_ref ms = 2.0 ms      # Refractory period
    g_Na nS = 12000.0nS    # Sodium peak conductance
    g_K nS = 3600.0nS      # Potassium peak conductance
    g_L nS = 30nS          # Leak conductance
    C_m pF = 100.0pF       # Membrane Capacitance
    E_Na mV = 50mV         # Sodium reversal potential
    E_K mV = -77.mV        # Potassium reversal potentia
    E_L mV = -54.402mV     # Leak reversal Potential (aka resting potential) in mV
    tau_syn_ex ms = 0.2ms  # Rise time of the excitatory synaptic alpha function i
    tau_syn_in ms = 2.0ms  # Rise time of the inhibitory synaptic alpha function
    I_e pA = 0pA           # Constant Current in pA
  end

  internals:
    RefractoryCounts integer = steps(t_ref) # refractory time in steps
  end

  input:
      spikeInh pA <- inhibitory spike
      spikeExc pA <- excitatory spike
      currents <- current
  end

  output: spike

  update:
    U_old mV = V_m
    integrate_odes()
    # sending spikes: crossing 0 mV, pseudo-refractoriness and local maximum...
    if r > 0: # is refractory?
      r -= 1
    elif V_m > 0 mV and U_old > V_m: # threshold && maximum
      r = RefractoryCounts
      emit_spike()
    end

  end

end


/* BeginDocumentation
Name: hh_psc_alpha_nestml - Hodgkin Huxley neuron model.

Description:

 hh_psc_alpha is an implementation of a spiking neuron using the Hodkin-Huxley
 formalism.

 (1) Post-syaptic currents
 Incoming spike events induce a post-synaptic change of current modelled
 by an alpha function. The alpha function is normalised such that an event of
 weight 1.0 results in a peak current of 1 pA.


 (2) Spike Detection
 Spike detection is done by a combined threshold-and-local-maximum search: if
 there is a local maximum above a certain threshold of the membrane potential,
 it is considered a spike.

Problems/Todo:

 better spike detection
 initial wavelet/spike at simulation onset

References:

 Spiking Neuron Models:
 Single Neurons, Populations, Plasticity
 Wulfram Gerstner, Werner Kistler,  Cambridge University Press

 Theoretical Neuroscience:
 Computational and Mathematical Modeling of Neural Systems
 Peter Dayan, L. F. Abbott, MIT Press (parameters taken from here)

 Hodgkin, A. L. and Huxley, A. F.,
 A Quantitative Description of Membrane Current
 and Its Application to Conduction and Excitation in Nerve,
 Journal of Physiology, 117, 500-544 (1952)

Sends: SpikeEvent

Receives: SpikeEvent, CurrentEvent, DataLoggingRequest

Authors: Schrader
SeeAlso: hh_cond_exp_traub
*/
neuron hh_psc_alpha_implicit:

  state:
    V_m mV = -65. mV # Membrane potential
    I_syn_ex pA  # inputs from the exc spikes
    I_syn_ex' pA/ms  # inputs from the exc spikes
    I_syn_in pA  # inputs from the inh spikes
    I_syn_in' pA/ms  # inputs from the inh spikes

    function alpha_n_init real = ( 0.01 * ( V_m / mV + 55. ) ) / ( 1. - exp( -( V_m / mV + 55. ) / 10. ) )
    function beta_n_init  real = 0.125 * exp( -( V_m / mV + 65. ) / 80. )
    function alpha_m_init real = ( 0.1 * ( V_m / mV + 40. ) ) / ( 1. - exp( -( V_m / mV + 40. ) / 10. ) )
    function beta_m_init  real = 4. * exp( -( V_m / mV + 65. ) / 18. )
    function alpha_h_init real = 0.07 * exp( -( V_m / mV + 65. ) / 20. )
    function beta_h_init  real = 1. / ( 1. + exp( -( V_m / mV + 35. ) / 10. ) )

    Act_m real =  alpha_m_init / ( alpha_m_init + beta_m_init )   # Activation variable m
    Act_h real = alpha_h_init / ( alpha_h_init + beta_h_init )    # Activation variable h
    Inact_n real =  alpha_n_init / ( alpha_n_init + beta_n_init ) # Inactivation variable n
    r integer # number of steps in the current refractory phase
  end

  equations:
    # synapses: alpha functions
    I_syn_in' = I_syn_in'
    I_syn_in'' = (-2/tau_syn_in) * I_syn_in'-(1/tau_syn_in**2) * I_syn_in

    ## alpha function for the g_ex
    I_syn_ex' = I_syn_ex'
    I_syn_ex'' = (-2/tau_syn_ex) * I_syn_ex'-(1/tau_syn_ex**2) * I_syn_ex

    function I_syn_exc pA = convolve(I_syn_ex, spikeExc)
    function I_syn_inh pA = convolve(I_syn_in, spikeInh)
    function I_Na  pA = g_Na * Act_m * Act_m * Act_m * Act_h * ( V_m - E_Na )
    function I_K   pA  = g_K * Inact_n * Inact_n * Inact_n * Inact_n * ( V_m - E_K )
    function I_L   pA = g_L * ( V_m - E_L )
    V_m' =( -( I_Na + I_K + I_L ) + currents + I_e + I_syn_inh + I_syn_exc ) / C_m

    # Inact_n
    function alpha_n real = ( 0.01 * ( V_m / mV + 55. ) ) / ( 1. - exp( -( V_m / mV + 55. ) / 10. ) )
    function beta_n  real = 0.125 * exp( -( V_m / mV + 65. ) / 80. )
    Inact_n' = ( alpha_n * ( 1 - Inact_n ) - beta_n * Inact_n ) / ms # n-variable

    # Act_m
    function alpha_m real = ( 0.1 * ( V_m / mV + 40. ) ) / ( 1. - exp( -( V_m / mV + 40. ) / 10. ) )
    function beta_m  real = 4. * exp( -( V_m / mV + 65. ) / 18. )
    Act_m' = ( alpha_m * ( 1 - Act_m ) - beta_m * Act_m ) / ms # m-variable

    # Act_h'
    function alpha_h real = 0.07 * exp( -( V_m / mV + 65. ) / 20. )
    function beta_h  real = 1. / ( 1. + exp( -( V_m / mV + 35. ) / 10. ) )
    Act_h' = ( alpha_h * ( 1 - Act_h ) - beta_h * Act_h ) / ms # h-variable
  end

  parameters:
    t_ref ms = 2.0 ms      # Refractory period
    g_Na nS = 12000.0nS    # Sodium peak conductance
    g_K nS = 3600.0nS      # Potassium peak conductance
    g_L nS = 30nS          # Leak conductance
    C_m pF = 100.0pF       # Membrane Capacitance
    E_Na mV = 50mV         # Sodium reversal potential
    E_K mV = -77.mV        # Potassium reversal potentia
    E_L mV = -54.402mV     # Leak reversal Potential (aka resting potential) in mV
    tau_syn_ex ms = 0.2ms  # Rise time of the excitatory synaptic alpha function i
    tau_syn_in ms = 2.0ms  # Rise time of the inhibitory synaptic alpha function
    I_e pA = 0pA           # Constant Current in pA
  end

  internals:
    # Impulse to add to DG_EXC on spike arrival to evoke unit-amplitude
    # conductance excursion.
    PSConInit_E 1/ms = e / tau_syn_ex

    # Impulse to add to DG_INH on spike arrival to evoke unit-amplitude
    # conductance excursion.
    PSConInit_I 1/ms = e / tau_syn_in


    RefractoryCounts integer = steps(t_ref) # refractory time in steps
  end

  input:
      spikeInh pA <- inhibitory spike
      spikeExc pA <- excitatory spike
      currents <- current
  end

  output: spike

  update:
    U_old mV = V_m
    integrate_odes()
    # sending spikes: crossing 0 mV, pseudo-refractoriness and local maximum...
    if r > 0: # is refractory?
      r -= 1
    elif V_m > 0 mV and U_old > V_m: # threshold && maximum
      r = RefractoryCounts
      emit_spike()
    end

    I_syn_ex' += spikeExc * PSConInit_E
    I_syn_in' += spikeInh * PSConInit_I
  end

end
