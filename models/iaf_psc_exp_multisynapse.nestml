/*
Name: iaf_psc_exp_multisynapse_nestml - Leaky integrate-and-fire neuron model with
                                 multiple ports.

Description:

 iaf_psc_exp_multisynapse_nestml is a direct extension of iaf_psc_exp_nestml.
 On the postsynapic side, there can be arbitrarily many synaptic
 time constants (iaf_psc_exp has exactly two: tau_syn_ex and tau_syn_in).

 This can be reached by specifying separate receptor ports, each for
 a different time constant. The port number has to match the respective
 "receptor_type" in the connectors.

Sends: SpikeEvent

Receives: SpikeEvent, CurrentEvent, DataLoggingRequest

Author:  Plesser, adapted from iaf_psc_alpha_multisynapse
SeeAlso: iaf_psc_alpha, iaf_psc_delta, iaf_psc_exp, iaf_cond_exp,
iaf_psc_alpha_multisynapse
*/
neuron iaf_psc_exp_multisynapse_neuron:

  state:
    V_abs mV # membrane potential
    function V_m mV = V_abs + E_L # Relative membrane potential.
                               # I.e. the real threshold is (V_m-E_L).
    r integer                  # counts number of tick during the refractory period
  end

  equations:
      shape I_shape = exp(-1/tau_syn*t)
      function I_syn pA = (convolve(I_shape, spikes) + I_e + currents)
      V_abs' = -1/tau_m * V_abs + 1/C_m * I_syn
  end

  parameters:
    receptors integer  = 100
    C_m     pF = 250pF  # Capacity of the membrane
    tau_m     ms = 10ms # Membrane time constant.
    tau_syn ms[receptors] = 2ms     # Time constant of synaptic current.
    t_ref   ms = 2ms    # Refractory period.
    E_L     mV = 0mV    # Resting potential.
    function V_reset mV = -55.0mV - E_L # Reset value of the membrane potential
                                     # RELATIVE TO RESTING POTENTIAL(!).
                                     # I.e. the real threshold is (V_reset + E_L).
    function V_th   mV = -70.0mV - E_L # Threshold, RELATIVE TO RESTING POTENTIAL(!).
                                    # I.e. the real threshold is (E_L+V_th).
    I_e     pA = 0pA     # External current.
  end


  internals:
    # refractory time in steps
    RefractoryCounts integer = steps(t_ref)
  end

  input:
    spikes[receptors] nS <- spike
    currents <- current
  end

  output: spike

  update:
    if r == 0: # neuron not refractory, so evolve V_abs
      integrate_odes()
    else:
      r = r - 1 # neuron is absolute refractory
    end

    if V_abs >= V_th: # threshold crossing
      r = RefractoryCounts
      V_abs = V_reset
      emit_spike()
    end

  end

end
