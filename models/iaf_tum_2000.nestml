/*
  Name: iaf_tum_2000_nestml - Leaky integrate-and-fire neuron model with exponential
                          PSCs.

  Description:

  iaf_tum_2000_nestml is an implementation of a leaky integrate-and-fire model
  with exponential shaped postsynaptic currents (PSCs) according to [1].
  The postsynaptic currents have an infinitely short rise time.
  In particular, this model allows setting an absolute and relative
  refractory time separately, as requied by [1].

  The threshold crossing is followed by an absolute refractory period (tau_abs)
  during which the membrane potential is clamped to the resting potential.
  During the total refractory period, the membrane potential evolves,
  but the neuron will not emit a spike, even if the membrane potential
  reaches threshold. The total refratory time must be larger or equal to
  the absolute refractory time. If equal, the refractoriness of the model
  if equivalent to the other models of NEST.

  The linear subthresold dynamics is integrated by the Exact
  Integration scheme [2]. The neuron dynamics is solved on the time
  grid given by the computation step size. Incoming as well as emitted
  spikes are forced to that grid.

  An additional state variable and the corresponding differential
  equation represents a piecewise constant external current.

  The general framework for the consistent formulation of systems with
  neuron like dynamics interacting by point events is described in
  [2]. A flow chart can be found in [3].

  Remarks:

  The present implementation uses individual variables for the
  components of the state vector and the non-zero matrix elements of
  the propagator.  Because the propagator is a lower triangular matrix
  no full matrix multiplication needs to be carried out and the
  computation can be done "in place" i.e. no temporary state vector
  object is required.

  The template support of recent C++ compilers enables a more succinct
  formulation without loss of runtime performance already at minimal
  optimization levels. A future version of iaf_tum_2000_nestml will probably
  address the problem of efficient usage of appropriate vector and
  matrix objects.


  Parameters:

  The following parameters can be set in the status dictionary.

  E_L          double - Resting membrane potential in mV.
  C_m          double - Capacity of the membrane in pF
  tau_m        double - Membrane time constant in ms.
  tau_syn_ex   double - Time constant of postsynaptic excitatory currents in ms
  tau_syn_in   double - Time constant of postsynaptic inhibitory currents in ms
  t_ref_abs    double - Duration of absolute refractory period (V_m = V_reset)
                       in ms.
  t_ref_tot    double - Duration of total refractory period (no spiking) in ms.
  V_m          double - Membrane potential in mV
  V_th         double - Spike threshold in mV.
  V_reset      double - Reset membrane potential after a spike in mV.
  I_e          double - Constant input current in pA.
  t_spike      double - Point in time of last spike in ms.

  Remarks:
  If tau_m is very close to tau_syn_ex or tau_syn_in, the model
  will numerically behave as if tau_m is equal to tau_syn_ex or
  tau_syn_in, respectively, to avoid numerical instabilities.
  For details, please see IAF_Neruons_Singularity.ipynb in
  the NEST source code (docs/model_details).

  References:
  [1] Misha Tsodyks, Asher Uziel, and Henry Markram (2000) Synchrony Generation
  in Recurrent Networks with Frequency-Dependent Synapses, The Journal of
  Neuroscience, 2000, Vol. 20 RC50 p. 1-5
  [2] Rotter S & Diesmann M (1999) Exact simulation of time-invariant linear
  systems with applications to neuronal modeling. Biologial Cybernetics
  81:381-402.
  [3] Diesmann M, Gewaltig M-O, Rotter S, & Aertsen A (2001) State space
  analysis of synchronous spiking in cortical neural networks.
  Neurocomputing 38-40:565-571.

  Sends: SpikeEvent

  Receives: SpikeEvent, CurrentEvent, DataLoggingRequest

  FirstVersion: March 2006
  Author: Moritz Helias
*/
neuron iaf_tum_2000_neuron:

  state:
    V_m mV # Membrane potential
    r_tot  integer
    r_abs  integer
  end

  equations:
    shape I_shape_in = exp(-1/tau_syn_in*t)
    shape I_shape_ex = exp(-1/tau_syn_ex*t)
    function I_syn pA = (convolve(I_shape_in, in_spikes) + convolve(I_shape_ex, ex_spikes) + I_e + currents)
    V_m' = -1/tau_m * V_m + 1/C_m * I_syn
  end

  parameters:
    C_m  pF = 250 pF     # Capacity of the membrane
    tau_m  ms = 10 ms    # Membrane time constant.
    tau_syn_in ms = 2 ms  # Time constant of synaptic current.
    tau_syn_ex ms = 2 ms  # Time constant of synaptic current.
    t_ref_abs ms = 2 ms   # absolute refractory period.
    # total refractory period
    t_ref_tot   ms = 2 ms     [[t_ref_tot >= t_ref_abs]] # if t_ref_abs == t_ref_tot iaf_tum_2000 equivalent to iaf_psc_exp
    E_L     mV = -70 mV  # Resting potential.
    function V_reset mV = -70.0 mV - E_L # Reset value of the membrane potential
                                     # RELATIVE TO RESTING POTENTIAL(!).
                                     # I.e. the real threshold is (V_reset + E_L).
    function V_th mV = -55.0 mV - E_L # Threshold, RELATIVE TO RESTING POTENTIAL(!).
                                  # I.e. the real threshold is (E_L+V_th).
    I_e     pA = 0 pA     # External current.
  end

  internals:
    # TauR specifies the length of the absolute refractory period as
    # a double_t in ms. The grid based iaf_tum_2000 can only handle refractory
    # periods that are integer multiples of the computation step size (h).
    # To ensure consistency with the overall simulation scheme such conversion
    # should be carried out via objects of class nest::Time. The conversion
    # requires 2 steps:
    #     1. A time object r is constructed defining  representation of
    #        TauR in tics. This representation is then converted to computation
    #        time steps again by a strategy defined by class nest::Time.
    #     2. The refractory time in units of steps is read out get_steps(), a
    #        member function of class nest::Time.
    #
    # Choosing a TauR that is not an integer multiple of the computation time
    # step h will leed to accurate (up to the resolution h) and self-consistent
    # results. However, a neuron model capable of operating with real valued
    # spike time may exhibit a different effective refractory time.
    RefractoryCountsAbs integer = steps(t_ref_abs) [[RefractoryCountsAbs > 0]]
    RefractoryCountsTot integer = steps(t_ref_tot) [[RefractoryCountsTot > 0]]
  end


  input:
    ex_spikes nS <- excitatory spike
    in_spikes nS <- inhibitory spike
    currents    <- current
  end

  output: spike

  update:
    if r_abs == 0: # neuron not absolute refractory, so evolve V
      integrate_odes()
    else:
      r_abs -= 1 # neuron is absolute refractory
    end

    if r_tot == 0:
      if V_m >= V_th: # threshold crossing
          r_abs = RefractoryCountsAbs
          r_tot = RefractoryCountsTot
          V_m = V_reset
          emit_spike()
      end
    else:
      r_tot -= 1 # neuron is totally refractory (cannot generate spikes)
    end



  end

end
