/*
Name: izhikevich_nestml - Izhikevich neuron model

Description:
Implementation of the simple spiking neuron model introduced by Izhikevich
[1]. The dynamics are given by:
   dv/dt = 0.04*v^2 + 5*v + 140 - u + I
      du/dt = a*(b*v - u)

   if v >= V_th:
     v is set to c
     u is incremented by d

   v jumps on each spike arrival by the weight of the spike.

As published in [1], the numerics differs from the standard forward Euler
technique in two ways:
1) the new value of u is calculated based on the new value of v, rather than
the previous value
2) the variable v is updated using a time step half the size of that used to
update variable u.

This model offers both forms of integration, they can be selected using the
boolean parameter consistent_integration. To reproduce some results published
on the basis of this model, it is necessary to use the published form of the
dynamics. In this case, consistent_integration must be set to false. For all
other purposes, it is recommended to use the standard technique for forward
Euler integration. In this case, consistent_integration must be set to true
(default).

References:
[1] Izhikevich, Simple Model of Spiking Neurons,
IEEE Transactions on Neural Networks (2003) 14:1569-1572

Sends: SpikeEvent

Receives: SpikeEvent, CurrentEvent, DataLoggingRequest
FirstVersion: 2009
Author: Hanuschkin, Morrison, Kunkel
SeeAlso: iaf_psc_delta, mat2_psc_exp
*/
neuron izhikevich_neuron:

  state:
    V_m mV = -65mV # Membrane potential in mV
    U_m real = 0   # Membrane potential recovery variable
    I pA = 0. pA   # input current
  end

  equations:
    V_m' = ( 0.04 * V_m * V_m / mV + 5.0 * V_m + ( 140 - U_m ) * mV + ( (I + I_e) * GOhm ) ) / ms
    U_m' = a*(b*V_m-U_m * mV) / (mV*ms)
  end

  parameters:
    a real = 0.02   # describes time scale of recovery variable
    b real = 0.2    # sensitivity of recovery variable
    c mV = -65 mV     # after-spike reset value of V_m
    d real = 8.0    # after-spike reset value of U_m
    I_e pA = 0 pA   # Constant input current in pA. (R=1)
    V_min mV = -inf * mV # Absolute lower value for the membrane potential.
  end

  input:
    spikes mV <- spike
    currents <- current
  end

  output: spike

  update:
    integrate_odes()
    # Add synaptic current
    V_m += spikes

    # lower bound of membrane potential
    V_m = (V_m < V_min)? V_min : V_m

    # threshold crossing
    if V_m >= 30mV:
      V_m = c
      U_m += d
      emit_spike()
    end

    I = currents
  end

end
