/*
Name: aeif_cond_exp_implicit -  Conductance based exponential integrate-and-fire neuron
                         model according to Brette and g_exrstner (2005).

Description:
aeif_cond_exp_implicit is the adaptive exponential integrate and fire neuron according
to Brette and g_exrstner (2005).
Synaptic conductances are modelled as alpha-functions.

This implementation uses the embedded 4th order Rung_ex-Kutta-Fehlberg solver with
adaptive step size to integrate the differential equation.

The membrane potential is g_inven by the following differential equation:
C dV/dt= -g_L(V-E_L)+g_L*Delta_T*exp((V-V_T)/Delta_T)-g_e(t)(V-E_e)
                                                     -g_i(t)(V-E_i)-w +I_e

and

tau_w * dw/dt= a(V-E_L) -W

Parameters:
The following parameters can be set in the status dictionary.

Author: Marc-Oliver Gewaltig

Sends: SpikeEvent

Receives: SpikeEvent, CurrentEvent, DataLogg_inngRequest

References: Brette R and g_exrstner W (2005) Adaptive Exponential
            Integrate-and-Fire Model as an Effective Description of Neuronal
            Activity. J Neurophysiol 94:3637-3642

SeeAlso: iaf_cond_alpha, aeif_cond_exp
*/
neuron aeif_cond_exp_neuron:

  state:
    V_m mV = E_L  # Membrane potential
    w pA = 0 pA    # Spike-adaptation current
  end

  equations:
    function V_bounded mV = bounded_min(V_m, V_peak) # prevent exponential divergence
    shape g_in = exp(-1/tau_syn_in*t)
    shape g_ex = exp(-1/tau_syn_ex*t)

    # Add aliases to simplify the equation definition of V_m
    function exp_arg real = (V_bounded-V_th)/Delta_T
    function I_spike pA = g_L*Delta_T*exp(exp_arg)
    function I_syn_exc pA = convolve(g_ex, spikeExc) * ( V_bounded - E_ex )
    function I_syn_inh pA = convolve(g_in, spikeInh) * ( V_bounded - E_in )

    V_m' = ( -g_L*( V_bounded - E_L ) + I_spike - I_syn_exc - I_syn_inh - w + I_e + I_stim ) / C_m
    w' = (a*(V_bounded - E_L) - w)/tau_w
  end

  parameters:
    # membrane parameters
    C_m   pF = 281.0pF     # Membrane Capacitance in pF
    t_ref ms = 0.0ms       # Refractory period in ms
    V_reset mV = -60.0mV   # Reset Potential in mV
    g_L nS = 30.0nS        # Leak Conductance in nS
    E_L mV = -70.6mV       # Leak reversal Potential (aka resting potential) in mV
    I_e pA = 0pA           # Constant Current in pA

    # spike adaptation parameters
    a nS = 4nS             # Subthreshold adaptation.
    b pA = 80.5pA          # Spike-trigg_exred adaptation.
    Delta_T mV = 2.0mV     # Slope factor
    tau_w ms = 144.0ms     # Adaptation time constant in
    V_th mV = -50.4mV      # Threshold Potential
    V_peak mV = 0mV        # Spike detection threshold in mV.

    # synaptic parameters
    E_ex mV = 0mV            # Excitatory reversal Potential in mV
    tau_syn_ex ms = 0.2ms    # Synaptic Time Constant Excitatory Synapse in ms
    E_in mV = -85.0mV        # Inhibitory reversal Potential in mV
    tau_syn_in ms = 2.0ms    # Synaptic Time Constant for Inhibitory Synapse in ms


    I_stim pA = 0pA
  end

  internals:
    # refractory time in steps
    RefractoryCounts integer = steps(t_ref)
    # counts number of tick during the refractory period
    r integer
  end

  input:
      spikeInh nS <- inhibitory spike
      spikeExc nS <- excitatory spike
      currents <- current
  end

  output: spike

  update:
    integrate_odes()

    if r > 0: # refractory
      r -= 1 # decrement refractory ticks count
      V_m = V_reset # clamp potential
    elif V_m >= V_peak: # threshold crossing detection
      r = RefractoryCounts + 1
      V_m = V_reset # clamp potential
      w += b
      emit_spike()
    end


  end

end

/*
Name: aeif_cond_exp_implicit -  Conductance based exponential integrate-and-fire neuron
                         model according to Brette and g_exrstner (2005).

Description:
aeif_cond_exp_implicit is the adaptive exponential integrate and fire neuron according
to Brette and g_exrstner (2005).
Synaptic conductances are modelled as alpha-functions.

This implementation uses the embedded 4th order Rung_ex-Kutta-Fehlberg solver with
adaptive step size to integrate the differential equation.

The membrane potential is g_inven by the following differential equation:
C dV/dt= -g_L(V-E_L)+g_L*Delta_T*exp((V-V_T)/Delta_T)-g_e(t)(V-E_e)
                                                     -g_i(t)(V-E_i)-w +I_e

and

tau_w * dw/dt= a(V-E_L) -W

Parameters:
The following parameters can be set in the status dictionary.

Author: Marc-Oliver Gewaltig

Sends: SpikeEvent

Receives: SpikeEvent, CurrentEvent, DataLogg_inngRequest

References: Brette R and g_exrstner W (2005) Adaptive Exponential
            Integrate-and-Fire Model as an Effective Description of Neuronal
            Activity. J Neurophysiol 94:3637-3642

SeeAlso: iaf_cond_alpha, aeif_cond_exp
*/
neuron aeif_cond_exp_implicit:

  state:
    V_m mV = E_L  # Membrane potential
    w pA = 0pA    # Spike-adaptation current
    g_in nS = 0nS # Inhibitory synaptic conductance
    g_ex nS = 0nS # Excitatory synaptic conductance
    r integer                 # counts number of tick during the refractory period
  end

  equations:
    function V_bounded mV = min(V_m, V_peak) # prevent exponential divergence
    # exp function for the g_in, g_ex
    g_in' = -g_in/tau_syn_in
    g_ex' = -g_ex/tau_syn_ex

    # Add aliases to simplify the equation definition of V_m
    function exp_arg real = (V_bounded-V_th)/Delta_T
    function I_spike pA = g_L*Delta_T*exp(exp_arg)
    function I_syn_exc pA = convolve(g_ex, spikeExc) * ( V_bounded - E_ex )
    function I_syn_inh pA = convolve(g_in, spikeInh) * ( V_bounded - E_in )

    V_m' = ( -g_L*( V_bounded - E_L ) + I_spike - I_syn_exc - I_syn_inh - w + I_e + currents ) / C_m
    w' = (a*(V_bounded - E_L) - w)/tau_w
  end

  parameters:
    # membrane parameters
    C_m   pF = 281.0pF     # Membrane Capacitance in pF
    t_ref ms = 0.0ms       # Refractory period in ms
    V_reset mV = -60.0mV   # Reset Potential in mV
    g_L nS = 30.0nS        # Leak Conductance in nS
    E_L mV = -70.6mV       # Leak reversal Potential (aka resting potential) in mV
    I_e pA = 0pA           # Constant Current in pA

    # spike adaptation parameters
    a nS = 4nS             # Subthreshold adaptation.
    b pA = 80.5pA          # Spike-trigg_exred adaptation.
    Delta_T mV = 2.0mV     # Slope factor
    tau_w ms = 144.0ms     # Adaptation time constant in
    V_th mV = -50.4mV      # Threshold Potential
    V_peak mV = 0mV        # Spike detection threshold in mV.

    # synaptic parameters
    E_ex mV = 0mV            # Excitatory reversal Potential in mV
    tau_syn_ex ms = 0.2ms    # Synaptic Time Constant Excitatory Synapse in ms
    E_in mV = -85.0mV        # Inhibitory reversal Potential in mV
    tau_syn_in ms = 2.0ms    # Synaptic Time Constant for Inhibitory Synapse in ms
  end

  internals:
    # refractory time in steps
    RefractoryCounts integer = steps(t_ref)
  end

  input:
    spikeInh nS  <- inhibitory spike
    spikeExc nS  <- excitatory spike
    currents <- current
  end

  output: spike

  update:
    integrate_odes()

    if r > 0: # refractory
      r -= 1 # decrement refractory ticks count
      V_m = V_reset
    elif V_m >= V_peak: # threshold crossing detection
      r = RefractoryCounts
      V_m = V_reset # clamp potential
      w += b
      emit_spike()
    end

    g_ex += spikeExc
    g_in += spikeInh
  end

end
