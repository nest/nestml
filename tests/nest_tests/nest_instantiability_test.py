# -*- coding: utf-8 -*-
#
# nest_instantiability_test.py
#
# This file is part of NEST.
#
# Copyright (C) 2004 The NEST Initiative
#
# NEST is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# NEST is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NEST.  If not, see <http://www.gnu.org/licenses/>.


import nest
import numpy as np
import unittest


def strip_suffix(names_list, suffix):
    new_names_list = []
    for n in names_list:
        if n[-len(suffix):] == suffix:
            n = n[:-len(suffix)]
        new_names_list.append(n)
    return new_names_list


class NestInstantiabilityTest(unittest.TestCase):
    """Instantiate all the models generated by NESTML and run a NEST simulation. This is used for integration testing in GitHub Actions CI, to ensure that all the generated models can be instantiated. No connectivity or stimuli are defined."""

    def test_nest_instantiability(self):
        # N.B. all models are assumed to have been already built (see .travis.yml)

        nest.ResetKernel()
        nest.set_verbosity("M_ALL")
        nest.Install("nestml_allmodels_module")

        models = nest.Models(mtype="nodes")
        neuron_models = [m for m in models if str(nest.GetDefaults(m, "element_type")) == "neuron"]
        _neuron_models = strip_suffix(neuron_models, "_neuron")

        nestml_unit_test_models = [
            neuron_model_name for neuron_model_name in _neuron_models if neuron_model_name.endswith("_nestml")]

        nest.ResetKernel()

        for neuron_model in nestml_unit_test_models:
            print("Instantiating neuron model: " + str(neuron_model))
            nest.Create(neuron_model)

        nest.Simulate(100.)
