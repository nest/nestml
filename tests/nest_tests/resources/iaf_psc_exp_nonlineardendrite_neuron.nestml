"""
iaf_psc_exp_nonlineardendrite_neuron.nestml
###########################################


Copyright statement
+++++++++++++++++++

This file is part of NEST.

Copyright (C) 2004 The NEST Initiative

NEST is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

NEST is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with NEST.  If not, see <http://www.gnu.org/licenses/>.
"""
model iaf_psc_exp_nonlineardendrite_neuron:

  state:
    V_m mV = 0mV     # membrane potential in mV
    z pA = 0pA       # dAP trace
    active_dendrite boolean = false
    dAP_counts integer = 0
    ref_counts integer = 0

  equations:
    # exponential shaped postsynaptic current kernel
    kernel I_kernel1 = exp(-1/tau_syn1*t)

    # alpha shaped postsynaptic current kernel
    kernel I_kernel2 = (e/tau_syn2) * t * exp(-t/tau_syn2)
    
    # exponential shaped postsynaptic current kernel
    kernel I_kernel3 = exp(-1/tau_syn3*t)

    # exponential shaped postsynaptic current kernel
    kernel I_kernel4 = exp(-1/tau_syn4*t)

    # diff. eq. for membrane potential
    recordable inline I_dend pA = convolve(I_kernel2, I_2) * pA
    inline I_syn pA = convolve(I_kernel1, I_1) * pA + I_dend - convolve(I_kernel3, I_3) * pA + convolve(I_kernel4, I_4) * pA + I_e
    V_m' = -(V_m-E_L)/tau_m + I_syn/C_m 
    
    # diff. eq. for dAP trace
    z' = -z/tau_h

  parameters:
    C_m pF = 250 pF          # capacity of the membrane
    tau_m ms = 20 ms         # membrane time constant.
    tau_syn1 ms = 10 ms      # time constant of synaptic current, port 1
    tau_syn2 ms = 10 ms      # time constant of synaptic current, port 2
    tau_syn3 ms = 10 ms      # time constant of synaptic current, port 3
    tau_syn4 ms = 10 ms      # time constant of synaptic current, port 4
    tau_h ms = 400 ms        # time constant of the dAP trace 
    V_th mV = 25 mV          # spike threshold 
    V_reset mV = 0 mV        # reset voltage 
    I_e    pA = 0pA          # external current.
    E_L    mV = 0mV          # resting potential.   

    # dendritic action potential     
    theta_dAP pA = 60pA              # current threshold for a dendritic action potential
    I_p pA = 250pA                   # current clamp value for I_dAP during a dendritic action potential 
    tau_dAP ms = 60ms                # time window over which the dendritic current clamp is active
    
    # refractory parameters 
    t_ref ms = 10ms                            # refractory period

  internals:
    dAP_timeout_ticks integer = steps(tau_dAP) 
    ref_timeout_ticks integer = steps(t_ref)    

  input:
    I_1 <- spike
    I_2 <- spike
    I_3 <- spike
    I_4 <- spike

  output:
    spike

  update:
    # solve ODEs
    integrate_odes()

    # current-threshold, emit a dendritic action potential
    if I_dend > theta_dAP or active_dendrite:
      if dAP_counts == 0:

        if active_dendrite == false:
          z += 1pA
          active_dendrite = true
          I_dend = I_p
          dAP_counts = dAP_timeout_ticks
        else:
          I_dend = 0pA
          active_dendrite = false

      else:
        dAP_counts -= 1
        I_dend = I_p

    # threshold crossing and refractoriness
    if ref_counts == 0:
      if V_m > V_th:
        emit_spike()
        ref_counts = ref_timeout_ticks
        V_m = V_reset
        dAP_counts = 0
        I_dend = 0pA
        active_dendrite = false
    else:
      ref_counts -= 1
      V_m = V_reset
      active_dendrite = false
      dAP_counts = 0
      I_dend = 0pA
