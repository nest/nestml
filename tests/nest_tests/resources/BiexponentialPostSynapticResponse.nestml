"""
BiexponentialPostSynapticResponse.nestml
########################################


Description
+++++++++++

Bi-exponential ("beta function") postsynaptic response


Copyright statement
+++++++++++++++++++

This file is part of NEST.

Copyright (C) 2004 The NEST Initiative

NEST is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

NEST is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with NEST.  If not, see <http://www.gnu.org/licenses/>.
"""
model biexp_postsynaptic_response_neuron:
    state:
        refr_t ms = 0 ms    # Refractory period timer
        is_refractory boolean = false

        g_in real = 0        # inputs from the inhibitory conductance
        g_in$ real = g_I_const * (1 / tau_syn_rise_I - 1 / tau_syn_decay_I)

        g_ex real = 0        # inputs from the excitatory conductance
        h_ex real = g_E_const * (1 / tau_syn_rise_E - 1 / tau_syn_decay_E)

        g_GABA real = 0
        g_GABA' 1/ms = g_E_const * (1 / tau_syn_rise_E - 1 / tau_syn_decay_E)

        # n.b. no initial value for kernel ``g_gap`` that is a direct function of time

        V_m mV = E_L          # membrane potential

    equations:
        kernel g_ex' = -g_ex / tau_syn_decay_E + h_ex,
            h_ex' = -h_ex / tau_syn_rise_E

        kernel g_in' = -g_in / tau_syn_decay_I + g_in$,
            g_in$' = -g_in$ / tau_syn_rise_I

        kernel g_gap = g_gap_const * (exp(-t/tau_syn_decay_gap) - exp(-t/tau_syn_rise_gap))
        kernel g_GABA'' = -(g_GABA + g_GABA' * (tau_syn_decay_E + tau_syn_rise_E)) / (tau_syn_decay_E * tau_syn_rise_E)

        inline I_syn_exc pA = (F_E + convolve(g_ex, spikeExc) * nS) * (V_m - E_ex)
        inline I_syn_inh pA = (F_I + convolve(g_in, spikeInh) * nS) * (V_m - E_in)
        inline I_syn_gap pA = (F_I + convolve(g_gap, spikeGap) * nS) * (V_m - E_gap)
        inline I_syn_GABA pA = (F_I + convolve(g_GABA, spikeGABA) * nS) * (V_m - E_gap)
        inline I_leak pA = g_L * (V_m - E_L)

        V_m' = (-I_leak - I_syn_exc - I_syn_inh - I_syn_gap - I_syn_GABA + I_e + I_stim) / C_m

    parameters:
        E_L mV = -70.0mV # Leak reversal Potential (aka resting potential)
        C_m pF = 250.0pF # Capacity of the membrane
        refr_T ms = 2.0ms # Refractory period
        V_th mV = -55.0mV      # Threshold Potential
        V_reset mV = -60.0mV   # Reset Potential
        E_ex mV = 0mV          # Excitatory reversal Potential
        E_in mV = -85.0mV      # Inhibitory reversal Potential
        E_gap mV = -60.0mV      # Inhibitory reversal Potential
        g_L nS = 16.6667nS     # Leak Conductance
        tau_syn_rise_I ms = .2 ms    # Synaptic Time Constant Excitatory Synapse
        tau_syn_decay_I ms = 2 ms   # Synaptic Time Constant for Inhibitory Synapse

        tau_syn_rise_E ms = 2 ms    # Synaptic Time Constant Excitatory Synapse
        tau_syn_decay_E ms = 5 ms   # Synaptic Time Constant for Inhibitory Synapse

        tau_syn_rise_gap ms = 10 ms    # Synaptic Time Constant Excitatory Synapse
        tau_syn_decay_gap ms = 11 ms   # Synaptic Time Constant for Inhibitory Synapse

        I_e pA = 0pA            # Constant Current
        F_E nS = 0nS            # Constant External input conductance (excitatory).
        F_I nS = 0nS            # Constant External input conductance (inhibitory).

    internals:
        # time of peak conductance excursion after spike arrival at t = 0
        t_peak_E real = abs(tau_syn_decay_E - tau_syn_rise_E) < 1E-12 ms \
                        ? tau_syn_decay_E \
                        : tau_syn_decay_E * tau_syn_rise_E * ln(tau_syn_decay_E / tau_syn_rise_E) / (tau_syn_decay_E - tau_syn_rise_E)
        t_peak_I real = abs(tau_syn_decay_I - tau_syn_rise_I) < 1E-12 ms \
                        ? tau_syn_decay_I \
                        : tau_syn_decay_I * tau_syn_rise_I * ln(tau_syn_decay_I / tau_syn_rise_I) / (tau_syn_decay_I - tau_syn_rise_I)
        t_peak_gap real = tau_syn_decay_gap * tau_syn_rise_gap / (tau_syn_decay_gap - tau_syn_rise_gap) * ln(tau_syn_decay_gap / tau_syn_rise_gap)

        # normalisation constants to ensure arriving spike yields peak conductance of 1 nS
        g_E_const real = abs(tau_syn_decay_E - tau_syn_rise_E) < 1E-12 ms \
                         ? exp(1) / tau_syn_decay_E \
                         : 1 / (exp(-t_peak_E / tau_syn_decay_E) - exp(-t_peak_E / tau_syn_rise_E))
        g_I_const real = abs(tau_syn_decay_I - tau_syn_rise_I) < 1E-12 ms ? \
                             exp(1) / tau_syn_decay_I : \
                             1 / (exp(-t_peak_I / tau_syn_decay_I) - exp(-t_peak_I / tau_syn_rise_I))
        g_gap_const real = 1 / (exp(-t_peak_gap / tau_syn_decay_gap) - exp(-t_peak_gap / tau_syn_rise_gap))

    input:
        spikeInh <- spike
        spikeExc <- spike
        spikeGap <- spike
        spikeGABA <- spike
        I_stim pA <- continuous

    output:
        spike

    update:
        if is_refractory:
            # neuron is absolute refractory, do not evolve V_m
            refr_t -= resolution()
        else:
            # neuron not refractory, so evolve all ODEs (including V_m)
            integrate_odes()

    onCondition(not is_refractory and V_m >= V_th):
        # threshold crossing
        refr_t = refr_T    # start of the refractory period
        is_refractory = true
        V_m = V_reset
        emit_spike()

    onCondition(refr_t <= 0 ms):
        # end of refractory period
        is_refractory = false
