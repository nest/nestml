"""
ExpressionTypeTest.nestml
#########################


Description
+++++++++++

This test is used to test the resolution of symbols.
    expression : leftParentheses='(' term=expression rightParentheses=')'
         | <assoc=right> left=expression powOp='**' right=expression
         | unaryOperator term=expression
         | left=expression (timesOp='*' | divOp='/' | moduloOp='%') right=expression
         | left=expression (plusOp='+'  | minusOp='-') right=expression
         | left=expression bitOperator right=expression
         | left=expression comparisonOperator right=expression
         | logicalNot='not' term=expression
         | left=expression logicalOperator right=expression
         | condition=expression '?' ifTrue=expression ':' ifNot=expression
         | simpleExpression


Copyright statement
+++++++++++++++++++

This file is part of NEST.

Copyright (C) 2004 The NEST Initiative

NEST is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

NEST is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with NEST.  If not, see <http://www.gnu.org/licenses/>.
"""
model expressionType_test:
    state:
        time s = 2 s
        resist Ohm = 1 Ohm
        amps A = 0.1 A
        volts V = -0.5 V
        charge C = 0.03 C
        mass kg = 0.15 kg
        distance m = 0.33 m
        force N = 1.5 N
        testint integer = 8
        testint2 integer = 3
        timesquared s**2 = 1.44 s**2
        velocity m/s = 23.5 m/s

        # power operator
        bar1 mol**2 = 1.5 mol**2
        bar2 mol**3 = -22 mol**3
        bar3 mol**5 = 3.99 mol**5
        beta mol = 42 mol

    parameters:
        expo1 integer = 3
        expo2 mmol/pA = 2 mmol/pA

    function foo(_mass kg, _dist m, _time s) N :
        return _mass*_dist/(_time**2)

    update:
        #time = (charge/amps)
        testint = testint % testint2
        testint = 2
        timesquared = time**2
        velocity = distance/time
        volts = resist*amps
        volts = volts + volts
        volts = volts - volts
        force = mass*distance/(time**2)
        volts = volts > resist*amps ? volts : resist* amps
        force = foo(mass,distance,time)
        force = 1 kg * distance/(time**2)
        force = kg*m/(s**2)

        # power operators
        bar1 = beta ** expo2
        bar2 = beta ** expo1
        bar3 = beta ** (expo1 + expo2)
