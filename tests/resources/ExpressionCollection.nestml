"""
ExpressionCollection.nestml
###########################


Description
+++++++++++

This test model is used to test if parsing of expression works as required.

For more details see ExpressionParserTest.py.


Copyright statement
+++++++++++++++++++

This file is part of NEST.

Copyright (C) 2004 The NEST Initiative

NEST is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

NEST is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with NEST.  If not, see <http://www.gnu.org/licenses/>.
"""
model ExpressionCollection:
    state:
        r integer = 2 # counts number of tick during the refractory period
        I_syn_ex pA = -0.5 pA # inputs from the exc spikes
        I_syn_ex' pA/ms = 0.12 pA/ms  # inputs from the exc spikes
        I_syn_in pA = 0.055 pA # inputs from the inh spikes
        I_syn_in' pA/ms = 0.01 pA/ms # inputs from the inh spikes
        r_potassium integer = 1
        g_spike boolean = false

        g_AMPA nS = 0.
        g_NMDA nS = 0.
        g_GABAA nS = 0.
        g_GABAB nS = 0.
        IKNa_D nS = 0.
        IT_m nS = 0.
        IT_h nS = 0.
        Ih_m nS = 0.

        g_AMPA' nS/ms = 0.
        g_NMDA' nS/ms = 0.
        g_GABAA' nS/ms = 0.
        g_GABAB' nS/ms = 0.

        # power operator
        bar real = 1.5

    parameters:
        #neuron aeif_cond_alpha_neuron
        testA ms**2 = 1
        testB 1/ms = 12
        testC ms**-2 = 1

        test11 pF = 281.0pF       ## Membrane Capacitance in pF
        test12 ms = 0.0ms         ## Refractory period in ms
        test13 mV = -60.0mV     ## Reset Potential in mV
        test14 nS = 30.0nS          ## Leak Conductance in nS
        test15 mV = -70.6mV         ## Leak reversal Potential (aka resting potential) in mV
        test16 pA = 0pA

        beta real = 1.            # check for conflict with sympy built-in functions like beta()

        # for power operator
        expo1 integer = 3
        expo2 mmol/pA = 2 mmol/pA

        #hh_cond_exp_traub_neuron
        test70 nS = 0nS # Inhibitory synaptic conductance

        # synapses: exponential conductance
        g_Na nS = 20000.0nS       # Threshold Potential in mV
        g_K nS = 6000.0nS         # K Conductance
        g_L nS = 10nS             # Leak Conductance
        C_m pF = 200.0pF          # Membrane Capacitance in pF
        E_Na mV = 50mV            # Reversal potentials
        E_K mV = -90.mV           # Potassium reversal potential
        E_L mV = -60.mV           # Leak reversal Potential (aka resting potential) in mV
        V_T mV = -63.0mV          # Voltage offset that controls dynamics. For default
                                  # parameters, V_T = -63mV results in a threshold around -50mV.
        tau_syn_ex ms = 5.0ms     # Synaptic Time Constant Excitatory Synapse in ms
        tau_syn_in ms = 10.0ms    # Synaptic Time Constant for Inhibitory Synapse in ms
        I_e pA = 0pA              # Constant Current in pA
        E_exc mV = 0.0 mV          # Excitatory synaptic reversal potential
        E_inh mV = -80.0mV         # Inhibitory synaptic reversal potential
        V_m mV = E_L #  Membrane potential
        g_in nS = 0nS # Inhibitory synaptic conductance
        g_ex nS = 0nS # Excitatory synaptic conductance

        # Act-h'
        t_ref ms = 2.0 ms      # Refractory period
        RefractoryCounts integer = steps(t_ref)
        U_old mV = V_m

        # hr_neuron_nestml
        Theta mV = Theta_eq # Threshold

        # Synapses
        Tau_m ms = 16.0ms     # membrane time constant applying to all currents but repolarizing K-current (see [1, p 1677])
        Theta_eq mV = -51.0mV # equilibrium value
        Tau_theta ms = 2.0ms  # time constant
        Tau_spike ms = 1.75ms # membrane time constant applying to repolarizing K-current

        # Parameters for synapse of type AMPA, GABA_A, GABA_B and NMDA
        AMPA_g_peak nS = 0.1nS      # peak conductance
        AMPA_E_rev mV = 0.0mV       # reversal potential
        AMPA_Tau_1 ms = 0.5ms       # rise time
        AMPA_Tau_2 ms = 2.4ms       # decay time, Tau_1 < Tau_2
        NMDA_g_peak nS = 0.075nS    # peak conductance
        NMDA_Tau_1 ms = 4.0ms       # rise time
        NMDA_Tau_2 ms = 40.0ms      # decay time, Tau_1 < Tau_2
        NMDA_E_rev mV = 0.0mV       # reversal potential
        NMDA_Vact mV = -58.0mV      # inactive for V << Vact, inflection of sigmoid
        NMDA_Sact mV = 2.5mV        # scale of inactivation
        GABA_A_g_peak nS = 0.33nS   # peak conductance
        GABA_A_Tau_1 ms = 1.0ms     # rise time
        GABA_A_Tau_2 ms = 7.0ms     # decay time, Tau_1 < Tau_2
        GABA_A_E_rev mV = -70.0mV   # reversal potential
        GABA_B_g_peak nS = 0.0132nS # peak conductance
        GABA_B_Tau_1 ms = 60.0ms    # rise time
        GABA_B_Tau_2 ms = 200.0ms   # decay time, Tau_1 < Tau_2
        GABA_B_E_rev mV = -90.0mV   # reversal potential for intrinsic current

        # parameters for intrinsic currents
        NaP_g_peak nS = 1.0nS       # peak conductance for intrinsic current
        NaP_E_rev mV = 30.0mV       # reversal potential for intrinsic current
        KNa_g_peak nS = 1.0nS       # peak conductance for intrinsic current
        KNa_E_rev mV = -90.0mV      # reversal potential for intrinsic current
        T_g_peak nS = 1.0nS         # peak conductance for intrinsic current
        T_E_rev mV = 0.0mV          # reversal potential for intrinsic current
        h_g_peak nS = 1.0nS         # peak conductance for intrinsic current
        h_E_rev mV = -40.0mV        # reversal potential for intrinsic current
        KNa_D_EQ pA = 0.001pA

        # clip and hyperbolic functions
        Vclip mV = clip(V_m, -120 mV, 0 mV)
        testsinh real = sinh(0.)
        testcosh real = cosh(0.)
        testtanh real = tanh(0.)
        testerf real = erf(0.)
        testerfc real = erfc(0.)

    equations:
        #neuron aeif_cond_alpha_neuron
        test0 = E_L
        test1 = 0pA
        test2 = min(V_m, V_peak)
        test3 = (e/tau_syn_in) * t * exp(-t/tau_syn_in)
        test4 = (e/tau_syn_ex) * t * exp(-t/tau_syn_ex)
        test5 = (V_bounded-V_th)/Delta_T
        test6 = g_L*Delta_T*exp(exp_arg)
        test7 = convolve(g_ex, exc_spikes) * ( V_bounded - E_exc )
        test8 = convolve(g_in, inh_spikes) * ( V_bounded - E_inh )
        test9 = ( -g_L*( V_bounded - E_L ) + I_spike - I_syn_exc - I_syn_inh - w + I_e + I_stim ) / C_m
        test10 = (a*(V_m - E_L) - w)/tau_w
        test17 = nS * e / tau_syn_ex
        test18 = nS * e / tau_syn_in
        test19 = steps(t_ref)
        test20 = r > 0
        test21 = V_m >= V_peak

        #neuron aeif_cond_exp_neuron
        test22 = E_L  # Membrane potential
        test23= 0 pA    # Spike-adaptation current
        test24 = min(V_m, V_peak)
        test25 = exp(-1/tau_syn_in*t)
        test26 = exp(-1/tau_syn_ex*t)
        test27 = (V_bounded-V_th)/Delta_T
        test28 = g_L*Delta_T*exp(exp_arg)
        test29 = convolve(g_ex, spikeExc) * ( V_bounded - E_exc )
        test30 = convolve(g_in, spikeInh) * ( V_bounded - E_inh )
        test31 = ( -g_L*( V_bounded - E_L ) + I_spike - I_syn_exc - I_syn_inh - w + I_e + I_stim ) / C_m
        test32  = (a*(V_bounded - E_L) - w)/tau_w
        test33 = 281.0pF     # Membrane Capacitance in pF
        test34 = 0.0ms       # Refractory period in ms
        test35 = -60.0mV   # Reset Potential in mV
        test36 = 30.0nS        # Leak Conductance in nS
        test37 = -70.6mV       # Leak reversal Potential (aka resting potential) in mV
        test38 = 0pA           # Constant Current in pA
        test39 = 4nS             # Subthreshold adaptation.
        test40 = 80.5pA          # Spike-trigg_exred adaptation.
        test41 = 2.0mV     # Slope factor
        test42 = 144.0ms     # Adaptation time constant in
        test43 = -50.4mV      # Threshold Potential
        test44 = 0mV        # Spike detection threshold in mV.
        test45 = 0mV            # Excitatory reversal Potential in mV
        test46 = 0.2ms    # Synaptic Time Constant Excitatory Synapse in ms
        test47 = -85.0mV        # Inhibitory reversal Potential in mV
        test48 = 2.0ms    # Synaptic Time Constant for Inhibitory Synapse in ms
        test49 = 0pA
        test50 = steps(t_ref)
        test51 = r > 0 # refractory
        test52 = V_reset # clamp potential
        test53 = V_m >= V_peak # threshold crossing detection
        test54 = RefractoryCounts + 1
        test55 = V_reset # clamp potential

        test58 = min(V_m, V_peak) # prevent exponential divergence
        test59' = -g_in/tau_syn_in
        test60 = -g_ex/tau_syn_ex
        test61 = (V_bounded-V_th)/Delta_T
        test62 = g_L*Delta_T*exp(exp_arg)
        test63 = convolve(g_ex, spikeExc) * ( V_bounded - E_exc )
        test64 = convolve(g_in, spikeInh) * ( V_bounded - E_inh )
        test65 = ( -g_L*( V_bounded - E_L ) + I_spike - I_syn_exc - I_syn_inh - w + I_e + I_stim ) / C_m
        test66 = (a*(V_bounded - E_L) - w)/tau_w

        #hh_cond_exp_traub_neuron
        test69 = E_L #  Membrane potential
        test71 = 0.032/(ms* mV ) * ( 15. mV - V_m) / ( exp( ( 15. mV - V_m) / 5. mV ) - 1. )
        inline test72 1/ms = 0.5 /ms * exp( ( 10. mV - V_m ) / 40. mV )
        inline test73 1/ms = 0.32/(ms* mV ) * ( 13. mV - V_m) / ( exp( ( 13. mV - V_m) / 4. mV ) - 1. )
        inline test74 1/ms = 0.28/(ms* mV ) * ( V_m  - 40. mV ) / ( exp( ( V_m - 40. mV ) / 5. mV ) - 1. )
        inline test75 1/ms = 0.128/ms * exp( ( 17. mV - V_m) / 18. mV )
        inline test76 1/ms = ( 4. / ( 1. + exp( ( 40. mV - V_m ) / 5. mV) ) ) / ms

        inline I_Na  pA = g_Na * Act_m * Act_m * Act_m * Act_h * ( V_m - E_Na )
        inline I_K   pA  = g_K * Inact_n * Inact_n * Inact_n * Inact_n * ( V_m - E_K )
        inline I_L   pA = g_L * ( V_m - E_L )
        inline I_syn_exc pA = convolve(g_ex, spikeExc) * ( V_m - E_exc )
        inline I_syn_inh pA = convolve(g_in, spikeInh) * ( V_m - E_inh )
        V_m' =( -I_Na - I_K - I_L - I_syn_exc - I_syn_inh + I_e + I_stim ) / C_m

        # channel dynamics
        inline V_rel mV = V_m - V_T
        inline alpha_n 1/ms = 0.032/(ms* mV ) * ( 15. mV - V_rel) / ( exp( ( 15. mV - V_rel) / 5. mV ) - 1. )
        inline beta_n 1/ms = 0.5 /ms * exp( ( 10. mV - V_rel ) / 40. mV )
        inline alpha_m 1/ms = 0.32/(ms* mV ) * ( 13. mV - V_rel) / ( exp( ( 13. mV - V_rel) / 4. mV ) - 1. )
        inline beta_m 1/ms = 0.28/(ms* mV ) * ( V_rel  - 40. mV ) / ( exp( ( V_rel - 40. mV ) / 5. mV ) - 1. )
        inline alpha_h 1/ms = 0.128/ms * exp( ( 17. mV - V_rel) / 18. mV )
        inline beta_h 1/ms = ( 4. / ( 1. + exp( ( 40. mV - V_rel ) / 5. mV) ) ) / ms
        Act_m' = ( alpha_m - ( alpha_m + beta_m ) * Act_m )
        Act_h' = ( alpha_h - ( alpha_h + beta_h ) * Act_h )
        Inact_n' = ( alpha_n - ( alpha_n + beta_n ) * Inact_n )

        # synapses: exponential conductance
        g_ex' = -g_ex / tau_syn_ex
        g_in' = -g_in / tau_syn_in
        test79 = V_m > V_T + 30mV and U_old > V_m
        inline alpha_n_init 1/ms = 0.032/(ms* mV ) * ( 15. mV - V_m) / ( exp( ( 15. mV - V_m) / 5. mV ) - 1. )
        inline beta_n_init 1/ms = 0.5 /ms * exp( ( 10. mV - V_m ) / 40. mV )
        inline alpha_m_init 1/ms = 0.32/(ms* mV ) * ( 13. mV - V_m) / ( exp( ( 13. mV - V_m) / 4. mV ) - 1. )
        inline beta_m_init 1/ms = 0.28/(ms* mV ) * ( V_m  - 40. mV ) / ( exp( ( V_m - 40. mV ) / 5. mV ) - 1. )
        inline alpha_h_init 1/ms = 0.128/ms * exp( ( 17. mV - V_m) / 18. mV )
        inline beta_h_init 1/ms = ( 4. / ( 1. + exp( ( 40. mV - V_m ) / 5. mV) ) ) / ms
        Act_m =  alpha_m_init / ( alpha_m_init + beta_m_init )
        Act_h = alpha_h_init / ( alpha_h_init + beta_h_init )
        Inact_n =  alpha_n_init / ( alpha_n_init + beta_n_init )

        # synapses: exponential conductance
        inline I_Na  pA = g_Na * Act_m * Act_m * Act_m * Act_h * ( V_m - E_Na )
        inline I_K   pA  = g_K * Inact_n * Inact_n * Inact_n * Inact_n * ( V_m - E_K )
        inline I_L   pA = g_L * ( V_m - E_L )
        inline I_syn_exc pA = convolve(g_ex, spikeExc) * ( V_m - E_exc )
        inline I_syn_inh pA = convolve(g_in, spikeInh) * ( V_m - E_inh )
        V_m' =( -I_Na - I_K - I_L - I_syn_exc - I_syn_inh + I_e + I_stim ) / C_m

        # channel dynamics
        inline V_rel mV = V_m - V_T
        inline alpha_n 1/ms = 0.032/(ms* mV ) * ( 15. mV - V_rel) / ( exp( ( 15. mV - V_rel) / 5. mV ) - 1. )
        inline beta_n 1/ms = 0.5 /ms * exp( ( 10. mV - V_rel ) / 40. mV )
        inline alpha_m 1/ms = 0.32/(ms* mV ) * ( 13. mV - V_rel) / ( exp( ( 13. mV - V_rel) / 4. mV ) - 1. )
        inline beta_m 1/ms = 0.28/(ms* mV ) * ( V_rel  - 40. mV ) / ( exp( ( V_rel - 40. mV ) / 5. mV ) - 1. )
        inline alpha_h 1/ms = 0.128/ms * exp( ( 17. mV - V_rel) / 18. mV )
        inline beta_h 1/ms = ( 4. / ( 1. + exp( ( 40. mV - V_rel ) / 5. mV) ) ) / ms
        Act_m' = ( alpha_m - ( alpha_m + beta_m ) * Act_m )
        Act_h' = ( alpha_h - ( alpha_h + beta_h ) * Act_h )
        Inact_n' = ( alpha_n - ( alpha_n + beta_n ) * Inact_n )

        # synapses: alpha functions
        I_syn_in = (e/tau_syn_in) * t * exp(-t/tau_syn_in)
        I_syn_ex = (e/tau_syn_ex) * t * exp(-t/tau_syn_ex)
        inline I_syn_exc pA = convolve(I_syn_ex, spikeExc)
        inline I_syn_inh pA = convolve(I_syn_in, spikeInh)
        inline I_Na  pA = g_Na * Act_m * Act_m * Act_m * Act_h * ( V_m - E_Na )
        inline I_K   pA  = g_K * Inact_n * Inact_n * Inact_n * Inact_n * ( V_m - E_K )
        inline I_L   pA = g_L * ( V_m - E_L )
        V_m' =( -( I_Na + I_K + I_L ) + I_e + I_stim + I_syn_inh + I_syn_exc ) / C_m

        # Inact_n
        inline alpha_n real = ( 0.01 * ( V_m / mV + 55. ) ) / ( 1. - exp( -( V_m / mV + 55. ) / 10. ) )
        inline beta_n  real = 0.125 * exp( -( V_m / mV + 65. ) / 80. )
        Inact_n' = ( alpha_n * ( 1 - Inact_n ) - beta_n * Inact_n ) / ms # n-variable

        # Act_m
        inline alpha_m real = ( 0.1 * ( V_m / mV + 40. ) ) / ( 1. - exp( -( V_m / mV + 40. ) / 10. ) )
        inline beta_m  real = 4. * exp( -( V_m / mV + 65. ) / 18. )
        Act_m' = ( alpha_m * ( 1 - Act_m ) - beta_m * Act_m ) / ms # m-variable

        # Act_h'
        inline alpha_h real = 0.07 * exp( -( V_m / mV + 65. ) / 20. )
        inline beta_h  real = 1. / ( 1. + exp( -( V_m / mV + 35. ) / 10. ) )
        Act_h' = ( alpha_h * ( 1 - Act_h ) - beta_h * Act_h ) / ms # h-variable
        inline alpha_n_init real = ( 0.01 * ( V_m / mV + 55. ) ) / ( 1. - exp( -( V_m / mV + 55. ) / 10. ) )
        inline beta_n_init  real = 0.125 * exp( -( V_m / mV + 65. ) / 80. )
        inline alpha_m_init real = ( 0.1 * ( V_m / mV + 40. ) ) / ( 1. - exp( -( V_m / mV + 40. ) / 10. ) )
        inline beta_m_init  real = 4. * exp( -( V_m / mV + 65. ) / 18. )
        inline alpha_h_init real = 0.07 * exp( -( V_m / mV + 65. ) / 20. )
        inline beta_h_init  real = 1. / ( 1. + exp( -( V_m / mV + 35. ) / 10. ) )
        Act_m =  alpha_m_init / ( alpha_m_init + beta_m_init )   # Activation variable m
        Act_h = alpha_h_init / ( alpha_h_init + beta_h_init )    # Activation variable h
        Inact_n =  alpha_n_init / ( alpha_n_init + beta_n_init ) # Inactivation variable n

        # synapses: alpha functions
        I_syn_in' = I_syn_in'
        I_syn_in'' = (-2/tau_syn_in) * I_syn_in'-(1/tau_syn_in**2) * I_syn_in
        ## alpha function for the g_ex
        I_syn_ex' = I_syn_ex'
        I_syn_ex'' = (-2/tau_syn_ex) * I_syn_ex'-(1/tau_syn_ex**2) * I_syn_ex
        inline I_syn_exc pA = convolve(I_syn_ex, spikeExc)
        inline I_syn_inh pA = convolve(I_syn_in, spikeInh)
        inline I_Na  pA = g_Na * Act_m * Act_m * Act_m * Act_h * ( V_m - E_Na )
        inline I_K   pA  = g_K * Inact_n * Inact_n * Inact_n * Inact_n * ( V_m - E_K )
        inline I_L   pA = g_L * ( V_m - E_L )
        V_m' =( -( I_Na + I_K + I_L ) + I_e + I_stim + I_syn_inh + I_syn_exc ) / C_m

        # Inact_n
        inline alpha_n real = ( 0.01 * ( V_m / mV + 55. ) ) / ( 1. - exp( -( V_m / mV + 55. ) / 10. ) )
        inline beta_n  real = 0.125 * exp( -( V_m / mV + 65. ) / 80. )
        Inact_n' = ( alpha_n * ( 1 - Inact_n ) - beta_n * Inact_n ) / ms # n-variable

        # Act_m
        inline alpha_m real = ( 0.1 * ( V_m / mV + 40. ) ) / ( 1. - exp( -( V_m / mV + 40. ) / 10. ) )
        inline beta_m  real = 4. * exp( -( V_m / mV + 65. ) / 18. )
        Act_m' = ( alpha_m * ( 1 - Act_m ) - beta_m * Act_m ) / ms # m-variable

        # Act_h'
        inline alpha_h real = 0.07 * exp( -( V_m / mV + 65. ) / 20. )
        inline beta_h  real = 1. / ( 1. + exp( -( V_m / mV + 35. ) / 10. ) )
        Act_h' = ( alpha_h * ( 1 - Act_h ) - beta_h * Act_h ) / ms # h-variable

        # Impulse to add to DG_EXC on spike arrival to evoke unit-amplitude
        # conductance excursion.
        PSConInit_E = pA * e / tau_syn_ex

        # Impulse to add to DG_INH on spike arrival to evoke unit-amplitude
        # conductance excursion.
        PSConInit_I = pA * e / tau_syn_in

        # sending spikes: crossing 0 mV, pseudo-refractoriness and local maximum...
        g = r > 0
        p = V_m > 0 mV and U_old > V_m # threshold && maximum
        r = RefractoryCounts
        u =  emit_spike()
        I_syn_ex' = spikeExc * PSConInit_E
        I_syn_in' = spikeInh * PSConInit_I

        ########################
        ##ht_neuron_nestml######
        ########################
        V_m = ( g_NaL * E_Na + g_KL * E_K ) / ( g_NaL + g_KL ) # membrane potential
        inline I_syn_ampa pA = -g_AMPA * ( V_m - AMPA_E_rev )
        inline I_syn_nmda pA = -g_NMDA * ( V_m - NMDA_E_rev ) / ( 1 + exp( ( NMDA_Vact - V_m ) / NMDA_Sact ) )
        inline I_syn_gaba_a pA = -g_GABAA * ( V_m - GABA_A_E_rev )
        inline I_syn_gaba_b pA = -g_GABAB * ( V_m - GABA_B_E_rev )
        inline I_syn pA = I_syn_ampa + I_syn_nmda + I_syn_gaba_a + I_syn_gaba_b

        # I_Na(p), m_inf^3 according to Compte et al, J Neurophysiol 2003 89:2707
        inline INaP_thresh mV = -55.7 pA
        inline INaP_slope mV = 7.7 pA
        inline m_inf_NaP real = 1.0 / ( 1.0 + exp( -( V_m - INaP_thresh ) / INaP_slope ) )

        # Persistent Na current; member only to allow recording
        recordable inline I_NaP pA = -NaP_g_peak * pow( m_inf_NaP, 3.0 )* ( V_m - NaP_E_rev )
        inline d_half real = 0.25
        inline m_inf_KNa real = 1.0 / ( 1.0 + pow( d_half / IKNa_D, 3.5 ) )

        # Depol act. K current; member only to allow recording
        recordable inline  I_KNa pA = -KNa_g_peak * m_inf_KNa * ( V_m - KNa_E_rev )

        # Low-thresh Ca current; member only to allow recording
        recordable inline  I_T pA = -T_g_peak * IT_m * IT_m * IT_h * ( V_m - T_E_rev )
        recordable inline I_h pA = -h_g_peak * Ih_m  * ( V_m - h_E_rev )

        # The spike current is only activate immediately after a spike.
        inline I_spike mV = (g_spike) ? -( V_m - E_K ) / Tau_spike : 0
        V_m'  = ( ( I_Na + I_K + I_syn + I_NaP + I_KNa + I_T + I_h + I_e + I_stim ) / Tau_m + I_spike * pA/(ms * mV) ) * s/nF

        #############
        # Intrinsic currents
        #############
        # I_T
        inline m_inf_T real = 1.0 / ( 1.0 + exp( -( V_m / mV + 59.0 ) / 6.2 ) )
        inline h_inf_T real = 1.0 / ( 1.0 + exp( ( V_m / mV + 83.0 ) / 4 ) )
        inline tau_m_h real = 1.0 / ( exp( -14.59 - 0.086 * V_m / mV ) + exp( -1.87 + 0.0701 * V_m / mV ) )

        # I_KNa
        inline D_influx_peak real = 0.025
        inline tau_D real = 1250.0 # yes, 1.25s
        inline D_thresh mV = -10.0
        inline D_slope mV = 5.0
        inline D_influx real = 1.0 / ( 1.0 + exp( -( V_m - D_thresh ) / D_slope ) )
        inline I_Na pA = -g_NaL * ( V_m - E_Na )
        inline I_K pA = -g_KL * ( V_m - E_K )
        Theta' = -( Theta - Theta_eq ) / Tau_theta

        # equation modified from y[](1-D_eq) to (y[]-D_eq), since we'd not
        # be converging to equilibrium otherwise
        IKNa_D' = ( D_influx_peak * D_influx * nS - ( IKNa_D  - KNa_D_EQ / mV ) / tau_D ) / ms
        inline tau_m_T real = 0.22 / ( exp( -( V_m / mV + 132.0 ) / 16.7 ) + exp( ( V_m / mV + 16.8 ) / 18.2 ) ) + 0.13
        inline tau_h_T real = 8.2 + ( 56.6 + 0.27 * exp( ( V_m / mV + 115.2 ) / 5.0 ) ) / ( 1.0 + exp( ( V_m / mV + 86.0 ) / 3.2 ) )
        inline I_h_Vthreshold real = -75.0
        inline m_inf_h real = 1.0 / ( 1.0 + exp( ( V_m / mV - I_h_Vthreshold ) / 5.5 ) )
        IT_m' = ( m_inf_T * nS - IT_m ) / tau_m_T / ms
        IT_h' = ( h_inf_T * nS - IT_h ) / tau_h_T / ms
        Ih_m' = ( m_inf_h * nS - Ih_m ) / tau_m_h / ms

        #############
        # Synapses
        #############
        g_AMPA'' = -g_AMPA' / AMPA_Tau_1
        g_AMPA' = g_AMPA' - g_AMPA  / AMPA_Tau_2
        g_NMDA'' = -g_NMDA' / NMDA_Tau_1
        g_NMDA' = g_NMDA' - g_NMDA / NMDA_Tau_2
        g_GABAA'' = -g_GABAA' / GABA_A_Tau_1
        g_GABAA' = g_GABAA' - g_GABAA / GABA_A_Tau_2
        g_GABAB'' = -g_GABAB' / GABA_B_Tau_1
        g_GABAB' = g_GABAB' - g_GABAB /GABA_B_Tau_2

        AMPAInitialValue = compute_synapse_constant( AMPA_Tau_1, AMPA_Tau_2, AMPA_g_peak )
        NMDAInitialValue = compute_synapse_constant( NMDA_Tau_1, NMDA_Tau_2, NMDA_g_peak )
        GABA_AInitialValue = compute_synapse_constant( GABA_A_Tau_1, GABA_A_Tau_2, GABA_A_g_peak )
        GABA_BInitialValue = compute_synapse_constant( GABA_B_Tau_1, GABA_B_Tau_2, GABA_B_g_peak )

        # Deactivate potassium current after spike time have expired
        test = (r_potassium > 0) and (r_potassium-1 == 0)
        g_spike = false # Deactivate potassium current.
        g_AMPA' = AMPAInitialValue * AMPA * nS/ms
        g_NMDA' = NMDAInitialValue * NMDA * nS/ms
        g_GABAA' = GABA_AInitialValue * GABA_A * nS/ms
        g_GABAB' = GABA_BInitialValue * GABA_B * nS/ms
        lop = (not g_spike) and V_m >= Theta

        # Set V and Theta to the sodium reversal potential.
        V_m = E_Na
        Theta = E_Na
        test = PotassiumRefractoryCounts > 0
        g_spike = true
        g_spike = false
        r_potassium = PotassiumRefractoryCounts

        exact_integration_adjustment = ( ( 1 / Tau_2 ) - ( 1 / Tau_1 ) ) * ms
        t_peak = ( Tau_2 * Tau_1 ) * log10( Tau_2 / Tau_1 ) / ( Tau_2 - Tau_1 ) / ms
        t_peak123 = ( Tau_2 * Tau_1 ) * ln( Tau_2 / Tau_1 ) / ( Tau_2 - Tau_1 ) / ms
        normalisation_factor = 1 / ( exp( -t_peak / Tau_1 ) - exp( -t_peak / Tau_2 ) )
        test = g_peak * normalisation_factor * exact_integration_adjustment

    update:
        test56 += b
        test67 += spikeExc * nS
        test68 += spikeInh * nS

        g_ex += spikeExc * nS
        g_in += spikeInh * nS

        r -= 1
        r_potassium -= 1

        test72 integer = (r - r_potassium) % r

        test77 real =  alpha_m_init / ( alpha_m_init + beta_m_init )
        test78 real = alpha_h_init / ( alpha_h_init + beta_h_init )
        test79 real =  alpha_n_init / ( alpha_n_init + beta_n_init )

        bar = beta ** expo1
        bar = beta ** expo2
        bar = beta ** (expo1 + expo2)

        integrate_odes()
        # sending spikes: crossing 0 mV, pseudo-refractoriness and local maximum...
        if r > 0: # is refractory?
          r -= 1
        elif V_m > 0 mV and U_old > V_m: # threshold && maximum
          r = RefractoryCounts
          test57 = emit_spike()
