"""
Example compartmental model for NESTML

Description
+++++++++++
Corresponds to standard compartmental model implemented in NEST.
"""
model cm_default:

    state:

        # compartmental voltage variable,
        # rhs value is irrelevant but the state must exist so that the nestml parser doesn't complain
        v_comp real = 0

        ### ion channels ###
        # initial values state variables sodium channel
        m_Na real = 0.01696863
        h_Na real = 0.83381407

        # initial values state variables potassium channel
        n_K real = 0.00014943


    parameters:
        ### ion channels ###
        # default parameters sodium channel
        e_Na real = 50.0
        gbar_Na real = 0.0

        # default parameters potassium channel
        e_K real = -85.0
        gbar_K real = 0.0

        ### synapses ###
        e_AMPA real = 0 mV            # Excitatory reversal Potential
        tau_r_AMPA real = 0.2 ms      # Synaptic Time Constant Excitatory Synapse
        tau_d_AMPA real = 3.0 ms      # Synaptic Time Constant Excitatory Synapse

        e_GABA real = -80. mV            # Inhibitory reversal Potential
        tau_r_GABA real = 0.2 ms      # Synaptic Time Constant Inhibitory Synapse
        tau_d_GABA real = 10.0 ms      # Synaptic Time Constant Inhibitory Synapse

        e_NMDA real = 0 mV            # NMDA reversal Potential
        tau_r_NMDA real = 0.2 ms      # Synaptic Time Constant NMDA Synapse
        tau_d_NMDA real = 43.0 ms      # Synaptic Time Constant NMDA Synapse

        e_AN_AMPA real = 0 mV            # Excitatory reversal Potential
        tau_r_AN_AMPA real = 0.2 ms      # Synaptic Time Constant Excitatory Synapse
        tau_d_AN_AMPA real = 3.0 ms      # Synaptic Time Constant Excitatory Synapse
        e_AN_NMDA real = 0 mV            # NMDA reversal Potential
        tau_r_AN_NMDA real = 0.2 ms      # Synaptic Time Constant NMDA Synapse
        tau_d_AN_NMDA real = 43.0 ms     # Synaptic Time Constant NMDA Synapse
        NMDA_ratio real = 2.0      # NMDA_ratio

    equations:
        # Here, we define the currents that are present in the model. Currents may,
        # or may not depend on [v_comp]. Each variable in the equation for the currents
        # must correspond either to a parameter (e.g. [gbar_Na], [e_Na], e_[NMDA], etc...)
        # or to a state variable (e.g [m_Na], [n_K], [g_r_AMPA], etc...).
        #
        # When it is a parameter, it must be configurable from Python, by adding it as
        # a key: value pair to the dictionary argument of `nest.AddCompartment` for an
        # ion channel or of `nest.AddReceptor` for a synapse.
        #
        # State variables must reoccur in the initial values block and have an associated
        # equation in the equations block.
        #
        # Internally, the model must compute the pair of values (g_val, i_val) for the
        # integration algorithm. To do so, we need both the equation for current, and
        # its voltage derivative
        #
        #   i_X
        #   d(i_X)/dv
        #
        # Which we should be able to obtain from sympy trough symbolic differentiation.
        # Then,
        #
        #   g_val = d(i_X)/d(v_comp) / 2.
        #   i_val = i_X - d(i_X)/d(v_comp) / 2.

        ### ion channels ###
        h_Na' = (h_inf_Na(v_comp) - h_Na) / (tau_h_Na(v_comp) * 1 s)
        m_Na' = (m_inf_Na(v_comp) - m_Na) / (tau_m_Na(v_comp) * 1 s)
        n_K' = (n_inf_K(v_comp) - n_K) / (tau_n_K(v_comp) * 1 s)

        ### synapses, must contain convolution(s) with spike input ###

        inline Na real = gbar_Na * m_Na**3 * h_Na * (e_Na - v_comp) @mechanism::channel
        inline K real = gbar_K * n_K * (e_K - v_comp) @mechanism::channel

        ### synapses, characterized by convolution(s) with spike input ###
        kernel g_AMPA = g_norm_AMPA * ( - exp(-t / tau_r_AMPA) + exp(-t / tau_d_AMPA) )
        inline AMPA real = convolve(g_AMPA, spikes_AMPA) * (e_AMPA - v_comp) @mechanism::receptor

        kernel g_GABA = g_norm_GABA * ( - exp(-t / tau_r_GABA) + exp(-t / tau_d_GABA) )
        inline GABA real = convolve(g_GABA, spikes_GABA) * (e_GABA - v_comp ) @mechanism::receptor

        kernel g_NMDA = g_norm_NMDA * ( - exp(-t / tau_r_NMDA) + exp(-t / tau_d_NMDA) )
        inline NMDA real = convolve(g_NMDA, spikes_NMDA) * (e_NMDA - v_comp ) / (1. + 0.3 * exp( -.1 * v_comp )) @mechanism::receptor

        kernel g_AN_AMPA = g_norm_AN_AMPA * ( - exp(-t / tau_r_AN_AMPA) + exp(-t / tau_d_AN_AMPA) )
        kernel g_AN_NMDA = g_norm_AN_NMDA * ( - exp(-t / tau_r_AN_NMDA) + exp(-t / tau_d_AN_NMDA) )
        inline AMPA_NMDA real = convolve(g_AN_AMPA, spikes_AN) * (e_AN_AMPA - v_comp) + NMDA_ratio * \
                                convolve(g_AN_NMDA, spikes_AN) * (e_AN_NMDA - v_comp) / (1. + 0.3 * exp( -.1 * v_comp )) @mechanism::receptor

    # functions K
    function n_inf_K (v_comp real) real:
        return 0.02*(1.0 - exp(0.111111111111111*(25.0 - v_comp)))**(-1)*(-0.002*(-25.0 + v_comp)*(1.0 - exp(0.111111111111111*(-25.0 + v_comp)))**(-1) + 0.02*(-25.0 + v_comp)*(1.0 - exp(0.111111111111111*(25.0 - v_comp)))**(-1))**(-1)*(-25.0 + v_comp)

    function tau_n_K (v_comp real) real:
        return 0.311526479750779*(-0.002*(-25.0 + v_comp)*(1.0 - exp(0.111111111111111*(-25.0 + v_comp)))**(-1) + 0.02*(-25.0 + v_comp)*(1.0 - exp(0.111111111111111*(25.0 - v_comp)))**(-1))**(-1)


    # functions Na
    function m_inf_Na (v_comp real) real:
        return (1.0 - 0.020438532058318*exp(-0.111111111111111*v_comp))**(-1)*((1.0 - 0.020438532058318*exp(-0.111111111111111*v_comp))**(-1)*(6.372366 + 0.182*v_comp) + (1.0 - 48.9271928701465*exp(0.111111111111111*v_comp))**(-1)*(-4.341612 - 0.124*v_comp))**(-1)*(6.372366 + 0.182*v_comp)

    function tau_m_Na (v_comp real) real:
        return 0.311526479750779*((1.0 - 0.020438532058318*exp(-0.111111111111111*v_comp))**(-1)*(6.372366 + 0.182*v_comp) + (1.0 - 48.9271928701465*exp(0.111111111111111*v_comp))**(-1)*(-4.341612 - 0.124*v_comp))**(-1)

    function h_inf_Na (v_comp real) real:
        return 1.0*(1.0 + 35734.4671267926*exp(0.161290322580645*v_comp))**(-1)

    function tau_h_Na (v_comp real) real:
        return 0.311526479750779*((1.0 - 4.52820432639598e-5*exp(-0.2*v_comp))**(-1)*(1.200312 + 0.024*v_comp) + (1.0 - 3277527.87650153*exp(0.2*v_comp))**(-1)*(-0.6826183 - 0.0091*v_comp))**(-1)


    internals:
        tp_AMPA real = (tau_r_AMPA * tau_d_AMPA) / (tau_d_AMPA - tau_r_AMPA) * ln( tau_d_AMPA / tau_r_AMPA )
        g_norm_AMPA real =  1. / ( -exp( -tp_AMPA / tau_r_AMPA ) + exp( -tp_AMPA / tau_d_AMPA ) )

        tp_GABA real = (tau_r_GABA * tau_d_GABA) / (tau_d_GABA - tau_r_GABA) * ln( tau_d_GABA / tau_r_GABA )
        g_norm_GABA real =  1. / ( -exp( -tp_GABA / tau_r_GABA ) + exp( -tp_GABA / tau_d_GABA ) )

        tp_NMDA real = (tau_r_NMDA * tau_d_NMDA) / (tau_d_NMDA - tau_r_NMDA) * ln( tau_d_NMDA / tau_r_NMDA )
        g_norm_NMDA real =  1. / ( -exp( -tp_NMDA / tau_r_NMDA ) + exp( -tp_NMDA / tau_d_NMDA ) )

        tp_AN_AMPA real = (tau_r_AN_AMPA * tau_d_AN_AMPA) / (tau_d_AN_AMPA - tau_r_AN_AMPA) * ln( tau_d_AN_AMPA / tau_r_AN_AMPA )
        g_norm_AN_AMPA real =  1. / ( -exp( -tp_AN_AMPA / tau_r_AN_AMPA ) + exp( -tp_AN_AMPA / tau_d_AN_AMPA ) )

        tp_AN_NMDA real = (tau_r_AN_NMDA * tau_d_AN_NMDA) / (tau_d_AN_NMDA - tau_r_AN_NMDA) * ln( tau_d_AN_NMDA / tau_r_AN_NMDA )
        g_norm_AN_NMDA real =  1. / ( -exp( -tp_AN_NMDA / tau_r_AN_NMDA ) + exp( -tp_AN_NMDA / tau_d_AN_NMDA ) )

    input:
        spikes_AMPA <- spike
        spikes_GABA <- spike
        spikes_NMDA <- spike
        spikes_AN <- spike

    output:
        spike
